<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="UTF-8">
<!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge"><![endif]-->
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 1.5.5">
<meta name="author" content="The Python Quants GmbH &lt;training@tpq.io&gt;">
<title>Python for Algorithmic Trading</title>
<link rel="stylesheet" href="Python%20for%20Algorithmic%20Trading_files/css.css" target="_blank">
<style>
/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */
/* Remove comment around @import statement below when using as a custom stylesheet */
/*@import "https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700" target="_blank";*/
article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}
audio,canvas,video{display:inline-block}
audio:not([controls]){display:none;height:0}
[hidden],template{display:none}
script{display:none!important}
html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}
a{background:transparent}
a:focus{outline:thin dotted}
a:active,a:hover{outline:0}
h1{font-size:2em;margin:.67em 0}
abbr[title]{border-bottom:1px dotted}
b,strong{font-weight:bold}
dfn{font-style:italic}
hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}
mark{background:#ff0;color:#000}
code,kbd,pre,samp{font-family:monospace;font-size:1em}
pre{white-space:pre-wrap}
q{quotes:"\201C" "\201D" "\2018" "\2019"}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sup{top:-.5em}
sub{bottom:-.25em}
img{border:0}
svg:not(:root){overflow:hidden}
figure{margin:0}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{border:0;padding:0}
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}
button,input{line-height:normal}
button,select{text-transform:none}
button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}
input[type="search"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}
input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}
html,body{font-size:100%}
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto;tab-size:4;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}
a:hover{cursor:pointer}
img,object,embed{max-width:100%;height:auto}
object,embed{height:100%}
img{-ms-interpolation-mode:bicubic}
.left{float:left!important}
.right{float:right!important}
.text-left{text-align:left!important}
.text-right{text-align:right!important}
.text-center{text-align:center!important}
.text-justify{text-align:justify!important}
.hide{display:none}
img,object,svg{display:inline-block;vertical-align:middle}
textarea{height:auto;min-height:50px}
select{width:100%}
.center{margin-left:auto;margin-right:auto}
.spread{width:100%}
p.lead,.paragraph.lead>p,#preamble>.sectionbody>.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}
.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}
a{color:#2156a5;text-decoration:underline;line-height:inherit}
a:hover,a:focus{color:#1d4b8f}
a img{border:none}
p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}
p aside{font-size:.875em;line-height:1.35;font-style:italic}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}
h1{font-size:2.125em}
h2{font-size:1.6875em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}
h4,h5{font-size:1.125em}
h6{font-size:1em}
hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}
em,i{font-style:italic;line-height:inherit}
strong,b{font-weight:bold;line-height:inherit}
small{font-size:60%;line-height:inherit}
code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}
ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}
ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}
ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}
ul.square{list-style-type:square}
ul.circle{list-style-type:circle}
ul.disc{list-style-type:disc}
ul.no-bullet{list-style:none}
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}
dl dt{margin-bottom:.3125em;font-weight:bold}
dl dd{margin-bottom:1.25em}
abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}
abbr{text-transform:none}
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}
blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}
blockquote cite:before{content:"\2014 \0020"}
blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}
@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}
h1{font-size:2.75em}
h2{font-size:2.3125em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}
h4{font-size:1.4375em}}
table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}
table thead,table tfoot{background:#f7f8f7;font-weight:bold}
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}
table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}
table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}
h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}
.clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:" ";display:table}
.clearfix:after,.float-group:after{clear:both}
*:not(pre)>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed;word-wrap:break-word}
*:not(pre)>code.nobreak{word-wrap:normal}
*:not(pre)>code.nowrap{white-space:nowrap}
pre,pre>code{line-height:1.45;color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;text-rendering:optimizeSpeed}
em em{font-style:normal}
strong strong{font-weight:400}
.keyseq{color:rgba(51,51,51,.8)}
kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}
.keyseq kbd:first-child{margin-left:0}
.keyseq kbd:last-child{margin-right:0}
.menuseq,.menu{color:rgba(0,0,0,.8)}
b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}
b.button:before{content:"[";padding:0 3px 0 2px}
b.button:after{content:"]";padding:0 2px 0 3px}
p a>code:hover{color:rgba(0,0,0,.9)}
#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}
#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:" ";display:table}
#header:after,#content:after,#footnotes:after,#footer:after{clear:both}
#content{margin-top:1.25em}
#content:before{content:none}
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}
#header>h1:only-child,body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}
#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}
#header .details span:first-child{margin-left:-.125em}
#header .details span.email a{color:rgba(0,0,0,.85)}
#header .details br{display:none}
#header .details br+span:before{content:"\00a0\2013\00a0"}
#header .details br+span.author:before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}
#header .details br+span#revremark:before{content:"\00a0|\00a0"}
#header #revnumber{text-transform:capitalize}
#header #revnumber:after{content:"\00a0"}
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}
#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}
#toc>ul{margin-left:.125em}
#toc ul.sectlevel0>li>a{font-style:italic}
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}
#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}
#toc li{line-height:1.3334;margin-top:.3334em}
#toc a{text-decoration:none}
#toc a:active{text-decoration:underline}
#toctitle{color:#7a2518;font-size:1.2em}
@media only screen and (min-width:768px){#toctitle{font-size:1.375em}
body.toc2{padding-left:15em;padding-right:0}
#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}
#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}
#toc.toc2>ul{font-size:.9em;margin-bottom:0}
#toc.toc2 ul ul{margin-left:0;padding-left:1em}
#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}
body.toc2.toc-right{padding-left:0;padding-right:15em}
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}
@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}
#toc.toc2{width:20em}
#toc.toc2 #toctitle{font-size:1.375em}
#toc.toc2>ul{font-size:.95em}
#toc.toc2 ul ul{padding-left:1.25em}
body.toc2.toc-right{padding-left:0;padding-right:20em}}
#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}
#content #toc>:first-child{margin-top:0}
#content #toc>:last-child{margin-bottom:0}
#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}
#footer-text{color:rgba(255,255,255,.8);line-height:1.44}
.sect1{padding-bottom:.625em}
@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}
.sect1+.sect1{border-top:1px solid #efefed}
#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}
#content h1>a.anchor:before,h2>a.anchor:before,h3>a.anchor:before,#toctitle>a.anchor:before,.sidebarblock>.content>.title>a.anchor:before,h4>a.anchor:before,h5>a.anchor:before,h6>a.anchor:before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}
#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}
#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}
#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}
.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}
.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}
table.tableblock>caption.title{white-space:nowrap;overflow:visible;max-width:0}
.paragraph.lead>p,#preamble>.sectionbody>.paragraph:first-of-type p{color:rgba(0,0,0,.85)}
table.tableblock #preamble>.sectionbody>.paragraph:first-of-type p{font-size:inherit}
.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}
.admonitionblock>table td.icon{text-align:center;width:80px}
.admonitionblock>table td.icon img{max-width:none}
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}
.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}
.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}
.exampleblock>.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}
.exampleblock>.content>:first-child{margin-top:0}
.exampleblock>.content>:last-child{margin-bottom:0}
.sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}
.sidebarblock>:first-child{margin-top:0}
.sidebarblock>:last-child{margin-bottom:0}
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}
.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}
.literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class="highlight"],.listingblock pre[class^="highlight "],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}
.sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class="highlight"],.sidebarblock .listingblock pre[class^="highlight "],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}
.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}
.literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}
@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}
@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}
.literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}
.listingblock pre.highlightjs{padding:0}
.listingblock pre.highlightjs>code{padding:1em;-webkit-border-radius:4px;border-radius:4px}
.listingblock pre.prettyprint{border-width:0}
.listingblock>.content{position:relative}
.listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}
.listingblock:hover code[data-lang]:before{display:block}
.listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}
.listingblock.terminal pre .command:not([data-prompt]):before{content:"$"}
table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}
table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}
table.pyhltable td.code{padding-left:.75em;padding-right:0}
pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}
pre.pygments .lineno{display:inline-block;margin-right:.25em}
table.pyhltable .linenodiv{background:none!important;padding-right:0!important}
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}
.quoteblock>.title{margin-left:-1.5em;margin-bottom:.75em}
.quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}
.quoteblock blockquote{margin:0;padding:0;border:0}
.quoteblock blockquote:before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}
.quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}
.quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}
.quoteblock .quoteblock blockquote{padding:0 0 0 .75em}
.quoteblock .quoteblock blockquote:before{display:none}
.verseblock{margin:0 1em 1.25em 1em}
.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}
.verseblock pre strong{font-weight:400}
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}
.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}
.quoteblock .attribution br,.verseblock .attribution br{display:none}
.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}
.quoteblock.abstract{margin:0 0 1.25em 0;display:block}
.quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}
.quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}
table.tableblock{max-width:100%;border-collapse:separate}
table.tableblock td>.paragraph:last-child p>p:last-child,table.tableblock th>p:last-child,table.tableblock td>p:last-child{margin-bottom:0}
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}
table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}
table.grid-all tfoot>tr>th.tableblock,table.grid-all tfoot>tr>td.tableblock{border-width:1px 1px 0 0}
table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}
table.grid-all *>tr>.tableblock:last-child,table.grid-cols *>tr>.tableblock:last-child{border-right-width:0}
table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}
table.grid-all tbody>tr:last-child>th.tableblock,table.grid-all tbody>tr:last-child>td.tableblock,table.grid-all thead:last-child>tr>th.tableblock,table.grid-rows tbody>tr:last-child>th.tableblock,table.grid-rows tbody>tr:last-child>td.tableblock,table.grid-rows thead:last-child>tr>th.tableblock{border-bottom-width:0}
table.grid-rows tfoot>tr>th.tableblock,table.grid-rows tfoot>tr>td.tableblock{border-width:1px 0 0 0}
table.frame-all{border-width:1px}
table.frame-sides{border-width:0 1px}
table.frame-topbot{border-width:1px 0}
th.halign-left,td.halign-left{text-align:left}
th.halign-right,td.halign-right{text-align:right}
th.halign-center,td.halign-center{text-align:center}
th.valign-top,td.valign-top{vertical-align:top}
th.valign-bottom,td.valign-bottom{vertical-align:bottom}
th.valign-middle,td.valign-middle{vertical-align:middle}
table thead th,table tfoot th{font-weight:bold}
tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}
p.tableblock>code:only-child{background:none;padding:0}
p.tableblock{font-size:1em}
td>div.verse{white-space:pre}
ol{margin-left:1.75em}
ul li ol{margin-left:1.5em}
dl dd{margin-left:1.125em}
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}
ol>li p,ul>li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}
ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}
ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}
ul.checklist li>p:first-child>.fa-square-o:first-child,ul.checklist li>p:first-child>.fa-check-square-o:first-child{width:1em;font-size:.85em}
ul.checklist li>p:first-child>input[type="checkbox"]:first-child{width:1em;position:relative;top:1px}
ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}
ul.inline>li{list-style:none;float:left;margin-left:1.375em;display:block}
ul.inline>li>*{display:block}
.unstyled dl dt{font-weight:400;font-style:normal}
ol.arabic{list-style-type:decimal}
ol.decimal{list-style-type:decimal-leading-zero}
ol.loweralpha{list-style-type:lower-alpha}
ol.upperalpha{list-style-type:upper-alpha}
ol.lowerroman{list-style-type:lower-roman}
ol.upperroman{list-style-type:upper-roman}
ol.lowergreek{list-style-type:lower-greek}
.hdlist>table,.colist>table{border:0;background:none}
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}
td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}
td.hdlist1{font-weight:bold;padding-bottom:1.25em}
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}
.colist>table tr>td:first-of-type{padding:0 .75em;line-height:1}
.colist>table tr>td:last-of-type{padding:.25em 0}
.thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}
.imageblock.left,.imageblock[style*="float: left"]{margin:.25em .625em 1.25em 0}
.imageblock.right,.imageblock[style*="float: right"]{margin:.25em 0 1.25em .625em}
.imageblock>.title{margin-bottom:0}
.imageblock.thumb,.imageblock.th{border-width:6px}
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}
.image.left{margin-right:.625em}
.image.right{margin-left:.625em}
a.image{text-decoration:none;display:inline-block}
a.image object{pointer-events:none}
sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}
sup.footnote a,sup.footnoteref a{text-decoration:none}
sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}
#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}
#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}
#footnotes .footnote:last-of-type{margin-bottom:0}
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}
.gist .file-data>table{border:0;background:#fff;width:100%;margin-bottom:0}
.gist .file-data>table td.line-data{width:99%}
div.unbreakable{page-break-inside:avoid}
.big{font-size:larger}
.small{font-size:smaller}
.underline{text-decoration:underline}
.overline{text-decoration:overline}
.line-through{text-decoration:line-through}
.aqua{color:#00bfbf}
.aqua-background{background-color:#00fafa}
.black{color:#000}
.black-background{background-color:#000}
.blue{color:#0000bf}
.blue-background{background-color:#0000fa}
.fuchsia{color:#bf00bf}
.fuchsia-background{background-color:#fa00fa}
.gray{color:#606060}
.gray-background{background-color:#7d7d7d}
.green{color:#006000}
.green-background{background-color:#007d00}
.lime{color:#00bf00}
.lime-background{background-color:#00fa00}
.maroon{color:#600000}
.maroon-background{background-color:#7d0000}
.navy{color:#000060}
.navy-background{background-color:#00007d}
.olive{color:#606000}
.olive-background{background-color:#7d7d00}
.purple{color:#600060}
.purple-background{background-color:#7d007d}
.red{color:#bf0000}
.red-background{background-color:#fa0000}
.silver{color:#909090}
.silver-background{background-color:#bcbcbc}
.teal{color:#006060}
.teal-background{background-color:#007d7d}
.white{color:#bfbfbf}
.white-background{background-color:#fafafa}
.yellow{color:#bfbf00}
.yellow-background{background-color:#fafa00}
span.icon>.fa{cursor:default}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note:before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip:before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning:before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution:before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important:before{content:"\f06a";color:#bf0000}
.conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}
.conum[data-value] *{color:#fff!important}
.conum[data-value]+b{display:none}
.conum[data-value]:after{content:attr(data-value)}
pre .conum[data-value]{position:relative;top:-.125em}
b.conum *{color:inherit!important}
.conum:not([data-value]):empty{display:none}
dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}
h1,h2,p,td.content,span.alt{letter-spacing:-.01em}
p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}
p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}
p{margin-bottom:1.25rem}
.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}
.exampleblock>.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}
.print-only{display:none!important}
@media print{@page{margin:1.25cm .75cm}
*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}
a{color:inherit!important;text-decoration:underline!important}
a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}
a[href^="http:"]:not(.bare):after,a[href^="https:"]:not(.bare):after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}
abbr[title]:after{content:" (" attr(title) ")"}
pre,blockquote,tr,img,object,svg{page-break-inside:avoid}
thead{display:table-header-group}
svg{max-width:100%}
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}
#toc,.sidebarblock,.exampleblock>.content{background:none!important}
#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}
.sect1{padding-bottom:0!important}
.sect1+.sect1{border:0!important}
#header>h1:first-child{margin-top:1.25rem}
body.book #header{text-align:center}
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em 0}
body.book #header .details{border:0!important;display:block;padding:0!important}
body.book #header .details span:first-child{margin-left:0!important}
body.book #header .details br{display:block}
body.book #header .details br+span:before{content:none!important}
body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}
body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}
.listingblock code[data-lang]:before{display:block}
#footer{background:none!important;padding:0 .9375em}
#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}
.hide-on-print{display:none!important}
.print-only{display:block!important}
.hide-for-print{display:none!important}
.show-for-print{display:inherit!important}}
</style>
<link rel="stylesheet" href="Python%20for%20Algorithmic%20Trading_files/font-awesome.css" target="_blank">
<style>
/* Stylesheet for CodeRay to match GitHub theme | MIT License | http://foundation.zurb.com */
/*pre.CodeRay {background-color:#f7f7f8;}*/
.CodeRay .line-numbers{border-right:1px solid #d8d8d8;padding:0 0.5em 0 .25em}
.CodeRay span.line-numbers{display:inline-block;margin-right:.5em;color:rgba(0,0,0,.3)}
.CodeRay .line-numbers strong{color:rgba(0,0,0,.4)}
table.CodeRay{border-collapse:separate;border-spacing:0;margin-bottom:0;border:0;background:none}
table.CodeRay td{vertical-align: top;line-height:1.45}
table.CodeRay td.line-numbers{text-align:right}
table.CodeRay td.line-numbers>pre{padding:0;color:rgba(0,0,0,.3)}
table.CodeRay td.code{padding:0 0 0 .5em}
table.CodeRay td.code>pre{padding:0}
.CodeRay .debug{color:#fff !important;background:#000080 !important}
.CodeRay .annotation{color:#007}
.CodeRay .attribute-name{color:#000080}
.CodeRay .attribute-value{color:#700}
.CodeRay .binary{color:#509}
.CodeRay .comment{color:#998;font-style:italic}
.CodeRay .char{color:#04d}
.CodeRay .char .content{color:#04d}
.CodeRay .char .delimiter{color:#039}
.CodeRay .class{color:#458;font-weight:bold}
.CodeRay .complex{color:#a08}
.CodeRay .constant,.CodeRay .predefined-constant{color:#008080}
.CodeRay .color{color:#099}
.CodeRay .class-variable{color:#369}
.CodeRay .decorator{color:#b0b}
.CodeRay .definition{color:#099}
.CodeRay .delimiter{color:#000}
.CodeRay .doc{color:#970}
.CodeRay .doctype{color:#34b}
.CodeRay .doc-string{color:#d42}
.CodeRay .escape{color:#666}
.CodeRay .entity{color:#800}
.CodeRay .error{color:#808}
.CodeRay .exception{color:inherit}
.CodeRay .filename{color:#099}
.CodeRay .function{color:#900;font-weight:bold}
.CodeRay .global-variable{color:#008080}
.CodeRay .hex{color:#058}
.CodeRay .integer,.CodeRay .float{color:#099}
.CodeRay .include{color:#555}
.CodeRay .inline{color:#000}
.CodeRay .inline .inline{background:#ccc}
.CodeRay .inline .inline .inline{background:#bbb}
.CodeRay .inline .inline-delimiter{color:#d14}
.CodeRay .inline-delimiter{color:#d14}
.CodeRay .important{color:#555;font-weight:bold}
.CodeRay .interpreted{color:#b2b}
.CodeRay .instance-variable{color:#008080}
.CodeRay .label{color:#970}
.CodeRay .local-variable{color:#963}
.CodeRay .octal{color:#40e}
.CodeRay .predefined{color:#369}
.CodeRay .preprocessor{color:#579}
.CodeRay .pseudo-class{color:#555}
.CodeRay .directive{font-weight:bold}
.CodeRay .type{font-weight:bold}
.CodeRay .predefined-type{color:inherit}
.CodeRay .reserved,.CodeRay .keyword {color:#000;font-weight:bold}
.CodeRay .key{color:#808}
.CodeRay .key .delimiter{color:#606}
.CodeRay .key .char{color:#80f}
.CodeRay .value{color:#088}
.CodeRay .regexp .delimiter{color:#808}
.CodeRay .regexp .content{color:#808}
.CodeRay .regexp .modifier{color:#808}
.CodeRay .regexp .char{color:#d14}
.CodeRay .regexp .function{color:#404;font-weight:bold}
.CodeRay .string{color:#d20}
.CodeRay .string .string .string{background:#ffd0d0}
.CodeRay .string .content{color:#d14}
.CodeRay .string .char{color:#d14}
.CodeRay .string .delimiter{color:#d14}
.CodeRay .shell{color:#d14}
.CodeRay .shell .delimiter{color:#d14}
.CodeRay .symbol{color:#990073}
.CodeRay .symbol .content{color:#a60}
.CodeRay .symbol .delimiter{color:#630}
.CodeRay .tag{color:#008080}
.CodeRay .tag-special{color:#d70}
.CodeRay .variable{color:#036}
.CodeRay .insert{background:#afa}
.CodeRay .delete{background:#faa}
.CodeRay .change{color:#aaf;background:#007}
.CodeRay .head{color:#f8f;background:#505}
.CodeRay .insert .insert{color:#080}
.CodeRay .delete .delete{color:#800}
.CodeRay .change .change{color:#66f}
.CodeRay .head .head{color:#f4f}
</style>
<style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1px; bottom: 2px; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style><style type="text/css">.MathJax_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}
.MathJax .merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MathJax .MJX-monospace {font-family: monospace}
.MathJax .MJX-sans-serif {font-family: sans-serif}
#MathJax_Tooltip {background-color: InfoBackground; color: InfoText; border: 1px solid black; box-shadow: 2px 2px 5px #AAAAAA; -webkit-box-shadow: 2px 2px 5px #AAAAAA; -moz-box-shadow: 2px 2px 5px #AAAAAA; -khtml-box-shadow: 2px 2px 5px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true'); padding: 3px 4px; z-index: 401; position: absolute; left: 0; top: 0; width: auto; height: auto; display: none}
.MathJax {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}
.MathJax:focus, body :focus .MathJax {display: inline-table}
.MathJax img, .MathJax nobr, .MathJax a {border: 0; padding: 0; margin: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; vertical-align: 0; line-height: normal; text-decoration: none}
img.MathJax_strut {border: 0!important; padding: 0!important; margin: 0!important; vertical-align: 0!important}
.MathJax span {display: inline; position: static; border: 0; padding: 0; margin: 0; vertical-align: 0; line-height: normal; text-decoration: none}
.MathJax nobr {white-space: nowrap!important}
.MathJax img {display: inline!important; float: none!important}
.MathJax * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}
.MathJax_Processing {visibility: hidden; position: fixed; width: 0; height: 0; overflow: hidden}
.MathJax_Processed {display: none!important}
.MathJax_ExBox {display: block!important; overflow: hidden; width: 1px; height: 60ex; min-height: 0; max-height: none}
.MathJax .MathJax_EmBox {display: block!important; overflow: hidden; width: 1px; height: 60em; min-height: 0; max-height: none}
.MathJax .MathJax_HitBox {cursor: text; background: white; opacity: 0; filter: alpha(opacity=0)}
.MathJax .MathJax_HitBox * {filter: none; opacity: 1; background: transparent}
#MathJax_Tooltip * {filter: none; opacity: 1; background: transparent}
@font-face {font-family: MathJax_Main; src: url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regular.woff?rev=2.6.0') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/otf/MathJax_Main-Regular.otf?rev=2.6.0') format('opentype')}
@font-face {font-family: MathJax_Main; src: url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/woff/MathJax_Main-Bold.woff?rev=2.6.0') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/otf/MathJax_Main-Bold.otf?rev=2.6.0') format('opentype'); font-weight: bold}
@font-face {font-family: MathJax_Main; src: url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/woff/MathJax_Main-Italic.woff?rev=2.6.0') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/otf/MathJax_Main-Italic.otf?rev=2.6.0') format('opentype'); font-style: italic}
@font-face {font-family: MathJax_Math; src: url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/woff/MathJax_Math-Italic.woff?rev=2.6.0') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/otf/MathJax_Math-Italic.otf?rev=2.6.0') format('opentype'); font-style: italic}
@font-face {font-family: MathJax_Caligraphic; src: url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/woff/MathJax_Caligraphic-Regular.woff?rev=2.6.0') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/otf/MathJax_Caligraphic-Regular.otf?rev=2.6.0') format('opentype')}
@font-face {font-family: MathJax_Size1; src: url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/woff/MathJax_Size1-Regular.woff?rev=2.6.0') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/otf/MathJax_Size1-Regular.otf?rev=2.6.0') format('opentype')}
@font-face {font-family: MathJax_Size2; src: url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/woff/MathJax_Size2-Regular.woff?rev=2.6.0') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/otf/MathJax_Size2-Regular.otf?rev=2.6.0') format('opentype')}
@font-face {font-family: MathJax_Size3; src: url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/woff/MathJax_Size3-Regular.woff?rev=2.6.0') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/otf/MathJax_Size3-Regular.otf?rev=2.6.0') format('opentype')}
@font-face {font-family: MathJax_Size4; src: url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/woff/MathJax_Size4-Regular.woff?rev=2.6.0') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/fonts/HTML-CSS/TeX/otf/MathJax_Size4-Regular.otf?rev=2.6.0') format('opentype')}
.MathJax .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style></head>
<body class="book toc2 toc-left"><div style="visibility: hidden; overflow: hidden; position: absolute; top: 0px; height: 1px; width: auto; padding: 0px; border: 0px none; margin: 0px; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal;"><div id="MathJax_Hidden"></div></div><div id="MathJax_Message" style="display: none;"></div>
<div id="header">
<h1>Python for Algorithmic Trading</h1>
<div class="details">
<span id="author" class="author">The Python Quants GmbH &lt;training@tpq.io&gt;</span><br>
</div>
<div id="toc" class="toc2">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#copyright">Copyright</a></li>
<li><a href="#preface">Preface</a></li>
<li><a href="#algorithmic_trading">1. Python and Algorithmic Trading</a>
<ul class="sectlevel2">
<li><a href="#_introduction">1.1. Introduction</a></li>
<li><a href="#_python_for_finance">1.2. Python for Finance</a></li>
<li><a href="#_algorithmic_trading">1.3. Algorithmic Trading</a></li>
<li><a href="#_python_for_algorithmic_trading">1.4. Python for Algorithmic Trading</a></li>
<li><a href="#_focus_and_prerequisites">1.5. Focus and Prerequisites</a></li>
<li><a href="#trading_strategies">1.6. Trading Strategies</a></li>
<li><a href="#_overview">1.7. Overview</a></li>
<li><a href="#_conclusions">1.8. Conclusions</a></li>
<li><a href="#_further_resources">1.9. Further Resources</a></li>
</ul>
</li>
<li><a href="#python_environment">2. Setting up the Python Environment</a>
<ul class="sectlevel2">
<li><a href="#_introduction_2">2.1. Introduction</a></li>
<li><a href="#conda_package">2.2. Conda as a Package Manager</a></li>
<li><a href="#conda_environment">2.3. Conda as a Virtual Environment Manager</a></li>
<li><a href="#docker_container">2.4. Using Docker Containerization</a></li>
<li><a href="#cloud_instance">2.5. Using Cloud Instances</a></li>
<li><a href="#_conclusions_2">2.6. Conclusions</a></li>
<li><a href="#_further_resources_2">2.7. Further Resources</a></li>
</ul>
</li>
<li><a href="#financial_data">3. Working with Financial Data</a>
<ul class="sectlevel2">
<li><a href="#_introduction_3">3.1. Introduction</a></li>
<li><a href="#reading_from_sources">3.2. Reading Financial Data From Different Sources</a></li>
<li><a href="#open_data_sources">3.3. Working with Open Data Sources</a></li>
<li><a href="#eikon_data_api">3.4. Thomson Reuters Eikon Python API</a></li>
<li><a href="#storing_data">3.5. Storing Financial Data Efficiently</a></li>
<li><a href="#_conclusions_3">3.6. Conclusions</a></li>
<li><a href="#_further_resources_3">3.7. Further Resources</a></li>
<li><a href="#_python_scripts">3.8. Python Scripts</a></li>
</ul>
</li>
<li><a href="#vectorized_backtesting">4. Mastering Vectorized Backtesting</a>
<ul class="sectlevel2">
<li><a href="#_introduction_4">4.1. Introduction</a></li>
<li><a href="#using_vectorization">4.2. Making Use of Vectorization</a></li>
<li><a href="#simple_moving_averages">4.3. Strategies based on Simple Moving Averages</a></li>
<li><a href="#momentum_trading">4.4. Strategies based on Momentum</a></li>
<li><a href="#mean_reversion">4.5. Strategies based on Mean-Reversion</a></li>
<li><a href="#_conclusions_4">4.6. Conclusions</a></li>
<li><a href="#_further_resources_4">4.7. Further Resources</a></li>
<li><a href="#_python_scripts_2">4.8. Python Scripts</a></li>
</ul>
</li>
<li><a href="#machine_learning">5. Predicting Market Movements with Machine Learning</a>
<ul class="sectlevel2">
<li><a href="#_introduction_5">5.1. Introduction</a></li>
<li><a href="#linear_regression">5.2. Using Linear Regression for Market Movement Prediction</a></li>
<li><a href="#machine_learning_scikit">5.3. Using Machine Learning for Market Movement Prediction</a></li>
<li><a href="#deep_learning">5.4. Using Deep Learning for Market Movement Prediction</a></li>
<li><a href="#_conclusions_5">5.5. Conclusions</a></li>
<li><a href="#_further_resources_5">5.6. Further Resources</a></li>
<li><a href="#_python_scripts_3">5.7. Python Scripts</a></li>
</ul>
</li>
<li><a href="#event_based_backtesting">6. Building Classes for Event-based Backtesting</a>
<ul class="sectlevel2">
<li><a href="#_introduction_6">6.1. Introduction</a></li>
<li><a href="#base_class">6.2. Backtesting Base Class</a></li>
<li><a href="#long_only">6.3. Long Only Backtesting Class</a></li>
<li><a href="#long_short">6.4. Long Short Backtesting Class</a></li>
<li><a href="#_conclusions_6">6.5. Conclusions</a></li>
<li><a href="#_further_resources_6">6.6. Further Resources</a></li>
<li><a href="#_python_scripts_4">6.7. Python Scripts</a></li>
</ul>
</li>
<li><a href="#realtime_sockets">7. Working with Real-Time Data and Sockets</a>
<ul class="sectlevel2">
<li><a href="#_introduction_7">7.1. Introduction</a></li>
<li><a href="#tick_server">7.2. Running a Simple Tick Data Server</a></li>
<li><a href="#tick_client">7.3. Connecting a Simple Tick Data Client</a></li>
<li><a href="#signal_generation">7.4. Signal Generation in Real-Time</a></li>
<li><a href="#stream_plotting">7.5. Visualizing Streaming Data with Plotly</a></li>
<li><a href="#_conclusions_7">7.6. Conclusions</a></li>
<li><a href="#_further_resources_7">7.7. Further Resources</a></li>
<li><a href="#_python_scripts_5">7.8. Python Scripts</a></li>
</ul>
</li>
<li><a href="#trading_oanda">8. CFD Trading with Oanda</a>
<ul class="sectlevel2">
<li><a href="#_introduction_8">8.1. Introduction</a></li>
<li><a href="#oanda_setup">8.2. Setting Up an Account</a></li>
<li><a href="#oanda_api">8.3. The Oanda API</a></li>
<li><a href="#oanda_historical">8.4. Retrieving Historical Data</a></li>
<li><a href="#oanda_streaming">8.5. Working with Streaming Data</a></li>
<li><a href="#oanda_trading">8.6. Implementing Trading Strategies in Real-Time</a></li>
<li><a href="#oanda_account">8.7. Retrieving Account Information</a></li>
<li><a href="#_conclusions_8">8.8. Conclusions</a></li>
<li><a href="#_further_resources_8">8.9. Further Resources</a></li>
<li><a href="#_python_scripts_6">8.10. Python Scripts</a></li>
</ul>
</li>
<li><a href="#interactive_brokers">9. Stock Trading with Interactive Brokers</a>
<ul class="sectlevel2">
<li><a href="#_introduction_9">9.1. Introduction</a></li>
<li><a href="#_setting_up_an_account">9.2. Setting up an Account</a></li>
<li><a href="#_python_and_the_ib_api">9.3. Python and the IB API</a></li>
<li><a href="#_a_wrapper_class_for_the_ib_api">9.4. A Wrapper Class for the IB API</a></li>
<li><a href="#_retrieving_historical_data_from_ib">9.5. Retrieving Historical Data from IB</a></li>
<li><a href="#_working_with_streaming_data_from_the_ib_api">9.6. Working with Streaming Data from the IB API</a></li>
<li><a href="#_implementing_trading_strategies_in_real_time">9.7. Implementing Trading Strategies in Real-Time</a></li>
<li><a href="#_retrieving_account_information">9.8. Retrieving Account Information</a></li>
<li><a href="#_conclusions_9">9.9. Conclusions</a></li>
<li><a href="#_further_resources_9">9.10. Further Resources</a></li>
<li><a href="#_python_scripts_7">9.11. Python Scripts</a></li>
</ul>
</li>
<li><a href="#trading_crypto">10. Trading Cryptocurrencies with Gemini</a>
<ul class="sectlevel2">
<li><a href="#_introduction_10">10.1. Introduction</a></li>
<li><a href="#_setting_up_an_account_2">10.2. Setting Up an Account</a></li>
<li><a href="#_a_wrapper_class_for_the_gemini_api">10.3. A Wrapper Class for the Gemini API</a></li>
<li><a href="#_retrieving_historical_data">10.4. Retrieving Historical Data</a></li>
<li><a href="#_placing_and_managing_orders_via_the_api">10.5. Placing and Managing Orders via the API</a></li>
<li><a href="#_most_recent_transaction_history">10.6. Most Recent Transaction History</a></li>
<li><a href="#_implementing_trading_strategies_in_real_time_2">10.7. Implementing Trading Strategies in Real-Time</a></li>
<li><a href="#_retrieving_account_information_2">10.8. Retrieving Account Information</a></li>
<li><a href="#_conclusions_10">10.9. Conclusions</a></li>
<li><a href="#_further_resources_10">10.10. Further Resources</a></li>
<li><a href="#_python_scripts_8">10.11. Python Scripts</a></li>
</ul>
</li>
<li><a href="#automating_trading">11. Automating Trading Operations</a>
<ul class="sectlevel2">
<li><a href="#_introduction_11">11.1. Introduction</a></li>
<li><a href="#_capital_management">11.2. Capital Management</a></li>
<li><a href="#_risk_analysis_and_management">11.3. Risk Analysis and Management</a></li>
<li><a href="#_automating_strategy_implementation">11.4. Automating Strategy Implementation</a></li>
<li><a href="#_visual_step_by_step_overview">11.5. Visual Step-by-Step Overview</a></li>
<li><a href="#_conclusions_11">11.6. Conclusions</a></li>
<li><a href="#_further_resources_11">11.7. Further Resources</a></li>
<li><a href="#_python_scripts_9">11.8. Python Scripts</a></li>
</ul>
</li>
<li><a href="#python_numpy_pandas">Appendix A: Python, NumPy, matplotlib, pandas</a>
<ul class="sectlevel2">
<li><a href="#_introduction_12">Introduction</a></li>
<li><a href="#_python_basics">Python Basics</a></li>
<li><a href="#_numpy">NumPy</a></li>
<li><a href="#_matplotlib">matplotlib</a></li>
<li><a href="#_pandas">pandas</a></li>
<li><a href="#_case_study">Case Study</a></li>
<li><a href="#_conclusions_12">Conclusions</a></li>
<li><a href="#_further_resources_12">Further Resources</a></li>
</ul>
</li>
<li><a href="#author">Author Biography</a></li>
</ul>
</div>
</div>
<div id="content">
<div class="sect1">
<h2 id="copyright">Copyright</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This document as well as all related codes, Jupyter Notebooks and other materials on the Quant Platform (<a href="http://pyalgo.pqp.io/" target="_blank" class="bare">http://pyalgo.pqp.io</a>)
 are copyrighted and only intended for personal use in the context of a 
single user license for the Python for Algorithmic Trading course (<a href="http://pyalgo.tpq.io/" target="_blank" class="bare">http://pyalgo.tpq.io</a>).
 Any kind of sharing, distribution, duplication, etc. without written 
permission by the The Python Quants GmbH is prohibited. The contents, 
Python codes, Jupyter Notebooks and other materials come without 
warranties or representations, to the extent permitted by applicable 
law.</p>
</div>
<div class="paragraph">
<p>Notice that this document is still work in progress and that 
substantial additions, changes, updates, etc. will take place in the 
near future. It is advised to regularly check for new versions of the 
document.</p>
</div>
<div class="paragraph">
<p>(c) Dr. Yves J. Hilpisch, May 2017</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="preface">Preface</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph align_me_right">
<p>Dataism says that the universe consists of data flows, and the value 
of any phenomenon or entity is determined by its contribution to data 
processing. …​ Dataism thereby collapses the barrier between animals 
[humans] and machines, and expects electronic algorithms to eventually 
decipher and outperform biochemical algorithms.</p>
</div>
</blockquote>
<div class="attribution">
— Yuval Noah Harari (Homo Deus)
</div>
</div>
<div class="paragraph">
<p>Finding the right algorithm to automatically and successfully trade in financial markets is the <em>holy grail in finance</em>. Not too long ago, <strong>Algorithmic Trading</strong>
 was only available for institutional players with deep pockets and lots
 of assets under management. Recent developments in the areas of open 
source, open data, cloud compute and storage as well as online trading 
platforms have leveled the playing field for smaller institutions and 
individual traders — making it possible to get started in this 
fascinating discipline being equipped with a modern notebook and an 
Internet connection only.</p>
</div>
<div class="paragraph">
<p>Nowadays, <strong>Python</strong> and its eco-system of powerful 
packages is the technology platform of choice for algorithmic trading. 
Among others, Python allows you to do <em>efficient data analytics</em> (with e.g. <a href="http://pandas.pydata.org/" target="_blank"><code>pandas</code></a>), to apply <em>machine learning</em> to stock market prediction (with e.g. <a href="http://scikit-learn.org/" target="_blank"><code>scikit-learn</code></a>) or even make use of Google’s <em>deep learning</em> technology (with <a href="http://tensorflow.org/" target="_blank"><code>tensorflow</code></a>).</p>
</div>
<div class="paragraph">
<p>This is a course about <strong>Python for Algorithmic Trading</strong>.
 Such a course at the intersection of two vast and exciting fields can 
hardly cover all topics of relevance. However, it can cover a range of 
important meta topics in-depth:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>financial data</strong>: financial data is at the core of every algorithmic trading project; Python and packages like <code>NumPy</code> and <code>pandas</code> do a great job in handling and working with structured financial data of any kind (end-of-day, intraday, high frequency)</p>
</li>
<li>
<p><strong>backtesting</strong>: no automated, algorithmic trading 
without a rigorous testing of the trading strategy to be deployed; the 
course covers, among others, trading strategies bases on simple moving 
averages, momentum, mean-reversion and machine/deep learning based 
prediction</p>
</li>
<li>
<p><strong>real-time data</strong>: algorithmic trading requires dealing
 with real-time data, online algorithms based on it and visualization in
 real-time; the course introduces to socket programming with <code>ZeroMQ</code> and streaming visualization with Plotly</p>
</li>
<li>
<p><strong>online platforms</strong>: no trading without a trading platform; the course covers three popular electronic trading platforms: <a href="http://oanda.com/" target="_blank">Oanda</a> (CFD trading), <a href="http://interactivebrokers.com/" target="_blank">Interactive Brokers</a> (stock and options trading) and <a href="http://gemini.com/" target="_blank">Gemini</a> (cryptocurrency trading); it also provides convenient wrapper classes in Python to get up and running within minutes</p>
</li>
<li>
<p><strong>automation</strong>: the beauty as well as some major 
challenges in algorithmic trading result from the automation of the 
trading operation; the course shows how to deploy Python in the cloud 
and how to set up an environment appropriate for automated, algorithmic 
trading</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The course offers a unique learning experience with the following features and benefits.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">coverage of relevant topics</dt>
<dd>
<p>It is the only course covering such a breadth and depth with regard to relevant topics in Python for Algorithmic trading.</p>
</dd>
<dt class="hdlist1">self-contained code base</dt>
<dd>
<p>The course is accompanied by a Git repository with all codes in a self-contained, executable form (3,000+ lines of code).</p>
</dd>
<dt class="hdlist1">book version as PDF</dt>
<dd>
<p>In addition to the online version, there is also a book version as PDF (400+ pages).</p>
</dd>
<dt class="hdlist1">online/video training (optional)</dt>
<dd>
<p>The Python Quants offer an <a href="http://training.tpq.io/algotrading.html" target="_blank">online and video training class</a>
 (not included) based on this course/book that provides an interactive 
learning experience (e.g. to see the code executed live, to ask 
individual questions) as well as a look at additional topics or at 
topics from a different angle.</p>
</dd>
<dt class="hdlist1">real trading as the goal</dt>
<dd>
<p>The coverage of three different online trading platforms puts the 
student in the position to start both paper and live trading 
efficiently. This course equips the student with relevant, practical and
 valuable background knowledge.</p>
</dd>
<dt class="hdlist1">do-it-yourself &amp; self-paced approach</dt>
<dd>
<p>Since the material and the codes are self-contained and only relying 
on standard Python packages, the student has full knowledge of and full 
control over what is going on, how to use the code examples, how to 
change them, etc. There is no need to rely on third-party platforms, for
 instance, to do the backtesting or to connect to the trading platforms.
 The student can do all this on his/her own with this course — at a pace
 that is most convenient — and has every single line of code to do so 
available.</p>
</dd>
<dt class="hdlist1">forum &amp; email support</dt>
<dd>
<p>Although you are supposed to <em>be able</em> to do it all by 
yourself, we are there to help you. You can post questions and comments 
in our forum or send us them by email. We aim to get back within 24 
hours.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>The course assumes that the student has — at least on a fundamental 
level — some background knowledge both in Python programming as well as 
in financial trading. The course material includes <a href="#python_numpy_pandas">Appendix A: Python, NumPy, matplotlib, pandas</a>
 that introduces important Python, NumPy, matplotlib and pandas topics. 
Good references to get a sound understanding of the Python topics 
important for the course are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Hilpisch, Yves (2014): <em>Python for Finance</em>. O’Reilly, Beijing et al.</p>
</li>
<li>
<p>McKinney, Wes (2017): <em>Python for Data Analysis</em>. 2nd ed., O’Reilly, Beijing et al.</p>
</li>
<li>
<p>Ramalho, Luciano (2016): <em>Fluent Python</em>. O’Reilly, Beijing et al.</p>
</li>
<li>
<p>VanderPlas, Jake (2016): <em>Python Data Science Handbook</em>. O’Reilly, Beijing et al.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Background information about algorithmic trading can be found, for instance, in these books:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Chan, Ernest (2009): <em>Quantitative Trading</em>. John Wiley &amp; Sons, Hoboken et al.</p>
</li>
<li>
<p>Chan, Ernest (2013): <em>Algorithmic Trading</em>. John Wiley &amp; Sons, Hoboken et al.</p>
</li>
<li>
<p>Kissel, Robert (2013): <em>Algorithmic Trading and Portfolio Management</em>. Elsevier/Academic Press, Amsterdam et al.</p>
</li>
<li>
<p>Narang, Rishi (2013): <em>Inside the Black Box</em>. John Wiley &amp; Sons, Hoboken et al.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Enjoy your journey through the Algorithmic Trading world with Python and get in touch under <a href="mailto:training@tpq.io">training@tpq.io</a> if you have questions or comments.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="algorithmic_trading">1. Python and Algorithmic Trading</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph align_me_right">
<p>At Goldman [Sachs] the number of people engaged in trading shares has fallen from a peak of 600 in 2000 to just two today.<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup></p>
</div>
</blockquote>
<div class="attribution">
— The Economist
</div>
</div>
<div class="sect2">
<h3 id="_introduction">1.1. Introduction</h3>
<div class="paragraph">
<p>This chapter provides background information for, and an overview of,
 the topics covered in this book. Although Python for Algorithmic 
Trading is a niche at the intersection of Python programming and 
finance, it is a fast-growing one that touches on such diverse topics as
 Python deployment, interactive financial analytics, machine and deep 
learning, object oriented programming, socket communication, 
visualization of streaming data, and trading platforms.</p>
</div>
<div class="paragraph">
<p>For a quick refresher on important Python topics, read <a href="#python_numpy_pandas">Appendix A: Python, NumPy, matplotlib, pandas</a> first.</p>
</div>
</div>
<div class="sect2">
<h3 id="_python_for_finance">1.2. Python for Finance</h3>
<div class="paragraph">
<p>The Python programming language originated in 1991 with the first 
release by Guido van Rossum of a version labeled 0.9.0. In 1994, version
 1.0 followed. However, it took almost two decades for Python to 
establish itself as a major programming language and technology platform
 in the financial industry. Of course, there were early adopters, mainly
 hedge funds, but widespread adoption probably started only around 2011.</p>
</div>
<div class="paragraph">
<p>One major obstacle to the adoption of Python in the financial 
industry has been the fact that the default Python version, called 
CPython, is an interpreted, high level language. Numerical algorithms in
 general and financial algorithms in particular are quite often 
implemented based on (nested) loop structures. While compiled, low level
 languages like C or C++ are really fast at executing such loops, 
Python — which relies on interpretation instead of compilation — is 
generally quite slow at doing so. As a consequence, pure Python proved 
too slow for many real-world financial applications, such as option 
pricing or risk management.</p>
</div>
<div class="paragraph">
<p>Although Python was never specifically targeted towards the 
scientific and financial communities, many people from these fields 
nevertheless liked the beauty and conciseness of its syntax. Not too 
long ago, it was generally considered good tradition to explain a 
(financial) algorithm and at the same time present some pseudo-code as 
an intermediate step towards its proper technological implementation. 
Many felt that, with Python, the pseudo-code step would not be necessary
 anymore. And they were proven mostly correct.</p>
</div>
<div class="paragraph">
<p>Consider, for instance, the Euler discretization of the geometric Brownian motion as in <a href="#euler_disc_intro">Euler discretization of geometric Brownian motion</a>.</p>
</div>
<div id="euler_disc_intro" class="stemblock">
<div class="title">Euler discretization of geometric Brownian motion</div>
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-1"><span class="MJXp-msubsup" id="MJXp-Span-2"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-3" style="margin-right: 0.05em;">S</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-4" style="vertical-align: -0.4em;">T</span></span><span class="MJXp-mo" id="MJXp-Span-5" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-msubsup" id="MJXp-Span-6"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-7" style="margin-right: 0.05em;">S</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-8" style="vertical-align: -0.4em;">0</span></span><span class="MJXp-mi" id="MJXp-Span-9">exp</span><span class="MJXp-mo" id="MJXp-Span-10" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mo" id="MJXp-Span-11" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mo" id="MJXp-Span-12" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-13">r</span><span class="MJXp-mo" id="MJXp-Span-14" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mn" id="MJXp-Span-15">0.5</span><span class="MJXp-msubsup" id="MJXp-Span-16"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-17" style="margin-right: 0.05em;">σ</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-18" style="vertical-align: 0.5em;">2</span></span><span class="MJXp-mo" id="MJXp-Span-19" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-20">T</span><span class="MJXp-mo" id="MJXp-Span-21" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-22">σ</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-23">z</span><span class="MJXp-msqrt" id="MJXp-Span-24"><span class="MJXp-surd"><span style="font-size: 134%; margin-top: 0.104em;">√</span></span><span class="MJXp-root"><span class="MJXp-rule" style="border-top: 0.08em solid;"></span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-25">T</span></span></span></span><span class="MJXp-mo" id="MJXp-Span-26" style="margin-left: 0em; margin-right: 0em;">)</span></span></span><div class="MathJax_Display MathJax_Processed"><span class="MathJax" id="MathJax-Element-1-Frame" tabindex="0" style=""><nobr><span class="math" id="MathJax-Span-1" role="math"><span style="display: inline-block; position: relative; width: 0em; height: 0px; font-size: 124%;"><span style="position: absolute;"><span class="mrow" id="MathJax-Span-2"><span class="msubsup" id="MathJax-Span-3"><span style="display: inline-block; position: relative; width: 1.186em; height: 0px;"><span style="position: absolute; clip: rect(3.126em, 1000.65em, 4.155em, -1000em); top: -3.982em; left: 0em;"><span class="mi" id="MathJax-Span-4" style="font-family: MathJax_Math; font-style: italic;">S<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.032em;"></span></span><span style="display: inline-block; width: 0px; height: 3.982em;"></span></span><span style="position: absolute; top: -3.832em; left: 0.613em;"><span class="mi" id="MathJax-Span-5" style="font-size: 70.7%; font-family: MathJax_Math; font-style: italic;">T<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.085em;"></span></span><span style="display: inline-block; width: 0px; height: 3.982em;"></span></span></span></span><span class="mo" id="MathJax-Span-6" style="font-family: MathJax_Main; padding-left: 0.278em;">=</span><span class="msubsup" id="MathJax-Span-7" style="padding-left: 0.278em;"><span style="display: inline-block; position: relative; width: 1.042em; height: 0px;"><span style="position: absolute; clip: rect(3.126em, 1000.65em, 4.155em, -1000em); top: -3.982em; left: 0em;"><span class="mi" id="MathJax-Span-8" style="font-family: MathJax_Math; font-style: italic;">S<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.032em;"></span></span><span style="display: inline-block; width: 0px; height: 3.982em;"></span></span><span style="position: absolute; top: -3.832em; left: 0.613em;"><span class="mn" id="MathJax-Span-9" style="font-size: 70.7%; font-family: MathJax_Main;">0</span><span style="display: inline-block; width: 0px; height: 3.982em;"></span></span></span></span><span class="mi" id="MathJax-Span-10" style="font-family: MathJax_Main; padding-left: 0.167em;">exp</span><span class="mo" id="MathJax-Span-11"></span><span class="mo" id="MathJax-Span-12" style="font-family: MathJax_Main;">(</span><span class="mo" id="MathJax-Span-13" style="font-family: MathJax_Main;">(</span><span class="mi" id="MathJax-Span-14" style="font-family: MathJax_Math; font-style: italic;">r</span><span class="mo" id="MathJax-Span-15" style="font-family: MathJax_Main; padding-left: 0.222em;">−</span><span class="mn" id="MathJax-Span-16" style="font-family: MathJax_Main; padding-left: 0.222em;">0.5</span><span class="msubsup" id="MathJax-Span-17"><span style="display: inline-block; position: relative; width: 1.051em; height: 0px;"><span style="position: absolute; clip: rect(3.4em, 1000.57em, 4.144em, -1000em); top: -3.982em; left: 0em;"><span class="mi" id="MathJax-Span-18" style="font-family: MathJax_Math; font-style: italic;">σ<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.001em;"></span></span><span style="display: inline-block; width: 0px; height: 3.982em;"></span></span><span style="position: absolute; top: -4.395em; left: 0.622em;"><span class="mn" id="MathJax-Span-19" style="font-size: 70.7%; font-family: MathJax_Main;">2</span><span style="display: inline-block; width: 0px; height: 3.982em;"></span></span></span></span><span class="mo" id="MathJax-Span-20" style="font-family: MathJax_Main;">)</span><span class="mi" id="MathJax-Span-21" style="font-family: MathJax_Math; font-style: italic;">T<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.12em;"></span></span><span class="mo" id="MathJax-Span-22" style="font-family: MathJax_Main; padding-left: 0.222em;">+</span><span class="mi" id="MathJax-Span-23" style="font-family: MathJax_Math; font-style: italic; padding-left: 0.222em;">σ<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.001em;"></span></span><span class="mi" id="MathJax-Span-24" style="font-family: MathJax_Math; font-style: italic;">z<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="msqrt" id="MathJax-Span-25"><span style="display: inline-block; position: relative; width: 1.537em; height: 0px;"><span style="position: absolute; clip: rect(3.154em, 1000.7em, 4.133em, -1000em); top: -3.982em; left: 0.833em;"><span class="mrow" id="MathJax-Span-26"><span class="mi" id="MathJax-Span-27" style="font-family: MathJax_Math; font-style: italic;">T<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.12em;"></span></span></span><span style="display: inline-block; width: 0px; height: 3.982em;"></span></span><span style="position: absolute; clip: rect(0.907em, 1000.7em, 1.273em, -1000em); top: -1.873em; left: 0.833em;"><span style="display: inline-block; overflow: hidden; vertical-align: -0.063em; border-top: 1.3px solid; width: 0.704em; height: 0px;"></span><span style="display: inline-block; width: 0px; height: 1.058em;"></span></span><span style="position: absolute; clip: rect(3.031em, 1000.85em, 4.333em, -1000em); top: -3.997em; left: 0em;"><span style="font-family: MathJax_Main;">√</span><span style="display: inline-block; width: 0px; height: 3.982em;"></span></span></span></span><span class="mo" id="MathJax-Span-28" style="font-family: MathJax_Main;">)</span></span></span></span></span></nobr></span></div><script type="math/tex; mode=display" id="MathJax-Element-1">\begin{equation}
S_T = S_0 \exp((r - 0.5 \sigma^2) T + \sigma z \sqrt{T})
\end{equation}</script>
</div>
</div>
<div class="paragraph">
<p>For decades, the Latex markup language and compiler have been the 
gold standard for authoring scientific documents containing mathematical
 formulae. In many ways, Latex syntax is similar to or already like 
pseudo-code when, for example, layouting equations as in <a href="#euler_disc_intro">Euler discretization of geometric Brownian motion</a>. In this particular case, the Latex version looks like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>S_T = S_0 \exp((r - 0.5 \sigma^2) T + \sigma z \sqrt{T})</pre>
</div>
</div>
<div class="paragraph">
<p>In Python, this translates to executable code — given respective 
variable definitions — that is also really close to the financial 
formula as well as to the Latex representation:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">S_T = S_0 * exp((r - <span class="float">0.5</span> * sigma ** <span class="integer">2</span>) * T + sigma * z * sqrt(T))</code></pre>
</div>
</div>
<div class="paragraph">
<p>However, the speed issue remains. Such a difference equation, as a 
numerical approximation of the respective stochastic differential 
equation, is generally used to price derivatives by Monte Carlo 
simulation or to do risk analysis and management based on simulation. 
These tasks in turn can require millions of simulations that need to be 
finished in due time — often in almost real-time or at least near-real 
time. Interpreted Python per se was never designed to be fast enough to 
tackle such computationally demanding tasks.</p>
</div>
<div class="paragraph">
<p>In 2006, version 1.0 of the <a href="http://www.numpy.org/" target="_blank"><code>NumPy</code> Python package</a> was released by Travis Oliphant. <code>NumPy</code> stands for <em>numerical Python</em>,
 suggesting that it targets scenarios that are numerically demanding. 
The base Python interpreter tries to be as general as possible in many 
areas, which often leads to quite a bit of overhead at run-time.<sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</sup> <code>NumPy</code>,
 on the other hand, uses specialization as its major approach to avoid 
overhead and to be as good and as fast as possible in certain 
application scenarios.</p>
</div>
<div class="paragraph">
<p>The major class of <code>NumPy</code> is the regular array object, called ndarray object for <em>n-dimensional array</em>.
 It is immutable, i.e. it cannot be changed in size, and can only 
accommodate a single data type, called dtype. This specialization allows
 for the implementation of concise and fast code. One central approach 
in this context is <em>vectorization</em>. Basically, this approach avoids looping on the Python level and delegates the looping to specialized <code>NumPy</code> code, implemented in general in C and therefore rather fast.</p>
</div>
<div class="paragraph">
<p>Consider the simulation of 1,000,000 end of period values <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-27"><span class="MJXp-msubsup" id="MJXp-Span-28"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-29" style="margin-right: 0.05em;">S</span><span class="MJXp-mrow MJXp-script" id="MJXp-Span-30" style="vertical-align: -0.4em;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-31">T</span></span></span></span></span><span class="MathJax MathJax_Processed" id="MathJax-Element-2-Frame" tabindex="0" style=""><nobr><span class="math" id="MathJax-Span-29" role="math"><span style="display: inline-block; position: relative; width: 0em; height: 0px; font-size: 124%;"><span style="position: absolute;"><span class="mrow" id="MathJax-Span-30"><span class="msubsup" id="MathJax-Span-31"><span style="display: inline-block; position: relative; width: 1.186em; height: 0px;"><span style="position: absolute; clip: rect(3.138em, 1000.65em, 4.149em, -1000em); top: -3.985em; left: 0em;"><span class="mi" id="MathJax-Span-32" style="font-family: MathJax_Math; font-style: italic;">S<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.032em;"></span></span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span><span style="position: absolute; top: -3.835em; left: 0.613em;"><span class="texatom" id="MathJax-Span-33"><span class="mrow" id="MathJax-Span-34"><span class="mi" id="MathJax-Span-35" style="font-size: 70.7%; font-family: MathJax_Math; font-style: italic;">T<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.085em;"></span></span></span></span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span></span></span></span></span></span></span></nobr></span><script type="math/tex" id="MathJax-Element-2">S_{T}</script> according to <a href="#euler_disc_intro">Euler discretization of geometric Brownian motion</a> with pure Python. The major part of the code below is a for loop with 1,000,000 iterations:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">%%time
<span class="keyword">import</span> <span class="include">random</span>
<span class="keyword">from</span> <span class="include">math</span> <span class="keyword">import</span> <span class="include">exp</span>, <span class="include">sqrt</span>

S_0 = <span class="integer">100</span>  <i class="conum" data-value="1"></i><b>(1)</b>
r = <span class="float">0.05</span>  <i class="conum" data-value="2"></i><b>(2)</b>
T = <span class="float">1.0</span>  <i class="conum" data-value="3"></i><b>(3)</b>
sigma = <span class="float">0.2</span>  <i class="conum" data-value="4"></i><b>(4)</b>

values = []  <i class="conum" data-value="5"></i><b>(5)</b>

<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">1000000</span>):  <i class="conum" data-value="6"></i><b>(6)</b>
    S_T = S_0 * exp((r - <span class="float">0.5</span> * sigma ** <span class="integer">2</span>) * T +
                    sigma * random.gauss(<span class="integer">0</span>, <span class="integer">1</span>) * sqrt(T))  <i class="conum" data-value="7"></i><b>(7)</b>
    values.append(S_T)  <i class="conum" data-value="8"></i><b>(8)</b>

CPU times: user <span class="float">1.27</span> s, sys: <span class="float">15.3</span> ms, total: <span class="float">1.29</span> s
Wall time: <span class="float">1.29</span> s</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The initial index level.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The constant short rate.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The time horizon in year fractions.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The constant volatility factor.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>An empty <code>list</code> object to collect simulated values.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The main <code>for</code> loop.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>The simulation of a <em>single</em> end-of-period value.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Appends the simulated value to the <code>list</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>With <code>NumPy</code>, you can avoid looping on the Python level 
completely by the use of vectorization. The code is much more concise, 
more readable, and faster by a factor of about 25:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">%%time
<span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

S_0 = <span class="integer">100</span>
r = <span class="float">0.05</span>
T = <span class="float">1.0</span>
sigma = <span class="float">0.2</span>

values = S_0 * np.exp((r - <span class="float">0.5</span> * sigma ** <span class="integer">2</span>) * T +
                     sigma * np.random.standard_normal(<span class="integer">1000000</span>) * np.sqrt(T))  <i class="conum" data-value="1"></i><b>(1)</b>

CPU times: user <span class="float">43.6</span> ms, sys: <span class="float">6.13</span> ms, total: <span class="float">49.8</span> ms
Wall time: <span class="float">48.8</span> ms</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This single line of <code>NumPy</code> code simulates all the values and stores them in an <code>ndarray</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Vectorization is a powerful concept for writing concise, easy-to-read
 and easy-to-maintain code in finance and algorithmic trading. With <code>NumPy</code>,
 vectorized code does not only makes code more concise, it also can 
speed up code execution considerably, like in the Monte Carlo simulation
 example by a factor of about 25.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>It’s safe to say that <code>NumPy</code> has significantly 
contributed to the success of Python in science and finance. Many other 
popular Python packages from the so-called <em>scientific Python stack</em> build on <code>NumPy</code> as an efficient, performing data structure to store and handle numerical data. In fact, <code>NumPy</code> is an outgrowth of the <code>SciPy</code> package project, which provides a wealth of functionality frequently needed in science. The <code>SciPy</code>
 project recognized the need for a more powerful numerical data 
structure and consolidated older projects like Numeric and NumArray in 
this area into a new, unifying one in the form of <code>NumPy</code>.</p>
</div>
<div class="paragraph">
<p>In algorithmic trading, Monte Carlo simulation might not be the most 
important use case for a programming language. However, if you enter the
 algorithmic trading space, the management of larger or even big 
financial time series data sets is, for example, a very important use 
case. Just think of the backtesting of (intraday) trading strategies or 
the processing of tick data streams during trading hours. This is where 
the <code>pandas</code> data analysis package comes into play (<a href="http://pandas.pydata.org/" target="_blank"><code>pandas</code> home page</a>).</p>
</div>
<div class="paragraph">
<p>Development of <code>pandas</code> began in 2008 by Wes McKinney, who
 back then was working at AQR Capital Management, a big hedge fund 
operating out of Greenwich, Connecticut. Like for any other hedge fund, 
working with time series data is of paramount importance for AQR Capital
 Management, but back then Python did not provide any kind of appealing 
support for this type of data. Wes’s idea was to create a package that 
mimics the capabilities of the R statistical language in this area. This
 is reflected, for example, in naming the major class DataFrame, whose 
counterpart in R is called data.frame. Not being considered close enough
 to the core business of money management, AQR Capital Management open 
sourced the <code>pandas</code> project in 2009, which marks the beginning of a major success story in open source-based data and financial analytics.</p>
</div>
<div class="paragraph">
<p>Partly due to <code>pandas</code>, Python has become a major force in
 data and financial analytics. Many people who adopt Python, coming from
 diverse other languages, cite <code>pandas</code> as a major reason for their decision. In combination with open data sources like <a href="http://quandl.com/" target="_blank">Quandl</a>, <code>pandas</code>
 even allows students to do sophisticated financial analytics with the 
lowest barriers of entry ever: a regular notebook with an Internet 
connection suffices.</p>
</div>
<div class="paragraph">
<p>Assume an algorithmic trader is interested in trading Bitcoins, the 
cryptocurrency with the largest market capitalization. A first step 
might be to retrieve data about the historical exchange rate in USD. 
Using Quandl data and <code>pandas</code>, such a task is accomplished in less than a minute. <a href="#bitcoin_xr">Historical Bitcoin exchange rate in USD from the beginning of 2013</a>
 shows the plot that results from the Python code below, which is 
(omitting some plotting style related parameterizations) only four 
lines. Although <code>pandas</code> is not explicitly imported, the 
Quandl Python wrapper package by default returns a DataFrame object 
which is then used to add a simple moving average (SMA) of 100 days, as 
well as to visualize the raw data alongside the SMA.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="keyword">import</span> <span class="include">quandl</span> <span class="keyword">as</span> q  <i class="conum" data-value="1"></i><b>(1)</b>
d = q.get(<span class="string"><span class="delimiter">'</span><span class="content">BCHAIN/MKPRU</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>
d[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>] = d[<span class="string"><span class="delimiter">'</span><span class="content">Value</span><span class="delimiter">'</span></span>].rolling(<span class="integer">100</span>).mean()  <i class="conum" data-value="3"></i><b>(3)</b>
d[d.index &gt; <span class="string"><span class="delimiter">'</span><span class="content">2013-1-1</span><span class="delimiter">'</span></span>].plot(title=<span class="string"><span class="delimiter">'</span><span class="content">BTC/USD exchange rate</span><span class="delimiter">'</span></span>,
                             figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="4"></i><b>(4)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the Quandl Python wrapper package.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Retrieves daily data for the Bitcoin exchange rate and returns a <code>pandas</code> DataFrame object with a single column.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Calculates the SMA for 100 days in vectorized fashion.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Selects data from January 1, 2013 on and plots it.</td>
</tr>
</tbody></table>
</div>
<div id="bitcoin_xr" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/bitcoin_xr.png" alt="bitcoin xr">
</div>
<div class="title">Figure 1. Historical Bitcoin exchange rate in USD from the beginning of 2013</div>
</div>
<div class="paragraph">
<p>Obviously, <code>NumPy</code> and <code>pandas</code> measurably 
contribute to the success of Python in finance. However, the Python 
ecosystem has much more to offer in the form of additional Python 
packages that solve rather fundamental problems and sometimes also 
specialized ones. In this book, we will make use of, among others, 
packages for data retrieval and storage (e.g. <code>PyTables</code>, TsTables, <code>SQLite</code>)
 and for machine and deep learning (e.g. scikit-learn, tensorflow) — to 
name just two categories. Along the way, we will also implement classes 
and modules that will make any algorithmic trading project more 
efficient. But the main packages used throughout will be <code>NumPy</code> and <code>pandas</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>While <code>NumPy</code> provides the basic data structure to store numerical data and work with it, <code>pandas</code>
 brings powerful time series management capabilities to the table. It 
also does a great job of wrapping functionality from other packages into
 an easy-to-use API. The Bitcoin example just described shows that a 
single method call on a DataFrame object is enough to generate a plot 
with two financial time series visualized. Like <code>NumPy</code>, <code>pandas</code>
 allows for rather concise, vectorized code that is also generally 
executed quite fast due to heavy use of compiled code under the hood.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_algorithmic_trading">1.3. Algorithmic Trading</h3>
<div class="paragraph">
<p>The term <em>algorithmic trading</em> is neither uniquely nor 
universally defined. On a rather basic level, it refers to the trading 
of financial instruments based on some formal algorithm. An <em>algorithm</em>
 is a set of operations (mathematical, technical) to be conducted in a 
certain sequence to achieve a certain goal. For example, there are 
mathematical algorithms to solve a Rubik’s cube.<sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnote_3" title="View footnote.">3</a>]</sup>
 Such an algorithm can solve the problem at hand via a step-by-step 
procedure, often perfectly. Another example is algorithms for finding 
the root(s) of an equation if it (they) exist(s) at all. In that sense, 
the objective of a mathematical algorithm is often well specified and an
 optimal solution is often expected.</p>
</div>
<div class="paragraph">
<p>But what about the objective of financial trading algorithm? This 
question is not that easy to answer in general. It might help to step 
back for a moment and consider motives for trading in general. In Dorn 
et al. (2008), they write:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Trading in financial markets is an important economic activity. 
Trades are necessary to get into and out of the market, to put unneeded 
cash into the market, and to convert back into cash when the money is 
wanted. They are also needed to move money around within the market, to 
exchange one asset
for another, to manage risk, and to exploit information about
future price movements.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>The view expressed here is more technical than economic in nature, focusing mainly on the process itself and only partly on <em>why</em>
 people initiate trades in the first place. For our purposes, a 
non-exhaustive list of financial trading motives of people and also of 
financial institution managing money of their own or for others 
includes:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>beta trading</strong>: earning market risk premia by 
investing, for instance, in exchange traded funds (ETFs) that replicate 
the performance of the S&amp;P 500</p>
</li>
<li>
<p><strong>alpha generation</strong>: earning risk premia independent of
 the market by, for example, selling short stocks listed in the S&amp;P 
500 or ETFs on the S&amp;P 500</p>
</li>
<li>
<p><strong>static hedging</strong>: hedging against market risks by buying, for example, out-of-the-money put options on the S&amp;P 500</p>
</li>
<li>
<p><strong>dynamic hedging</strong>: hedging against market risks 
affecting options on the S&amp;P 500 by, for example, dynamically 
trading futures on the S&amp;P 500 and appropriate cash, money market, 
or rate instruments</p>
</li>
<li>
<p><strong>asset-liability management</strong>: trading S&amp;P 500 
stocks and ETFs to be able to cover liabilities resulting from, for 
example, writing life insurance policies</p>
</li>
<li>
<p><strong>market making</strong>: providing, for example, liquidity to options on the S&amp;P 500 by buying and selling options at different bid and ask prices</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>All these types of trades can be implemented by a discretionary 
approach, with the human trader making decisions mainly on his or her 
own. as well as based on algorithms supporting the human trader or even 
replacing him completely in the decision making process. In this 
context, computerization of financial trading of course plays an 
important role. While in the beginning of financial trading, floor 
trading with a large group of people shouting at each other ("open 
outcry") was the only way of executing trades, computerization and the 
advent of the Internet and web technologies have revolutionized trading 
in the financial industry. The quote at the beginning of this chapter 
illustrates this impressively in terms of the number of people actively 
engaged in financial at Goldman Sachs in 2000 and in 2016. It is a trend
 that was foreseen 25 years ago, as Solomon and Corso (1991) point out:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Computers have revolutionized the trading of securities and the stock
 market is currently in the midst of a dynamic transformation. It is 
clear that the market of the future will not resemble the markets of the
 past.</p>
</div>
<div class="paragraph">
<p>Technology has made it possible for information regarding stock 
prices to be sent all over the world in seconds. Presently, computers 
route orders and execute small trades directly from the brokerage firm’s
 terminal to the exchange. Computers now link together various stock 
exchanges, a practice which is helping to create a single global market 
for the trading of securities. The continuing improvements in technology
 will make it possible to execute trades globally by electronic trading 
systems.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Interestingly, one of the oldest and most widely used algorithms is 
found in dynamic hedging of options. Already with the publication of the
 seminal papers about the pricing of European options by Black and 
Scholes (1973) and Merton (1973), the algorithm, called <em>delta hedging</em>,
 was made available — long before computerized and electronic trading 
even started. Delta hedging as a trading algorithm shows how to hedge 
away all market risks in a simplified, perfect, continuous model world. 
In the real world, with transaction costs, discrete trading, imperfectly
 liquid markets, and other frictions ("imperfections"), the algorithm 
has proven — somewhat surprisingly maybe — its usefulness and robustness
 as well. It might not allow to perfectly hedge away market risks 
affecting options, but it is useful in getting close to the ideal and is
 therefore still used on a large scale in the financial industry.<sup class="footnote">[<a id="_footnoteref_4" class="footnote" href="#_footnote_4" title="View footnote.">4</a>]</sup></p>
</div>
<div class="paragraph">
<p>This book focuses on algorithmic trading in the context of <em>alpha generating strategies</em>.
 Although there are more sophisticated definitions for alpha, for the 
purposes of this book alpha is seen as the difference between a trading 
strategy’s return over some period of time and the return of the 
benchmark (single stock, index, cryptocurrency, etc.). For example, if 
the S&amp;P 500 returns 10% in 2018 and an algorithmic strategy returns 
12%, then alpha is +2% points. If the strategy returns 7%, then alpha is
 -3% points. In general, such numbers are not adjusted for risk, and 
other risk characteristics like maximal drawdown (period) are usually 
considered to be of second order importance, if at all.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>This book focuses on alpha-generating strategies, i.e. strategies 
that try to generate positive returns (above a benchmark) independent of
 the market’s performance itself. Alpha is defined in this book in the 
simplest way as the excess return of a strategy over the benchmark 
financial instrument.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>There are other areas where trading-related algorithms play an important role. One is the <em>high frequency trading</em> (HFT) space, where speed is typically the discipline in which players compete.<sup class="footnote">[<a id="_footnoteref_5" class="footnote" href="#_footnote_5" title="View footnote.">5</a>]</sup> The motives for HFT are diverse, but market making and alpha generation probably play a prominent role. Another one is <em>trade execution</em>,
 where algorithms are deployed to optimally execute certain non-standard
 trades. Motives in this area might include the execution (at best 
possible prices) of large orders or the execution of an order with as 
little market and price impact as possible. A more subtle motive might 
be to disguise an order by executing it on a number of different 
exchanges.</p>
</div>
<div class="paragraph">
<p>An important question remains to be addressed: is there any advantage
 to using algorithms for trading instead of human research, experience, 
and discretion? This question can hardly be answered in any generality. 
For sure, there are human traders and portfolio managers who have 
earned, on average, more than their benchmark for investors over longer 
periods of time. The paramount example in this regard is Warren Buffett.
 On the other hand, statistical analyses show that the majority of 
active portfolio managers rarely beat relevant benchmarks consistently. 
Referring to the year 2015, Adam Shell writes:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Last year, for example, when the Standard &amp; Poor’s 500-stock 
index posted a paltry total return of 1.4% with dividends included, 66% 
of “actively managed” large-company stock funds posted smaller returns 
than the index …​ The longer-term outlook is just as gloomy, with 84% of
 large-cap funds generating lower returns than the S&amp;P 500 in the 
latest five year period and 82% falling shy in the past 10 years, the 
study found.<sup class="footnote">[<a id="_footnoteref_6" class="footnote" href="#_footnote_6" title="View footnote.">6</a>]</sup></p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>In an empirical study published in December 2016, Harvey et al. (2016) write:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>We analyze and contrast the performance of discretionary and 
systematic hedge funds. Systematic funds use strategies that are 
rules‐based, with little or no daily intervention by humans …​ We find 
that, for the period 1996‐2014, systematic equity managers underperform 
their discretionary counterparts in terms of unadjusted (raw) returns, 
but that after adjusting for exposures to well‐known risk factors, the 
risk‐adjusted performance is similar. In the case of macro, systematic 
funds outperform discretionary funds, both on an unadjusted and 
risk‐adjusted basis.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p><a href="#hedge_fund_performance">Annualized performance of hedge fund categories</a> reproduces the major quantitative findings of the study by Harvey et al. (2016).<sup class="footnote">[<a id="_footnoteref_7" class="footnote" href="#_footnote_7" title="View footnote.">7</a>]</sup> In the table, <em>factors</em>
 include traditional ones (equity, bonds, etc.), dynamic ones (value, 
momentum, etc.), and volatility (buying at-the-money puts and calls). 
The <em>adjusted return appraisal ratio</em> divides alpha by the adjusted return volatility. For more details and background, see the paper itself.</p>
</div>
<div class="paragraph">
<p>The study’s results illustrate that systematic ("algorithmic") macro 
hedge funds perform best as a category, both in unadjusted and 
risk-adjusted terms. They generate an annualized alpha of 4.85% points 
over the period studied. These are hedge funds implementing strategies 
that are typically global, cross-asset, and often involve political and 
macroeconomic elements. Systematic equity hedge funds only beat their 
discretionary counterparts on the basis of the adjusted return appraisal
 ratio (0.35 vs. 0.25).</p>
</div>
<table id="hedge_fund_performance" class="tableblock frame-all grid-all spread">
<caption class="title">Table 1. Annualized performance of hedge fund categories</caption>
<colgroup>
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 20%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>systematic macro</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>discretionary macro</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>systematic equity</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>discretionary equity</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>return average</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">5.01%</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">2.86%</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">2.88%</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">4.09%</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>return attributed to factors</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.15%</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1.28%</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1.77%</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">2.86%</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>adj. return average (alpha)</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">4.85%</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1.57%</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1.11%</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">1.22%</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>adj. return volatility</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">10.93%</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">5.10%</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">3.18%</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">4.79%</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>adj. return appraisal ratio</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.44</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.31</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.35</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.25</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect2">
<h3 id="_python_for_algorithmic_trading">1.4. Python for Algorithmic Trading</h3>
<div class="paragraph">
<p>Python is used in many corners of the financial industry, but has 
become particularly popular in the algorithmic trading space. There are a
 few good reasons for this:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>data analytics capabilities</strong>: A major requirement for
 every algorithmic trading project is the ability to manage and process 
financial data efficiently. Python, in combination with packages like <code>NumPy</code> and <code>pandas</code>, makes life easier in this regard for every algorithmic trader than most other programming languages.</p>
</li>
<li>
<p><strong>handling of modern APIs</strong>: Modern online trading platforms like <a href="http://oanda.com/" target="_blank">Oanda</a> and <a href="http://gemini.com/" target="_blank">Gemini</a>
 offer RESTful application programming interfaces (APIs) and socket 
(streaming) APIs to access historical and live data. Python is really 
good at interacting with such APIs.</p>
</li>
<li>
<p><strong>dedicated packages</strong>: In addition to the standard data
 analytics packages, there are multiple packages available that are 
dedicated to the algorithmic trading space, such as <a href="http://gbeced.github.io/pyalgotrade/" target="_blank">PyAlgoTrade</a> and <a href="https://github.com/quantopian/zipline" target="_blank">Zipline</a> for the backtesting of trading strategies, and <a href="https://github.com/quantopian/pyfolio" target="_blank">Pyfolio</a> for performing portfolio and risk analysis.</p>
</li>
<li>
<p><strong>vendor sponsored packages</strong>: More and more vendors in 
the space release open source Python packages to facilitate access to 
their offerings; among them are online trading platforms like Oanda as 
well as the leading data providers like <a href="https://www.bloomberglabs.com/api/" target="_blank">Bloomberg</a> and <a href="https://developers.thomsonreuters.com/all/api-overviews" target="_blank">Thomson Reuters</a>.</p>
</li>
<li>
<p><strong>dedicated platforms</strong>: <a href="http://quantopian.com/" target="_blank">Quantopian</a>,
 for example, offers a standardized backtesting environment as a 
web-based platform where the language of choice is Python and where 
people can exchange ideas with like-minded others via different social 
network features. Near the end of 2016, Quantopian reported that it had 
attracted more than 100,000 users.</p>
</li>
<li>
<p><strong>buy- and sell-side adoption</strong>: More and more 
institutional players have adopted Python to streamline development 
efforts in their trading departments. This, in turn, requires more and 
more staff proficient in Python, which makes learning Python a 
worthwhile investment.</p>
</li>
<li>
<p><strong>education, training, and books</strong>: Prerequisites for 
the wide-spread adoption of a technology or programming language are 
academic and professional education and training programs in combination
 with specialized books and other resources. The Python ecosystem has 
seen a tremendous growth in such offerings recently, educating and 
training more and more people in the use of Python for finance. This can
 be expected to reinforce the trend of Python adoption in the 
algorithmic trading space.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In summary, it is rather safe to say that Python plays an important 
role in algorithmic trading already, and seems to have strong momentum 
to become even more important in the near future. It is therefore a good
 choice for anyone trying to enter the space, be it as an ambitious 
“hobby” trader or as a professional employed by a leading financial 
institution engaged in automated trading.</p>
</div>
</div>
<div class="sect2">
<h3 id="_focus_and_prerequisites">1.5. Focus and Prerequisites</h3>
<div class="paragraph">
<p>The focus of this book is on Python as a programming language <em>for</em>
 algorithmic trading. The book assumes that the reader already has some 
experience with Python and popular Python packages used for data 
analytics. Good introductory books are, for example, Hilpisch (2014), 
McKinney (2017), and VanderPlas (2016), which all can be consulted to 
build a solid foundation in Python for data analysis and finance. The 
reader is also expected to have some experience with typical tools used 
for interactive analytics with Python, such as IPython, to which 
VanderPlas (2016) also provides an introduction.</p>
</div>
<div class="paragraph">
<p>This book presents and explains Python code that is applied to the 
topics at hand, like backtesting trading strategies or working with 
streaming data. It cannot provide a thorough introduction to all 
packages used in different places. It tries, however, to highlight those
 capabilities of the packages that are central to the exposition (such 
as vectorization with <code>NumPy</code>).</p>
</div>
<div class="paragraph">
<p>The book also cannot provide a thorough introduction and overview of 
all financial and operational aspects relevant for algorithmic trading. 
The approach instead focuses on the use of Python to build the necessary
 infrastructure for automated, algorithmic trading systems. Of course, 
the majority of examples used are taken from the algorithmic trading 
space. However, when dealing with, say, momentum or mean-reversion 
strategies, they are more or less simply used without providing 
(statistical) verification or an in-depth discussion of their 
intricacies. Whenever it seems appropriate, references are given that 
point the reader to sources that address issues left open during the 
exposition.</p>
</div>
<div class="paragraph">
<p>All in all, this book is written for readers who have some experience
 with both Python and (algorithmic) trading. For such a reader, the book
 is a practical guide to the creation of automated trading systems using
 Python and additional packages.</p>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>This book uses a number of Python programming approaches (e.g. object
 oriented programming) and packages (e.g. scikit-learn) that cannot be 
explained in detail. The focus is on <em>applying</em> these approaches 
and packages to different steps in an algorithmic trading process. It is
 therefore recommended that those who do not yet have enough Python (for
 finance) experience additionally consult more introductory Python 
texts.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="trading_strategies">1.6. Trading Strategies</h3>
<div class="paragraph">
<p>Throughout this book, four different algorithmic trading strategies 
are used as examples. They are introduced briefly below and in some more
 detail in <a href="#vectorized_backtesting">Mastering Vectorized Backtesting</a>. All these trading strategies can be classified as mainly <em>alpha seeking strategies</em>
 since their main objective is to generate positive, above-market 
returns independent of the market direction. Canonical examples 
throughout the book when it comes to financial instruments traded are a <em>stock index, a single stock</em>, or <em>a cryptocurrency</em>
 (denominated in a fiat currency). The book does not cover strategies 
involving multiple financial instruments at the same time (pair trading 
strategies, strategies based on baskets, etc.). It also covers only 
strategies whose trading signals are derived from structured, financial 
time series data and not, for instance, from unstructured data sources 
like news or social media feeds. This keeps the discussions and the 
Python implementations concise and easier to understand, in line with 
the approach (discussed earlier) of focusing on Python <em>for</em> algorithmic trading.<sup class="footnote">[<a id="_footnoteref_8" class="footnote" href="#_footnote_8" title="View footnote.">8</a>]</sup></p>
</div>
<div class="paragraph">
<p>The remainder of this section gives a quick overview of the four trading strategies used in this book.</p>
</div>
<div class="sect3">
<h4 id="_simple_moving_averages">1.6.1. Simple Moving Averages</h4>
<div class="paragraph">
<p>The first type of trading strategy relies on simple moving averages 
(SMAs) to generate trading signals and market positionings. These 
trading strategies have been popularized by so-called technical analysts
 or chartists. The basic idea is that a shorter-term SMA being higher in
 value than a longer term SMA signals a long market position and the 
opposite scenario signals a neutral or short market position.</p>
</div>
</div>
<div class="sect3">
<h4 id="_momentum">1.6.2. Momentum</h4>
<div class="paragraph">
<p>The basic idea behind momentum strategies is that a financial 
instrument is assumed to perform in accordance with its recent 
performance for some additional time. For example, when a stock index 
has seen a negative return on average over the last five days, it is 
assumed that its performance will be negative tomorrow as well.</p>
</div>
</div>
<div class="sect3">
<h4 id="_mean_reversion">1.6.3. Mean-Reversion</h4>
<div class="paragraph">
<p>In mean-reversion strategies, a financial instrument is assumed to 
revert to some mean or trend level if it is currently far enough away 
from such a level. For example, assume that a stock trades 10 USD under 
its 200 days SMA level of 100. It is then expected that the stock price 
will return to its SMA level sometime soon.</p>
</div>
</div>
<div class="sect3">
<h4 id="_machine_and_deep_learning">1.6.4. Machine and Deep Learning</h4>
<div class="paragraph">
<p>With machine and deep learning algorithms, one generally takes a more
 black box-like approach to predicting market movements. In this book, 
we mainly rely on historical return observations as features to train 
machine and deep learning algorithms to predict stock market movements.</p>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>This book does not introduce to algorithmic trading in a systematic 
fashion. Since the focus lies on applying Python in this fascinating 
field, readers not familiar with algorithmic trading should consult 
other, dedicated resources on the topic, some of which are cited in this
 chapter and the others that follow. But be aware of the fact that the 
algorithmic trading world in general is secretive and that almost 
everybody who is successful there is naturally reluctant to share his or
 her secrets in order to protect their sources of success, i.e. alpha.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_overview">1.7. Overview</h3>
<div class="paragraph">
<p>Here’s a quick overview of the topics presented in each chapter:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="#python_environment">Setting up the Python Environment</a></dt>
<dd>
<p>Lays the foundation for all subsequent chapters in that it shows how 
to set up a proper Python environment. This chapter mainly uses conda as
 a package and environment manager, and illustrates Python deployment 
via <a href="http://docker.com/" target="_blank">Docker</a> containers and in the cloud.</p>
</dd>
<dt class="hdlist1"><a href="#financial_data">Working with Financial Data</a></dt>
<dd>
<p>Financial times series data is central to every algorithmic trading 
project. This chapter shows you how to retrieve financial data from 
different public data and also proprietary data sources. It also 
demonstrates how to store financial time series data efficiently with 
Python.</p>
</dd>
<dt class="hdlist1"><a href="#vectorized_backtesting">Mastering Vectorized Backtesting</a></dt>
<dd>
<p>Vectorization is a powerful approach in numerical computation in 
general and for financial analytics in particular. This chapter 
introduces vectorization with <code>NumPy</code> and <code>pandas</code>, and applies that approach to backtesting SMA-based, momentum, and mean-reversion strategies.</p>
</dd>
<dt class="hdlist1"><a href="#machine_learning">Predicting Market Movements with Machine Learning</a></dt>
<dd>
<p>This chapter is dedicated to generating market predictions by the use
 of machine learning and deep learning approaches. By mainly relying on 
past return observations as features, approaches are presented for 
predicting tomorrow’s market direction by using such Python packages as <a href="http://scikit-learn.org/" target="_blank">scikit-learn</a> and <a href="https://www.tensorflow.org/api_docs/index.html" target="_blank">tensorflow</a>.</p>
</dd>
<dt class="hdlist1"><a href="#event_based_backtesting">Building Classes for Event-based Backtesting</a></dt>
<dd>
<p>While vectorized backtesting has advantages when it comes to 
conciseness of code and performance, it’s limited with regard to the 
representation of certain market features of trading strategies; on the 
other hand, event-based backtesting—​technically implemented by the use 
of object oriented programming—​allows for a rather granular and more 
realistic modeling of such features. This chapter presents and explains 
in detail a base class as well as two classes for the backtesting of 
long-only and long-short trading strategies.</p>
</dd>
<dt class="hdlist1"><a href="#realtime_sockets">Working with Real-Time Data and Sockets</a></dt>
<dd>
<p>Needing to cope with real-time or streaming data is a reality even 
for the ambitious individual algorithmic trader. The tool of choice is 
socket programming, for which this chapter introduces <a href="http://zeromq.org/" target="_blank">ZeroMQ</a> as a lightweight and scalable technology. The chapter also illustrates how to make use of <a href="http://plot.ly/" target="_blank">Plotly</a>
 to create nice looking, interactive, streaming plots. It also presents a
 wrapper class that simplifies the creation of such plots in cases where
 multiple data streams need to be visualized simultaneously (e.g. in a 
dashboard-like manner).</p>
</dd>
<dt class="hdlist1"><a href="#trading_oanda">CFD Trading with Oanda</a></dt>
<dd>
<p><a href="http://oanda.com/" target="_blank">Oanda</a> is a leading 
Contracts for Difference (CFD) trading platform offering a multitude of 
tradable instruments, e.g. based on foreign exchange pairs, stock 
indices, commodities or rates instruments (benchmark bonds). This 
chapter provides guidance on how to implement automated, algorithmic 
trading strategies with Oanda.</p>
</dd>
<dt class="hdlist1"><a href="#interactive_brokers">Stock Trading with Interactive Brokers</a></dt>
<dd>
<p><a href="http://interactivebrokers.com/" target="_blank">Interactive Brokers</a>
 is a leading online brokerage platform that focuses on stocks and 
options trading. The chapter deals with the Interactive Brokers API 
which is technologically based on the Trader Workstation application. It
 introduces a Python wrapper class that makes life quite convenient and 
efficient in this context.</p>
</dd>
<dt class="hdlist1"><a href="#trading_crypto">Trading Cryptocurrencies with Gemini</a></dt>
<dd>
<p>Cryptocurrencies and related technologies, like blockchains, have 
been a rather popular topic in technology as well as financial circles 
recently. The chapter covers <a href="http://gemini.com/" target="_blank">Gemini</a>
 as one of the modern platforms that allow for the automated trading of 
cryptocurrencies, like Bitcoin or Ether. The chapter presents Python 
wrapper classes to simplify most of the typical operations in 
algorithmic trading considerably.</p>
</dd>
<dt class="hdlist1"><a href="#automating_trading">Automating Trading Operations</a></dt>
<dd>
<p>This chapter deals with capital management, risk analysis and 
management as well as with typical tasks in the technical automation of 
algorithmic trading operations. It covers, for instance, the Kelly 
criterion for capital allocation and leverage in detail.</p>
</dd>
<dt class="hdlist1"><a href="#python_numpy_pandas">Appendix A: Python, NumPy, matplotlib, pandas</a></dt>
<dd>
<p>This appendix provides a concise introduction to the most important Python, <code>NumPy</code> and <code>pandas</code>
 topics in the context of the material presented in the main chapters. 
It represents a starting point from which one can add to one’s own 
Python knowledge over time.</p>
</dd>
</dl>
</div>
</div>
<div class="sect2">
<h3 id="_conclusions">1.8. Conclusions</h3>
<div class="paragraph">
<p>Python is already a force in finance in general, and is on its way to
 becoming a major force in algorithmic trading. There are a number of 
good reasons to use Python for algorithmic trading, among them the 
powerful ecosystem of packages that allow for efficient data analysis or
 the handling of modern APIs. There are also a number of good reasons to
 learn Python for algorithmic trading, chief among them the fact that 
some of the biggest buy- and sell-side institutions make heavy use of 
Python in their trading operations and constantly look for seasoned 
Python professionals.</p>
</div>
<div class="paragraph">
<p>This book focuses on applying Python to the different disciplines in 
algorithmic trading, like backtesting trading strategies or interacting 
with online trading platforms. It cannot replace a thorough introduction
 to Python itself nor to trading in general. However, it systematically 
combines these two fascinating worlds to provide a valuable source for 
the generation of alpha in today’s competitive financial and 
cryptocurrency markets.</p>
</div>
</div>
<div class="sect2">
<h3 id="_further_resources">1.9. Further Resources</h3>
<div class="paragraph">
<p>Research papers cited in this chapter:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Black, Fischer and Myron Scholes (1973): “The Pricing of Options and Corporate Liabilities.” <em>Journal of Political Economy</em>, Vol. 81, No. 3, 638-659.</p>
</li>
<li>
<p>Harvey, Campbell, Sandy Rattray, Andrew Sinclair and Otto Van Hemert 
(2016): “Man vs. Machine: Comparing Discretionary and Systematic Hedge 
Fund Performance.” White Paper, Man Group.</p>
</li>
<li>
<p>Dorn, Anne, Daniel Dorn, and Paul Sengmueller (2008): “Why do People Trade?” <em>Journal of Applied Finance</em>, Fall/Winter, 37-50.</p>
</li>
<li>
<p>Merton, Robert (1973): “Theory of Rational Option Pricing.” <em>Bell Journal of Economics and Management Science</em>, Vol. 4, 141-183.</p>
</li>
<li>
<p>Solomon, Lewis and Louise Corso (1991): “The Impact of Technology on 
the Trading of Securities: The Emerging Global Market and the 
Implications for Regulation.” <em>The John Marshall Law Review</em>, Vol. 24, No. 2, 299-338.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Books cited in this chapter:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Chan, Ernest (2013): <em>Algorithmic Trading</em>. John Wiley &amp; Sons, Hoboken et al.</p>
</li>
<li>
<p>Kissel, Robert (2013): <em>Algorithmic Trading and Portfolio Management</em>. Elsevier/Academic Press, Amsterdam et al.</p>
</li>
<li>
<p>Lewis, Michael (2015): <em>Flash Boys</em>. W.W. Norton &amp; Company, New York &amp; London.</p>
</li>
<li>
<p>Hilpisch, Yves (2014): <em>Python for Finance</em>. O’Reilly, Bejing et al.</p>
</li>
<li>
<p>Hilpisch, Yves (2015): <em>Derivatives Analytics with Python</em>. Wiley Finance.</p>
</li>
<li>
<p>McKinney, Wes (2017): <em>Python for Data Analysis</em>. 2nd ed., O’Reilly, Bejing et al.</p>
</li>
<li>
<p>Narang, Rishi (2013): <em>Inside the Black Box</em>. John Wiley &amp; Sons, Hoboken et al.</p>
</li>
<li>
<p>VanderPlas, Jake (2016): <em>Python Data Science Handbook</em>. O’Reilly, Bejing et al.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="python_environment">2. Setting up the Python Environment</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph align_me_right">
<p>In building a house, there is the problem of the selection of wood.</p>
</div>
<div class="paragraph">
<p>It is essential that the carpenter’s aim be to carry equipment that 
will cut well and, when he has time, to sharpen that equipment.</p>
</div>
</blockquote>
<div class="attribution">
— Miyamoto Musashi (The Book of Five Rings)
</div>
</div>
<div class="sect2">
<h3 id="_introduction_2">2.1. Introduction</h3>
<div class="paragraph">
<p>For someone new to Python, Python deployment might seem all but 
straightforward. The same holds true for the wealth of libraries and 
packages that can be installed optionally. First of all, there is not 
only <em>one</em> Python. Python comes in many different flavors, like 
CPython, Jython, IronPython or PyPy. Then there is still the divide 
between Python 2.7 and the 3.x world.<sup class="footnote">[<a id="_footnoteref_9" class="footnote" href="#_footnote_9" title="View footnote.">9</a>]</sup> In what follows, we will focus on <em>CPython</em>, the by far most popular version of the Python programming language, and here on <em>version 3.5</em>.</p>
</div>
<div class="paragraph">
<p>Even when focusing on CPython 3.5 (henceforth just “Python”), 
deployment is made difficult due to a number of additional reasons:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>the interpreter (a standard CPython installation) only comes with the so-called <em>standard library</em> (e.g. covering typical mathematical functions)</p>
</li>
<li>
<p>optional Python packages need to be installed separately — and there are hundreds of them</p>
</li>
<li>
<p>compiling/building such non-standard packages on your own can be 
tricky due to dependencies and operating system-specific requirements</p>
</li>
<li>
<p>taking care of such dependencies and of version consistency over time (i.e. maintenance) is often tedious and time consuming</p>
</li>
<li>
<p>updates and upgrades for certain packages might cause the need for re-compiling a multitude of other packages</p>
</li>
<li>
<p>changing or replacing one package might cause trouble in (many) other places</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Fortunately, there are tools and strategies available that help with 
the Python deployment issue. This chapter covers the following types of 
technologies that help with Python deployment:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>package manager</strong>: package managers like <a href="https://pypi.python.org/pypi/pip" target="_blank"><code>pip</code></a> or <a href="http://conda.pydata.org/docs/intro.html" target="_blank"><code>conda</code></a>
 help with the installing, updating and removing of Python packages; 
they also help with version consistency of different packages</p>
</li>
<li>
<p><strong>virtual environment manager</strong>: a virtual environment manager like <a href="https://pypi.python.org/pypi/virtualenv" target="_blank"><code>virtualenv</code></a> or <code>conda</code>
 allows to manage multiple Python installations in parallel (e.g. to 
have both a Python 2.7 and 3.5 install on a single machine or to test 
the most recent development version of a fancy Python package without 
risk)</p>
</li>
<li>
<p><strong>container</strong>: <a href="http://docker.com/" target="_blank">Docker</a>
 containers represent complete file systems containing all pieces of a 
system needed to run a certain software, like code, runtime or system 
tools; for example, you can run an Ubuntu 16.04 operating system with a 
Python 3.5 install and the respective Python codes in a Docker container
 hosted on a machine running Mac OS or Windows 10, for example</p>
</li>
<li>
<p><strong>cloud instance</strong>: deploying Python code for 
algorithmic trading generally requires high availability, security and 
also performance; these requirements can typically only be met by the 
use of professional compute and storage infrastructure that is nowadays 
available at attractive conditions in the form of fairly small to really
 large and powerful cloud instances; one benefit of a cloud instance, 
i.e. a virtual server, compared to a dedicated server rented longer 
term, is that users generally get charged only for the hours of actual 
usage; another advantage is that such cloud instances are available 
literally in a minute or two if needed which helps agile development and
 also with scalability</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The plan for this chapter is as follows. <a href="#conda_package">Conda as a Package Manager</a> introduces <code>conda</code> as a package manager for Python while <a href="#conda_environment">Conda as a Virtual Environment Manager</a> focuses on `conda’s capabilities as a virtual environment manager. <a href="#docker_container">Using Docker Containerization</a>
 gives a brief overview of Docker as a containerization technology and 
focuses on the building of a Ubuntu-based container with Python 3.5 
installation. <a href="#cloud_instance">Using Cloud Instances</a> shows 
how to deploy Python and Jupyter Notebook — as a powerful, browser-based
 tool suite — for Python development in the cloud.</p>
</div>
<div class="paragraph">
<p>The goal of this chapter is to have a proper Python installation with
 the most important scientific libraries available on a professional 
infrastructure. This combination then serves as the backbone for 
implementing and deploying the Python codes for all steps in an 
algorithmic trading project.</p>
</div>
</div>
<div class="sect2">
<h3 id="conda_package">2.2. Conda as a Package Manager</h3>
<div class="paragraph">
<p>Although <code>conda</code> can be installed stand alone, an efficient way of doing it is via Miniconda, a minimal Python distribution including <code>conda</code> as a package and virtual environment manager.</p>
</div>
<div class="sect3">
<h4 id="_installing_miniconda_3_5">2.2.1. Installing Miniconda 3.5</h4>
<div class="paragraph">
<p>You can download the different versions of Miniconda on the <a href="http://conda.pydata.org/miniconda.html" target="_blank">Miniconda page</a>.
 In what follows, the Python 3.5 64-bit version is assumed which is 
available for Linux, Windows and Mac OS. The main example in this 
sub-section is a session in a Ubuntu-based Docker container which 
downloads the Linux 64-bit installer via <code>wget</code> and then 
installs Miniconda. The code as shown should work without modification 
on any other Linux-based or Mac OS-based machine as well.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>root@26242b29fbcc:~# wget \
&gt; https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
--2016-11-02 09:14:23--  https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
Resolving repo.continuum.io (...)... 104.16.18.10, ..., 2400:cb00:2048:1::6810:120a, ...
Connecting to repo.continuum.io (repo.continuum.io)|104.16.18.10|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 33905474 (32M) [application/octet-stream]
Saving to: 'Miniconda3-latest-Linux-x86_64.sh'

Miniconda3-latest-Linux-x86_6 100%[==============&gt;]  32.33M  7.33MB/s    in 4.6s

2016-11-02 09:14:33 (7.05 MB/s) - 'Miniconda3-...-x86_64.sh' saved [33905474/33905474]

root@26242b29fbcc:~# bash Miniconda3-latest-Linux-x86_64.sh

Welcome to Miniconda3 4.2.11 (by Continuum Analytics, Inc.)

In order to continue the installation process, please review the license
agreement.
Please, press ENTER to continue
&gt;&gt;&gt;</pre>
</div>
</div>
<div class="paragraph">
<p>Simply pressing the <code>ENTER</code> key starts the installation process. After reviewing the license agreement, approve the terms by answering <code>yes</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>Do you approve the license terms? [yes|no]
&gt;&gt;&gt; yes

Miniconda3 will now be installed into this location:
/root/miniconda3

  - Press ENTER to confirm the location
  - Press CTRL-C to abort the installation
  - Or specify a different location below

[/root/miniconda3] &gt;&gt;&gt;
PREFIX=/root/miniconda3
installing: python-3.5.2-0 ...
installing: conda-env-2.6.0-0 ...
installing: openssl-1.0.2j-0 ...
installing: pycosat-0.6.1-py35_1 ...
installing: readline-6.2-2 ...
installing: requests-2.11.1-py35_0 ...
installing: ruamel_yaml-0.11.14-py35_0 ...
installing: sqlite-3.13.0-0 ...
installing: tk-8.5.18-0 ...
installing: xz-5.2.2-0 ...
installing: yaml-0.1.6-0 ...
installing: zlib-1.2.8-3 ...
installing: conda-4.2.11-py35_0 ...
installing: pycrypto-2.6.1-py35_4 ...
installing: pip-8.1.2-py35_0 ...
installing: wheel-0.29.0-py35_0 ...
installing: setuptools-27.2.0-py35_0 ...
Python 3.5.2 :: Continuum Analytics, Inc.
creating default environment...
installation finished.</pre>
</div>
</div>
<div class="paragraph">
<p>After you have agreed to the licensing terms and have confirmed the 
install location you should allow Miniconda to prepend the new Miniconda
 install location to the <code>PATH</code> environment variable by answering <code>yes</code> once again.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>Do you wish the installer to prepend the Miniconda3 install location
to PATH in your /root/.bashrc ? [yes|no]
[no] &gt;&gt;&gt; yes</pre>
</div>
</div>
<div class="paragraph">
<p>After this rather simple installation procedure, there are now both a basic Python install as well as <code>conda</code> available. The basic Python install comes already with some nice batteries included like the <a href="https://sqlite.org/" target="_blank"><code>SQLite3</code></a> database engine. You might try out whether you can start Python in a <em>new</em> shell instance.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>root@26242b29fbcc:~# python
Python 3.5.2 |Continuum Analytics, Inc.| (default, Jul  2 2016, 17:53:06)
[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print('Hello Algo Trading World.')
Hello Algo Trading World.
&gt;&gt;&gt; exit()
root@26242b29fbcc:~#</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_basic_operations_with_conda">2.2.2. Basic Operations with Conda</h4>
<div class="paragraph">
<p><code>Conda</code> can be used to efficiently handle, among others, 
the installing, updating and removing of Python packages. The following 
list provides an overview of the major functions.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">installing Python x.x</dt>
<dd>
<p><code>conda install python=x.x</code></p>
</dd>
<dt class="hdlist1">updating Python</dt>
<dd>
<p><code>conda update python</code></p>
</dd>
<dt class="hdlist1">installing a package</dt>
<dd>
<p><code>conda install $PACKAGE_NAME</code></p>
</dd>
<dt class="hdlist1">updating a package</dt>
<dd>
<p><code>conda update $PACKAGE_NAME</code></p>
</dd>
<dt class="hdlist1">removing a package</dt>
<dd>
<p><code>conda remove $PACKAGE_NAME</code></p>
</dd>
<dt class="hdlist1">updating conda itself</dt>
<dd>
<p><code>conda update conda</code></p>
</dd>
<dt class="hdlist1">searching for packages</dt>
<dd>
<p><code>conda search $SEARCH_TERM</code></p>
</dd>
<dt class="hdlist1">listing installed packages</dt>
<dd>
<p><code>conda list</code></p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>Given these capabilities, installing, for example, <code>NumPy</code> 
— as one of the most important libraries of the so-called scientific 
stack — is a single command only. When the installation takes place on a
 machine with Intel processor, the procedure automatically installs the <a href="https://docs.continuum.io/mkl-optimizations/" target="_blank">Intel Math Kernel Library <code>mkl</code></a> which speeds up numerical operations not only for <code>NumPy</code> on Intel machines but also for a few other scientific Python packages.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>root@26242b29fbcc:~# conda install numpy
Fetching package metadata .......
Solving package specifications: ..........

Package plan for installation in environment /root/miniconda3:

The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    mkl-11.3.3                 |                0       122.1 MB
    numpy-1.11.2               |           py35_0         6.1 MB
    ------------------------------------------------------------
                                           Total:       128.2 MB

The following NEW packages will be INSTALLED:

    mkl:   11.3.3-0
    numpy: 1.11.2-py35_0

Proceed ([y]/n)? y

Fetching packages ...
mkl-11.3.3-0.t 100% |######################| Time: 0:00:17   7.36 MB/s
numpy-1.11.2-p 100% |######################| Time: 0:00:01   6.14 MB/s
Extracting packages ...
[      COMPLETE      ]|########################################| 100%
Linking packages ...
[      COMPLETE      ]|########################################| 100%
root@26242b29fbcc:~#</pre>
</div>
</div>
<div class="paragraph">
<p>Multiple packages can also be installed at once. The <code>-y</code> flag indicates that all (potential) questions shall be answered with <code>yes</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>conda install -y ipython matplotlib pandas pytables scipy seaborn</pre>
</div>
</div>
<div class="paragraph">
<p>After the resulting installation procedure, some of the most 
important libraries for financial analytics are available in addition to
 the standard ones.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="http://ipython.org/" target="_blank">IPython</a></dt>
<dd>
<p>an improved interactive Python shell</p>
</dd>
<dt class="hdlist1"><a href="http://matplotlib.org/" target="_blank">matplotlib</a></dt>
<dd>
<p>the standard plotting library in Python</p>
</dd>
<dt class="hdlist1"><a href="http://numpy.org/" target="_blank">NumPy</a></dt>
<dd>
<p>efficient handling of numerical arrays</p>
</dd>
<dt class="hdlist1"><a href="http://pandas.pydata.org/" target="_blank">pandas</a></dt>
<dd>
<p>management of tabular data, like financial time series data</p>
</dd>
<dt class="hdlist1"><a href="http://pytables.org/" target="_blank">PyTables</a></dt>
<dd>
<p>a Python wrapper for the <a href="http://hdfgroup.org/" target="_blank">HDF5</a> library</p>
</dd>
<dt class="hdlist1"><a href="http://scipy.org/" target="_blank">SciPy</a></dt>
<dd>
<p>a collection of scientific classes and functions (installed as a dependency)</p>
</dd>
<dt class="hdlist1"><a href="http://seaborn.pydata.org/" target="_blank">Seaborn</a></dt>
<dd>
<p>a plotting library adding statistical capabilities and nice plotting defaults</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>This provides a basic tool set for data analysis in general and financial analytics in particular. The next example uses <code>IPython</code> and draws a set of pseudo-random numbers with <code>NumPy</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">root<span class="decorator">@26242b29fbcc</span>:~<span class="comment"># ipython</span>
Python <span class="float">3.5</span><span class="float">.2</span> |Continuum Analytics, Inc.| (default, Jul  <span class="integer">2</span> <span class="integer">2016</span>, <span class="integer">17</span>:<span class="integer">53</span>:<span class="octal">06</span>)
Type <span class="string"><span class="delimiter">"</span><span class="content">copyright</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">credits</span><span class="delimiter">"</span></span> <span class="keyword">or</span> <span class="string"><span class="delimiter">"</span><span class="content">license</span><span class="delimiter">"</span></span> <span class="keyword">for</span> more information.

IPython <span class="float">5.1</span><span class="float">.0</span> -- An enhanced Interactive Python.
<span class="error">?</span>         -&gt; Introduction <span class="keyword">and</span> overview of IPython<span class="string"><span class="delimiter">'</span><span class="content">s features.</span></span>
%quickref -&gt; Quick reference.
help      -&gt; Python<span class="string"><span class="delimiter">'</span><span class="content">s own help system.</span></span>
<span class="predefined">object</span><span class="error">?</span>   -&gt; Details about <span class="string"><span class="delimiter">'</span><span class="content">object</span><span class="delimiter">'</span></span>, use <span class="string"><span class="delimiter">'</span><span class="content">object??</span><span class="delimiter">'</span></span> <span class="keyword">for</span> extra details.

In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

In [<span class="integer">2</span>]: np.random.standard_normal((<span class="integer">5</span>, <span class="integer">4</span>))
Out[<span class="integer">2</span>]:
array([[-<span class="float">0.23870271</span>,  <span class="float">0.93910351</span>,  <span class="float">1.29826846</span>,  <span class="float">0.52727454</span>],
       [-<span class="float">1.5408393</span> ,  <span class="float">0.36118107</span>, -<span class="float">0.87924875</span>,  <span class="float">0.01721538</span>],
       [ <span class="float">0.50065827</span>, -<span class="float">1.7125698</span> , -<span class="float">0.75627403</span>,  <span class="float">1.60711452</span>],
       [-<span class="float">1.26601584</span>, -<span class="float">0.68042414</span>, -<span class="float">0.70642272</span>,  <span class="float">0.43111444</span>],
       [-<span class="float">0.48539608</span>,  <span class="float">1.09471735</span>,  <span class="float">0.45173937</span>, -<span class="float">0.31589134</span>]])

In [<span class="integer">3</span>]: <span class="predefined">exit</span>
root<span class="decorator">@26242b29fbcc</span>:~<span class="comment">#</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Executing <code>conda list</code> verifies which packages are installed.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>root@26242b29fbcc:~# conda list
# packages in environment at /root/miniconda3:
#
conda                     4.2.11                   py35_0
conda-env                 2.6.0                         0
...
hdf5                      1.8.17                        1
icu                       54.1                          0
ipython                   5.1.0                    py35_0
ipython_genutils          0.1.0                    py35_0
...
matplotlib                1.5.3               np111py35_1
mkl                       11.3.3                        0
numexpr                   2.6.1               np111py35_1
numpy                     1.11.2                   py35_0
openssl                   1.0.2j                        0
pandas                    0.19.0              np111py35_0
...
pyqt                      5.6.0                    py35_0
pytables                  3.3.0               np111py35_0
python                    3.5.2                         0
...
scipy                     0.18.1              np111py35_0
seaborn                   0.7.1                    py35_0
...
yaml                      0.1.6                         0
zlib                      1.2.8                         3
root@26242b29fbcc:~#</pre>
</div>
</div>
<div class="paragraph">
<p>In case a package is not needed anymore, it is efficiently removed with <code>conda remove</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>root@26242b29fbcc:~# conda remove seaborn
Fetching package metadata .......
Solving package specifications: ..........

Package plan for package removal in environment /root/miniconda3:

The following packages will be REMOVED:

    seaborn: 0.7.1-py35_0

Proceed ([y]/n)? y

Unlinking packages ...
[      COMPLETE      ]|########################################| 100%
root@26242b29fbcc:~#</pre>
</div>
</div>
<div class="paragraph">
<p><code>conda</code> as a package manager is already quite useful. 
However, its full power only becomes evident when adding virtual 
environment management to the mix.</p>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p><code>conda</code> as a package manager makes installing, updating 
and removing of Python packages a pleasant experience. There is no need 
to take care of building and compiling packages on your own 
anymore — which can be tricky sometimes given the list of dependencies a
 package specifies and given the specifics to be considered on different
 operating systems.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="conda_environment">2.3. Conda as a Virtual Environment Manager</h3>
<div class="paragraph">
<p>Having installed Miniconda with <code>conda</code> included provides a
 default Python installation depending on what version of Miniconda has 
been chosen. The virtual environment management capabilities of <code>conda</code>
 allow, for example, to add to a Python 3.5 default installation a 
completely separated installation of Python 2.7.11. To this end, <code>conda</code> offers the following functionality.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">creating a virtual environment</dt>
<dd>
<p><code>conda create --name $ENVIRONMENT_NAME</code></p>
</dd>
<dt class="hdlist1">activating an environment</dt>
<dd>
<p><code>source activate $ENVIRONMENT_NAME</code></p>
</dd>
<dt class="hdlist1">deactivating an environment</dt>
<dd>
<p><code>source deactivate $ENVIRONMENT_NAME</code></p>
</dd>
<dt class="hdlist1">removing an environment</dt>
<dd>
<p><code>conda-env remove --name $ENVIRONMENT_NAME</code></p>
</dd>
<dt class="hdlist1">export to an environment file</dt>
<dd>
<p><code>conda env export &gt; $FILE_NAME</code></p>
</dd>
<dt class="hdlist1">creating an environment from file</dt>
<dd>
<p><code>conda env create -f $FILE_NAME</code></p>
</dd>
<dt class="hdlist1">listing all environments</dt>
<dd>
<p><code>conda info --envs</code></p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>As a simple illustration, the example code that follows creates an environment called <code>py27</code>, installs <code>IPython</code> and <code>NumPy</code> and, like above, generates a set of pseudo-random numbers.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>root@26242b29fbcc:~# conda create --name py27 python=2.7
The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    python-2.7.12              |                1        12.1 MB
    setuptools-27.2.0          |           py27_0         521 KB
    wheel-0.29.0               |           py27_0          81 KB
    pip-8.1.2                  |           py27_0         1.5 MB
    ------------------------------------------------------------
                                           Total:        14.2 MB

The following NEW packages will be INSTALLED:

    openssl:    1.0.2j-0
    pip:        8.1.2-py27_0
    python:     2.7.12-1
    readline:   6.2-2
    setuptools: 27.2.0-py27_0
    sqlite:     3.13.0-0
    tk:         8.5.18-0
    wheel:      0.29.0-py27_0
    zlib:       1.2.8-3

Proceed ([y]/n)? y

Fetching packages ...
...
Extracting packages ...
...
#
# To activate this environment, use:
# &gt; source activate py27
#
# To deactivate this environment, use:
# &gt; source deactivate py27
#

root@26242b29fbcc:~#</pre>
</div>
</div>
<div class="paragraph">
<p>Notice how the prompt changes to include <code>(py27)</code> after the activation of the environment.<sup class="footnote">[<a id="_footnoteref_10" class="footnote" href="#_footnote_10" title="View footnote.">10</a>]</sup></p>
</div>
<div class="listingblock">
<div class="content">
<pre>root@26242b29fbcc:~# source activate py27
(py27) root@26242b29fbcc:~# conda install -y ipython numpy
Fetching package metadata .......
Solving package specifications: ..........

Package plan for installation in environment /root/miniconda3/envs/py27:

The following packages will be downloaded:
...
The following NEW packages will be INSTALLED:
...
Fetching packages ...
...
Extracting packages ...
...
Linking packages ...
...
(py27) root@26242b29fbcc:~#</pre>
</div>
</div>
<div class="paragraph">
<p>Finally, the random number generation with <code>IPython</code> and <code>NumPy</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>(py27) root@26242b29fbcc:~# ipython
Python 2.7.12 |Continuum Analytics, Inc.| (default, Jul  2 2016, 17:42:40)
Type "copyright", "credits" or "license" for more information.

IPython 5.1.0 -- An enhanced Interactive Python.
?         -&gt; Introduction and overview of IPython's features.
%quickref -&gt; Quick reference.
help      -&gt; Python's own help system.
object?   -&gt; Details about 'object', use 'object??' for extra details.

In [1]: import numpy as np

In [2]: np.random.standard_normal((4, 5))
Out[2]:
array([[ 0.05213592, -1.00901448, -0.77423222, -2.14591996,  1.17761282],
       [ 1.16636518,  0.8471924 , -0.24951131, -0.02648881,  0.93830385],
       [ 1.1880593 , -0.99955852,  0.84710853,  2.26702452,  1.30394014],
       [ 0.61877232,  0.35494088,  0.01918428,  1.54873763,  2.55819921]])

In [3]: exit
(py27) root@26242b29fbcc:~#</pre>
</div>
</div>
<div class="paragraph">
<p>As this example demonstrates, <code>conda</code> as a virtual 
environment manager allows to install different Python versions 
alongside each other. It also allows to install different versions of 
certain packages. The default Python install is not influenced by such a
 procedure, nor are other environments which might exist on the same 
machine. All available environments can be shown via <code>conda info --envs</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>(py27) root@26242b29fbcc:~# conda info --envs
# conda environments:
#
py27                  *  /root/miniconda3/envs/py27
root                     /root/miniconda3

(py27) root@26242b29fbcc:~#</pre>
</div>
</div>
<div class="paragraph">
<p>Sometimes it is necessary to share environment information with 
others or to use environment information on multiple machines, for 
instance. To this end, one can export the installed packages list to a 
file with <code>conda env export</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>(py27) root@26242b29fbcc:~# conda env export &gt; py27env.yml
(py27) root@26242b29fbcc:~# cat py27env.yml
name: py27
channels: !!python/tuple
- defaults
dependencies:
- backports=1.0=py27_0
- decorator=4.0.10=py27_0
- enum34=1.1.6=py27_0
- get_terminal_size=1.0.0=py27_0
- ipython=5.1.0=py27_0
- ipython_genutils=0.1.0=py27_0
- mkl=11.3.3=0
- numpy=1.11.2=py27_0
...
- wheel=0.29.0=py27_0
- zlib=1.2.8=3
- pip:
  - backports.shutil-get-terminal-size==1.0.0
  - ipython-genutils==0.1.0
  - prompt-toolkit==1.0.8
prefix: /root/miniconda3/envs/py27

(py27) root@26242b29fbcc:~#</pre>
</div>
</div>
<div class="paragraph">
<p>Often, virtual environments, which are technically not that much more
 than a certain (sub-)folder structure, are created to do some quick 
tests.<sup class="footnote">[<a id="_footnoteref_11" class="footnote" href="#_footnote_11" title="View footnote.">11</a>]</sup> In such a case, an environment is easily removed after deactivation via <code>conda env remove</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>(py27) root@26242b29fbcc:~# source deactivate
root@26242b29fbcc:~# conda env remove --name py27

Package plan for package removal in environment /root/miniconda3/envs/py27:

The following packages will be REMOVED:

    backports:         1.0-py27_0
    decorator:         4.0.10-py27_0
    enum34:            1.1.6-py27_0
    get_terminal_size: 1.0.0-py27_0
    ipython:           5.1.0-py27_0
    ...
    wcwidth:           0.1.7-py27_0
    wheel:             0.29.0-py27_0
    zlib:              1.2.8-3

Proceed ([y]/n)? y

Unlinking packages ...
[      COMPLETE      ]|#################################################| 100%
root@26242b29fbcc:~#</pre>
</div>
</div>
<div class="paragraph">
<p>This concludes the overview of <code>conda</code> as a virtual environment manager.</p>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p><code>conda</code> does not only help with managing packages, it is 
also a virtual environment manager for Python. It simplifies the 
creation of different Python environments, allowing to have multiple 
versions of Python and optional packages available on the same machine 
without them influencing each other in any way. <code>conda</code> also allows to export environment information to easily replicate it on multiple machines or to share it with others.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="docker_container">2.4. Using Docker Containerization</h3>
<div class="paragraph">
<p>Docker containers have taken over the IT world by storm. Although the
 technology is still quite young, it has established itself as one of 
the benchmarks for the efficient development and deployment of almost 
any kind of software application.</p>
</div>
<div class="paragraph">
<p>For our purposes it suffices to think of a Docker container as a 
separated ("containerized") file system that includes an operating 
system (e.g. Ubuntu 16.04. for server), a (Python) runtime, additional 
system and development tools as well as further (Python) libraries and 
packages as needed. Such a Docker container might run on a local machine
 with Windows 10 or on a cloud instance with a Linux operating system, 
for instance.</p>
</div>
<div class="paragraph">
<p>This section does not allow to go into the exciting details of Docker
 containers. It is rather a concise illustration of what the Docker 
technology can do in the context of Python deployment.<sup class="footnote">[<a id="_footnoteref_12" class="footnote" href="#_footnote_12" title="View footnote.">12</a>]</sup></p>
</div>
<div class="sect3">
<h4 id="_docker_images_and_containers">2.4.1. Docker Images and Containers</h4>
<div class="paragraph">
<p>However, before moving on to the illustration, two fundamental terms 
need to be distinguished when talking about Docker. The first is a <em>Docker image</em> which can be compared to a Python class. The second is a <em>Docker container</em> which can be compared to an instance of the respective Python class.</p>
</div>
<div class="paragraph">
<p>On a more technical level, you find the following definition for a <em>Docker image</em> in the <a href="https://docs.docker.com/engine/reference/glossary/" target="_blank">Docker glossary</a>:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Docker images are the basis of containers. An Image is an ordered 
collection of root filesystem changes and the corresponding execution 
parameters for use within a container runtime. An image typically 
contains a union of layered filesystems stacked on top of each other. An
 image does not have state and it never changes.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Similarly, you find the following definition for a <em>Docker container</em> in the <a href="https://docs.docker.com/engine/reference/glossary/" target="_blank">Docker glossary</a> which makes the analogy to Python classes and instances of such classes transparent:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>A container is a runtime instance of a Docker image. A Docker 
container consists of: a Docker image, an execution environment and a 
standard set of instructions.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Depending on the operating system, the installation of Docker is 
somewhat different. That is why this section does not go into the 
respective details. Detailed information is found on the <a href="https://docs.docker.com/engine/installation/" target="_blank">Install Docker Engine page</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_building_an_ubuntu_python_docker_image">2.4.2. Building an Ubuntu + Python Docker Image</h4>
<div class="paragraph">
<p>This sub-section illustrates the building of a Docker image based on 
the latest version of Ubuntu that includes Miniconda as well as a few 
important Python packages. In addition, we also do some Linux 
housekeeping by updating the Linux packages index and installing certain
 system tools. To this end, two scripts are needed. One is a <code>bash</code> script doing all the work on the Linux level.<sup class="footnote">[<a id="_footnoteref_13" class="footnote" href="#_footnote_13" title="View footnote.">13</a>]</sup> The other is a so-called <code>Dockerfile</code> which controls the building procedure for the image itself.</p>
</div>
<div class="paragraph">
<p>The <code>bash</code> script in <a href="#docker_install">Script installing Python and optional packages</a>
 which does the installing consists of three major parts. The first part
 handles the Linux housekeeping. The second part installs Miniconda 
while the third part installs optional Python packages. There are also 
more detailed comments inline.</p>
</div>
<div id="docker_install" class="exampleblock">
<div class="title">Example 1. Script installing Python and optional packages</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="bash">#!/bin/bash
#
# Script to Install
# Linux System Tools and
# Basic Python Components
#
# Python for Algorithmic Trading
# (c) Dr. Yves J. Hilpisch
# The Python Quants GmbH
#
# GENERAL LINUX
apt-get update  # updates the package index cache
apt-get upgrade -y  # updates packages
apt-get install -y git screen htop wget nano bzip2 # installs system tools
apt-get upgrade -y bash  # upgrades bash if necessary
apt-get clean  # cleans up the package index cache

# INSTALL MINICONDA
# downloads Miniconda
wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O Miniconda.sh
bash Miniconda.sh -b  # installs it
rm -rf Miniconda.sh  # removes the installer
export PATH="/root/miniconda3/bin:$PATH"  # prepends the new path

# INSTALL PYTHON LIBRARIES
conda install -y pandas  # installs pandas
conda install -y pandas-datareader  # installs pandas_datareader
conda install -y ipython  # installs IPython shell</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The <code>Dockerfile</code> in <a href="#docker_file">Dockerfile to build the image</a> uses the <code>bash</code> script in <a href="#docker_install">Script installing Python and optional packages</a> to build a new Docker image. It also has its major parts commented inline.</p>
</div>
<div id="docker_file" class="exampleblock">
<div class="title">Example 2. Dockerfile to build the image</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code>#
# Building a Docker Image with
# the Latest Ubuntu Version and
# Basic Python Install
#
# Python for Algorithmic Trading
# (c) Dr. Yves J. Hilpisch
# The Python Quants GmbH
#

# latest Ubuntu version
FROM ubuntu:latest

# information about maintainer
MAINTAINER yves

# add the bash script
ADD install.sh /
# change rights for the script
RUN chmod u+x /install.sh
# run the bash script
RUN /install.sh
# prepend the new path
ENV PATH /root/miniconda3/bin:$PATH

# execute IPython when container is run
CMD ["ipython"]</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>If these two files are in a single folder and Docker is installed, 
then the building of the new Docker image is straightforward. Here, the 
tag <code>ubuntupython</code> is used for the image. This tag is needed to reference the image, for example, when running a container based on it.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>macbookpro:~/Docker$ docker build -t ubuntupython .
...
Step 7 : CMD ipython
 ---&gt; Running in 98327ea2b43b
 ---&gt; da4027e63775
Removing intermediate container 98327ea2b43b
Successfully built da4027e63775
macbookpro:~/Docker$</pre>
</div>
</div>
<div class="paragraph">
<p>Existing Docker images can be listed via <code>docker images</code>. The new image should be on top of the list.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>macbookpro:~/Docker$ docker images
REPOSITORY     TAG       IMAGE ID        CREATED         SIZE
ubuntupython   latest    da4027e63775    6 minutes ago   1.142 GB
&lt;none&gt;         &lt;none&gt;    82eaec4d87f4    30 minutes ago  127.2 MB
ubuntu         latest    f753707788c5    2 weeks ago     127.2 MB
ubuntu         trusty    1e0c3dd64ccd    2 weeks ago     187.9 MB
macbookpro:~/Docker$</pre>
</div>
</div>
<div class="paragraph">
<p>Having built the <code>ubuntupython</code> image successfully allows to run a respective Docker container with <code>docker run</code>. The parameter combination <code>-ti</code> is needed for interactive processes running within a Docker container, like a shell process (see the <a href="https://docs.docker.com/engine/reference/run/" target="_blank">Docker Run Reference page</a>).</p>
</div>
<div class="listingblock">
<div class="content">
<pre>macbookpro:~/Docker$ docker run -ti ubuntupython

Python 3.5.2 |Continuum Analytics, Inc.| (default, Jul  2 2016, 17:53:06)
Type "copyright", "credits" or "license" for more information.

IPython 5.1.0 -- An enhanced Interactive Python.
?         -&gt; Introduction and overview of IPython's features.
%quickref -&gt; Quick reference.
help      -&gt; Python's own help system.
object?   -&gt; Details about 'object', use 'object??' for extra details.

In [1]: from pandas_datareader import data as web

In [2]: AAPL = web.DataReader('AAPL', data_source='google')

In [3]: AAPL.tail()
Out[3]:
                  Open        High         Low       Close    Volume  \
Date
2016-10-26  114.309998  115.699997  113.309998  115.589996  66134200
2016-10-27  115.389999  115.860001  114.099998  114.480003  34562000
2016-10-28  113.870003  115.209999  113.449997  113.720001  37861700
2016-10-31  113.650002  114.230003  113.199997  113.540001  26419400
2016-11-01  113.459999  113.769997  110.529999  111.489998  43353600

             Adj Close
Date
2016-10-26  115.589996
2016-10-27  114.480003
2016-10-28  113.720001
2016-10-31  113.540001
2016-11-01  111.489998

In [5]:</pre>
</div>
</div>
<div class="paragraph">
<p>Exiting <code>IPython</code> will exit the container as well since it is <em>the only</em> application run within the container. However, you can detach from a container via</p>
</div>
<div class="listingblock">
<div class="content">
<pre>Ctrl+p --&gt; Ctrl+q</pre>
</div>
</div>
<div class="paragraph">
<p>After having detached from the container, the <code>docker ps</code> command shows the running container (and maybe other currently running containers):</p>
</div>
<div class="listingblock">
<div class="content">
<pre>macbookpro:~/Dropbox/Platform/algobox/algobook/book/code/Docker$ docker ps
CONTAINER ID  IMAGE         COMMAND     CREATED       STATUS       NAMES
d9efb879b0db  ubuntupython  "ipython"   9 minutes ago Up 9 minutes jolly_hodgkin
26242b29fbcc  ubuntu:latest "/bin/bash" target="_blank" 3 hours ago   Up 3 hours   berserk_aryabhata
macbookpro:~/Docker$</pre>
</div>
</div>
<div class="paragraph">
<p>Attaching to the Docker container is accomplished by <code>docker attach $CONTAINER_ID</code> (notice that a few letters of the <code>CONTAINER ID</code> are enough):</p>
</div>
<div class="listingblock">
<div class="content">
<pre>macbookpro:~/Docker$ docker attach d93fb
In [5]: AAPL.info()
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 1721 entries, 2010-01-04 to 2016-11-01
Data columns (total 6 columns):
Open         1721 non-null float64
High         1721 non-null float64
Low          1721 non-null float64
Close        1721 non-null float64
Volume       1721 non-null int64
Adj Close    1721 non-null float64
dtypes: float64(5), int64(1)
memory usage: 94.1 KB

In [6]: exit</pre>
</div>
</div>
<div class="paragraph">
<p>The <code>exit</code> command terminates <code>IPython</code> and therewith the Docker container as well. It can be removed by <code>docker rm</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>macbookpro:~/Docker$ docker rm d9efb
d9efb
macbookpro:~/Docker$</pre>
</div>
</div>
<div class="paragraph">
<p>Similarly, the Docker image <code>ubuntupython</code> can be removed via <code>docker rmi</code>
 if not needed any longer. While containers are relatively light weight,
 single images might consume quite a bit of storage. In the case of the <code>ubuntupython</code> image, the size is above 1 GB. That is why you might want to regularly clean up the list of Docker images.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>macbookpro:~/Docker$ docker rmi da4027</pre>
</div>
</div>
<div class="paragraph">
<p>Of course, there is much more to say about Docker containers and 
their benefits in certain application scenarios. For the purposes of 
this book, they provide a modern approach to deploy Python, to do Python
 development in a completely separated (containerized) environment and 
to ship codes for algorithmic trading.</p>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>If you are not yet using Docker containers, you should consider start
 using them. They provide a number of benefits when it comes to Python 
deployment and development efforts, not only when working locally but in
 particular when working with remote cloud instances and servers 
deploying code for algorithmic trading.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="cloud_instance">2.5. Using Cloud Instances</h3>
<div class="paragraph">
<p>This section shows how to set up a full-fledged Python infrastructure on a <a href="http://digitalocean.com/" target="_blank">DigitalOcean</a> cloud instance. There are many other cloud providers out there, among them <a href="http://aws.amazon.com/" target="_blank">Amazon Web Services</a>
 (AWS) as the leading provider. However, DigitalOcean is well known for 
its simplicity and also its relatively low rates for their smaller cloud
 instances, which they call <em>droplet</em>. The smallest droplet, 
which is generally sufficient for exploration and development purposes, 
only costs 5 USD per month or 0.007 USD per hour. Users get only charged
 by the hour so that you can easily spin up a droplet for 2 hours, 
destroy it afterwards and get charged just 0.014 USD. If you do not have
 an account yet, register for one on this <a href="https://m.do.co/c/fbe512dd3dac" target="_blank">sign-up page</a> that secures you a starting balance of 10 USD.</p>
</div>
<div class="paragraph">
<p>The goal of this section is to set up a droplet on DigitalOcean that 
has a Python 3.5 installation plus typically needed packages (e.g. <code>NumPy</code>, <code>pandas</code>) in combination with a password-protected and Secure Sockets Layer (SSL)-encrypted <a href="http://jupyter.org/" target="_blank">Jupyter Notebook</a>
 server installation. As a web-based tool suite, Jupyter Notebook 
provides three major tools that can be used via a regular browser:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Jupyter Notebook</strong>: this is the by now really popular 
interactive development environment that features a selection of 
different language kernels like for Python, R and Julia</p>
</li>
<li>
<p><strong>terminal</strong>: a system shell implementation accessible 
via the browser which allows for all typical system administration tasks
 but also for usage of such helpful tools like <a href="http://www.vim.org/download.ph" target="_blank"><code>Vim</code></a> or <a href="https://git-scm.com/" target="_blank"><code>git</code></a></p>
</li>
<li>
<p><strong>editor</strong>: the third major tool is a browser-based file
 editor with syntax highlighting for many different programming 
languages and file types as well as typical editing capabilities</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Having Jupyter Notebook installed on a droplet allows to do Python 
development and deployment via the browser, circumventing the need to 
log in to the cloud instance via Secure Shell (SSH) access.</p>
</div>
<div class="paragraph">
<p>To accomplish the goal of this section, a number of files is needed.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>server set-up script</strong>: this script orchestrates all 
steps necessary, like for instance copying other files to the droplet 
and running them on the droplet</p>
</li>
<li>
<p><strong>Python and Jupyter installation script</strong>: this installs Python, additional packages, Jupyter Notebook and starts the Jupyter Notebook server</p>
</li>
<li>
<p><strong>Jupyter Notebook configuration file</strong>: this file is for the configuration of the Jupyter Notebook server, e.g. with respect to password protection</p>
</li>
<li>
<p><strong>RSA public and private key files</strong>: these two files are needed for the SSL encryption of the Jupyter Notebook server</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In what follows, we work backwards through this list of files.</p>
</div>
<div class="sect3">
<h4 id="_rsa_public_and_private_keys">2.5.1. RSA Public and Private Keys</h4>
<div class="paragraph">
<p>In order to accomplish a secure connection to the Jupyter Notebook 
server via an arbitrary browser, a SSL certificate consisting of RSA 
public and private keys (see <a href="https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29" target="_blank">RSA Wikipedia page</a>)
 is needed. In general, one would expect that such a certificate comes 
from a so-called Certificate Authority (CA). For the purposes of this 
book, however, a self-generated certificate is “good enough”.<sup class="footnote">[<a id="_footnoteref_14" class="footnote" href="#_footnote_14" title="View footnote.">14</a>]</sup> A popular tool to generate RSA key pairs is <a href="http://openssl.org/" target="_blank"><code>OpenSSL</code></a>. The brief interactive session to follow generates a certificate appropriate for use with a Jupyter Notebook server.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>macbookpro:~/cloud$ openssl req -x509 -nodes -days 365 -newkey \
&gt; rsa:1024 -out cert.pem -keyout cert.key
Generating a 1024 bit RSA private key
..++++++
.......++++++
writing new private key to 'cert.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:DE
State or Province Name (full name) [Some-State]:
Locality Name (eg, city) []:Voelklingen
Organization Name (eg, company) [Internet Widgits Pty Ltd]:TPQ GmbH
Organizational Unit Name (eg, section) []:Algo Trading
Common Name (e.g. server FQDN or YOUR name) []:Jupyter
Email Address []:team@tpq.io
macbookpro:~/cloud$ ls
cert.key    cert.pem
macbookpro:~/cloud$</pre>
</div>
</div>
<div class="paragraph">
<p>The two files <code>cert.key</code> and <code>cert.pem</code> need to
 be copied to the droplet and need to be referenced by the Jupyter 
Notebook configuration file. This file is presented next.</p>
</div>
</div>
<div class="sect3">
<h4 id="_jupyter_notebook_configuration_file">2.5.2. Jupyter Notebook Configuration File</h4>
<div class="paragraph">
<p>A public Jupyter Notebook server can be deployed securely as explained on the <a href="http://jupyter-notebook.readthedocs.io/en/latest/public_server.html" target="_blank">Running a Notebook Server page</a>.
 Among others, Jupyter Notebook shall be password protected. To this 
end, there is a password hash code-generating function called <code>passwd</code> available in <code>notebook.auth</code> sub-package. The code below generates a password hash code with <code>jupyter</code> being the password itself.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>(py3) macbookpro:~/cloud$ ipython
Python 3.5.2 |Continuum Analytics, Inc.| (default, Jul  2 2016, 17:52:12)
Type "copyright", "credits" or "license" for more information.

IPython 5.1.0 -- An enhanced Interactive Python.
?         -&gt; Introduction and overview of IPython's features.
%quickref -&gt; Quick reference.
help      -&gt; Python's own help system.
object?   -&gt; Details about 'object', use 'object??' for extra details.

In [1]: from notebook.auth import passwd

In [2]: passwd('jupyter')
Out[2]: 'sha1:1f0543f2373b:76c2cd00ef8effd0ce61100fbc651e1df8447593'

In [3]: exit</pre>
</div>
</div>
<div class="paragraph">
<p>This hash code needs to be placed in the Jupyter Notebook configuration file as presented in <a href="#jupyter_config_file">Jupyter Notebook configuration file</a>. The code  assumes that the RSA key files have been copied on the droplet to the <code>/root/.jupyter/</code> folder.</p>
</div>
<div id="jupyter_config_file" class="exampleblock">
<div class="title">Example 3. Jupyter Notebook configuration file</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Jupyter Notebook Configuration File</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="comment"># SSL ENCRYPTION</span>
<span class="comment"># replace the following file names (and files used) by your choice/files</span>
c.NotebookApp.certfile = <span class="string"><span class="modifier">u</span><span class="delimiter">'</span><span class="content">/root/.jupyter/cert.pem</span><span class="delimiter">'</span></span>
c.NotebookApp.keyfile = <span class="string"><span class="modifier">u</span><span class="delimiter">'</span><span class="content">/root/.jupyter/cert.key</span><span class="delimiter">'</span></span>

<span class="comment"># IP ADDRESS AND PORT</span>
<span class="comment"># set ip to '*' to bind on all IP addresses of the cloud instance</span>
c.NotebookApp.ip = <span class="string"><span class="delimiter">'</span><span class="content">*</span><span class="delimiter">'</span></span>
<span class="comment"># it is a good idea to set a known, fixed default port for server access</span>
c.NotebookApp.port = <span class="integer">8888</span>

<span class="comment"># PASSWORD PROTECTION</span>
<span class="comment"># here: 'jupyter' as password</span>
<span class="comment"># replace the hash code with the one for your password</span>
c.NotebookApp.password = <span class="string"><span class="delimiter">'</span><span class="content">sha1:bb5e01be158a:99465f872e0613a3041ec25b7860175f59847702</span><span class="delimiter">'</span></span>

<span class="comment"># NO BROWSER OPTION</span>
<span class="comment"># prevent Jupyter from trying to open a browser</span>
c.NotebookApp.open_browser = <span class="predefined-constant">False</span></code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Deploying Jupyter Notebook in the cloud principally leads to a number
 of security issues since it is a full-fledged development environment 
available on the web. It is therefore of paramount importance to use the
 security measures that a Jupyter Notebook server provides by default, 
like password protection and SSL encryption. But this is just the 
beginning and further security measures might be advised depending on 
what exactly is done on the cloud instance.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The next step is to make sure that Python and Jupyter Notebook get installed on the droplet.</p>
</div>
</div>
<div class="sect3">
<h4 id="_installation_script_for_python_and_jupyter_notebook">2.5.3. Installation Script for Python and Jupyter Notebook</h4>
<div class="paragraph">
<p>The bash script to install Python and Jupyter Notebook is similar to the one presented in section <a href="#docker_container">Using Docker Containerization</a>
 to install Python via Miniconda in a Docker container. However, the 
script here needs to start the Jupyter Notebook server as well. All 
major parts and lines of code are commented inline.</p>
</div>
<div id="cloud_install" class="exampleblock">
<div class="title">Example 4. Bash script to install Python and to run the Jupyter Notebook server</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="bash">#!/bin/bash
#
# Script to Install
# Linux System Tools and Basic Python Components
# as well as to
# Start Jupyter Notebook Server
#
# Python for Algorithmic Trading
# (c) Dr. Yves J. Hilpisch
# The Python Quants GmbH
#
# GENERAL LINUX
apt-get update  # updates the package index cache
apt-get upgrade -y  # updates packages
apt-get install -y git screen htop wget nano bzip2 # installs system tools
apt-get upgrade -y bash  # upgrades bash if necessary
apt-get clean  # cleans up the package index cache

# INSTALLING MINICONDA
wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O Miniconda.sh
bash Miniconda.sh -b  # installs Miniconda
rm -rf Miniconda.sh  # removes the installer
export PATH="/root/miniconda3/bin:$PATH"  # prepends the new path for current session
# prepends the new path in the shell configuration
cat &gt;&gt; ~/.profile &lt;&lt;EOF
export PATH="/root/miniconda3/bin:$PATH"
EOF

# INSTALLING PYTHON LIBRARIES
conda install -y jupyter  # interactive data analytics in the browser
conda install -y pytables  # wrapper for HDF5 binary storage
conda install -y pandas  #  data analysis package
conda install -y pandas-datareader  # API wrapper for Google Finance
conda install -y matplotlib  # standard plotting library
conda install -y seaborn  # statistical plotting library
conda install -y quandl  # wrapper for Quandl data API
conda install -y scikit-learn  # machine learning library
conda install -y flask  # light weight web framework
conda install -y openpyxl  # library for Excel interaction
conda install -y pyyaml  # library to manage yaml files

pip install --upgrade pip  # upgrading the package manager
pip install q  # logging and debugging
pip install plotly  # interactive D3.js plots
pip install cufflinks  # combining plotly with pandas
pip install tensorflow  # deep learning library
# Python wrapper for Oanda API (v1 &amp; v20)
pip install git+https://github.com/oanda/oandapy.git
pip install v20

# COPYING FILES AND CREATING DIRECTORIES
mkdir /root/.jupyter
mv /root/jupyter_notebook_config.py /root/.jupyter/
mv /root/cert.* /root/.jupyter
mkdir /root/notebook
cd /root/notebook

# STARTING JUPYTER NOTEBOOK
jupyter notebook --allow-root</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>This script needs to be copied to the droplet and needs to be started
 by the orchestration script as described in the next sub-section.</p>
</div>
</div>
<div class="sect3">
<h4 id="_script_to_orchestrate_the_droplet_set_up">2.5.4. Script to Orchestrate the Droplet Set-up</h4>
<div class="paragraph">
<p>The second bash script which sets up the droplet is the shortest one.
 It mainly copies all the other files to the droplet for which the 
respective IP address is expected as a parameter. In the final line, it 
starts the <code>install.sh</code> bash script which in turn does the installation itself and starts the Jupyter Notebook server.</p>
</div>
<div id="server_setup" class="exampleblock">
<div class="title">Example 5. <code>bash</code> script to setup the droplet</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="bash">#!/bin/bash
#
# Setting up a DigitalOcean Droplet
# with Basic Python Stack
# and Jupyter Notebook
#
# Python for Algorithmic Trading
# (c) Dr Yves J Hilpisch
# The Python Quants GmbH
#

# IP ADDRESS FROM PARAMETER
MASTER_IP=$1

# COPYING THE FILES
scp install.sh root@${MASTER_IP}:
scp cert.* jupyter_notebook_config.py root@${MASTER_IP}:

# EXECUTING THE INSTALLATION SCRIPT
ssh root@${MASTER_IP} bash /root/install.sh</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Everything now is together to give the set-up code a try. On DigitalOcean, create a new droplet with options similar to these:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>operating system</strong>: Ubuntu 16.04.2 x64 (the default choice)</p>
</li>
<li>
<p><strong>size</strong>: 1 core, 512 MB, 20GB SSD (smallest droplet)</p>
</li>
<li>
<p><strong>data center region</strong>: Frankfurt (since your author lives in Germany)</p>
</li>
<li>
<p><strong>SSH key</strong>: add a (new) SSH key for password-less login <sup class="footnote">[<a id="_footnoteref_15" class="footnote" href="#_footnote_15" title="View footnote.">15</a>]</sup></p>
</li>
<li>
<p><strong>droplet name</strong>: you can go with the pre-specified name or can choose something like <code>algotrading</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Finally, clicking on the <code>Create</code> button initiates the 
droplet creation process which generally takes about one minute. The 
major outcome for proceeding with the set-up procedure is the IP address
 which might be, for instance, 138.68.80.72 when you have chosen 
Frankfurt as your data center location. Setting up the droplet now is as
 easy as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>(py3) macbookpro:~/cloud$ bash setup.sh 138.68.80.72</pre>
</div>
</div>
<div class="paragraph">
<p>The resulting process, however, might take a couple of minutes. It is
 finished when there is a message from the Jupyter Notebook server 
saying something like:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>The Jupyter Notebook is running at: https://[all ip addresses on your system]:8888/</pre>
</div>
</div>
<div class="paragraph">
<p>In any current browser, visiting the following address accesses the running Jupyter Notebook (note the <code>https</code> protocol):</p>
</div>
<div class="listingblock">
<div class="content">
<pre>https://138.68.80.72:8888</pre>
</div>
</div>
<div class="paragraph">
<p>After maybe adding a security exception, the Jupyter Notebook login screen prompting for a password (in our case <code>jupyter</code>) should appear. Everything is now ready to start Python development in the browser via Jupyter Notebook, <code>IPython</code>
 via a terminal window or the text file editor. Other file management 
capabilities like file upload, deletion of files or creation of folders 
are also available.</p>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Cloud instances like those from DigitalOcean and Jupyter Notebook are
 a powerful combination for the algorithmic trader to work on and make 
use of professional compute and storage infrastructure. Professional 
cloud and data center providers make sure that your (virtual) machines 
are physically secure and highly available. Using cloud instances also 
keeps the exploration and development phase at rather low costs since 
usage generally gets charged by the hour without the need to enter long 
term agreements.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_conclusions_2">2.6. Conclusions</h3>
<div class="paragraph">
<p>Python is the programming language and technology platform of choice 
for this book. However, Python deployment can be tricky at best and 
sometimes even tedious and nerve wrecking. Fortunately, technologies are
 available today — all younger than five years — that help with the 
deployment issue. The open source software <code>conda</code> helps with
 both Python package and virtual environment management. Docker 
containers go even further in that complete file systems and runtime 
environments can be easily created in a technically shielded “sandbox”, 
i.e. the container. Going even one step further, cloud providers like 
DigitalOcean offer compute and storage capacity in professionally 
managed and secured data centers within minutes and billed by the hour. 
This in combination with a Python 3.5 installation and a secured Jupyter
 Notebook server installation provides a professional environment for 
Python development and deployment in the context of algorithmic trading 
projects.</p>
</div>
</div>
<div class="sect2">
<h3 id="_further_resources_2">2.7. Further Resources</h3>
<div class="paragraph">
<p>For <em>Python package management</em>, consult the following resources:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://pypi.python.org/pypi/pip" target="_blank"><code>pip</code> package manager page</a></p>
</li>
<li>
<p><a href="http://conda.pydata.org/" target="_blank"><code>conda</code> package manager page</a></p>
</li>
<li>
<p><a href="https://packaging.python.org/installing/" target="_blank">official Installing Packages page</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For <em>virtual environment management</em>, consult these resources:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://pypi.python.org/pypi/virtualenv" target="_blank"><code>virtualenv</code> environment manager page</a></p>
</li>
<li>
<p><a href="http://conda.pydata.org/docs/using/envs.html" target="_blank"><code>conda</code> Managing Environments page</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Information about <em>Docker containers</em> is found here:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://docker.com/" target="_blank">Docker home page</a></p>
</li>
<li>
<p>Matthias, Karl and Sean Kane (2015): <em>Docker: Up and Running.</em> O’Reilly, Beijing et al.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Robbins (2016) provides a concise introduction to and overview of the <code>bash</code> <em>scripting language</em>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Robbins, Arnold (2016): <em>Bash Pocket Reference</em>. 2nd ed., O’Reilly, Beijing et al.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>How to run a <em>public Jupyter Notebook server securely</em> is explained under <a href="http://jupyter-notebook.readthedocs.io/en/latest/public_server.html" target="_blank">Running a Notebook Server</a>.</p>
</div>
<div class="paragraph">
<p>To sign up on DigitalOcean with a 10 USD bonus in your new account visit this <a href="https://m.do.co/c/fbe512dd3dac" target="_blank">sign-up page</a>. This pays for two months of usage of the smallest droplet.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="financial_data">3. Working with Financial Data</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Clearly, data beats algorithms. Without comprehensive data, you tend to get non-comprehensive predictions.<sup class="footnote">[<a id="_footnoteref_16" class="footnote" href="#_footnote_16" title="View footnote.">16</a>]</sup></p>
</div>
</blockquote>
<div class="attribution">
— Rob Thomas
</div>
</div>
<div class="sect2">
<h3 id="_introduction_3">3.1. Introduction</h3>
<div class="paragraph">
<p>In algorithmic trading, one generally has to deal with four types of data as illustrated in <a href="#types_of_data">Types of Financial Data (Examples)</a>. Although simplifying the real data world, distinguishing data along the pairs <em>historical vs. real-time</em> and <em>structured vs. unstructured</em> proves often useful in technical settings.</p>
</div>
<table id="types_of_data" class="tableblock frame-all grid-all spread">
<caption class="title">Table 2. Types of Financial Data (Examples)</caption>
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>structured</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>unstructured</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>historical</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">end-of-day closing prices</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">financial news articles</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>real-time</strong></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">bid/ask prices for a stock</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">posts on Twitter</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>This book is mainly concerned with <em>structured data</em> of both 
historical and real-time types. This chapter in particular focuses on 
historical, structured data, like end-of-day closing values for the 
Apple, Inc. stock traded at the NASDAQ exchange. However, this category 
also subsumes intraday data, like, for example, 1-minute-bar data for 
the BTC/USD exchange rate. The processing of real-time, structured data 
is covered in <a href="#realtime_sockets">Working with Real-Time Data and Sockets</a>.</p>
</div>
<div class="paragraph">
<p>An algorithmic trading project typically starts with a trading idea 
or hypothesis which needs to be (back-)tested based on historical 
financial data. This is the context for this chapter, the plan for which
 is as follows. <a href="#reading_from_sources">Reading Financial Data From Different Sources</a> uses <code>pandas</code> to read data from different file- and web-based sources. <a href="#open_data_sources">Working with Open Data Sources</a> introduces Python packages that facilitate the usage of open data sources, like <a href="https://www.google.com/finance" target="_blank">Google Finance</a> and <a href="http://quandl.com/" target="_blank">Quandl</a>. <a href="#eikon_data_api">Thomson Reuters Eikon Python API</a> introduces to the Python wrapper for the Thomson Reuters Eikon data API. Finally, <a href="#storing_data">Storing Financial Data Efficiently</a> briefly shows how to store historical, structured data efficiently with <code>pandas</code> based on the <a href="http://hdfgroup.org/" target="_blank">HDF5</a> binary storage format.</p>
</div>
<div class="paragraph">
<p>The goal for this chapter is to have available financial data in a 
format with which the backtesting of trading ideas and hypotheses can be
 implemented effectively. The three major themes are the importing of 
data, the handling of the data and the storage of it. This and 
sub-sequent chapters assume a Python 3.5 installation with Python 
packages installed as explained in detail in chapter <a href="#python_environment">Setting up the Python Environment</a>. For the time being, it is not yet relevant on which infrastructure exactly this Python environment is provided.</p>
</div>
</div>
<div class="sect2">
<h3 id="reading_from_sources">3.2. Reading Financial Data From Different Sources</h3>
<div class="paragraph">
<p>This section makes heavy use of the capabilities of <code>pandas</code>, the popular data analysis library for Python (see <a href="http://pandas.pydata.org/" target="_blank"><code>pandas</code> home page</a>). <code>pandas</code>
 comprehensively supports the three main tasks this chapter is concerned
 with: reading data, handling data and storing data. One of its strength
 is the reading of data from different types of sources as the remainder
 of this section illustrates.</p>
</div>
<div class="sect3">
<h4 id="_the_data_set">3.2.1. The Data Set</h4>
<div class="paragraph">
<p>In this section, we work with a fairly small data set for the Apple, Inc. stock price (symbol <code>AAPL</code>) as downloaded from Yahoo! Finance towards the end of 2016 when Yahoo! Finance sill provided a financial data API service.<sup class="footnote">[<a id="_footnoteref_17" class="footnote" href="#_footnote_17" title="View footnote.">17</a>]</sup></p>
</div>
<div class="paragraph">
<p>Having stored such historical financial data in a CSV file on disk, pure Python can be used to read and print its content.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">with</span> <span class="predefined">open</span>(<span class="string"><span class="delimiter">'</span><span class="content">data/aapl.csv</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>) <span class="keyword">as</span> f:  <i class="conum" data-value="1"></i><b>(1)</b>
   ...:     <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">5</span>):  <i class="conum" data-value="2"></i><b>(2)</b>
   ...:         print(f.readline())  <i class="conum" data-value="3"></i><b>(3)</b>
   ...:
Date,Open,High,Low,Close,Volume,Adj Close  <i class="conum" data-value="4"></i><b>(4)</b>

<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">31</span>,<span class="float">113.65</span>,<span class="float">114.23</span>,<span class="float">113.2</span>,<span class="float">113.54</span>,<span class="integer">26419400</span>,<span class="float">113.54</span>  <i class="conum" data-value="5"></i><b>(5)</b>

<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span>,<span class="float">113.87</span>,<span class="float">115.21</span>,<span class="float">113.45</span>,<span class="float">113.72</span>,<span class="integer">37861700</span>,<span class="float">113.72</span>

<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">27</span>,<span class="float">115.39</span>,<span class="float">115.86</span>,<span class="float">114.1</span>,<span class="float">114.48</span>,<span class="integer">34562000</span>,<span class="float">114.48</span>

<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">26</span>,<span class="float">114.31</span>,<span class="float">115.7</span>,<span class="float">113.31</span>,<span class="float">115.59</span>,<span class="integer">66134200</span>,<span class="float">115.59</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Open the file on disk (adjust path and filename if necessary).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Sets up a <code>for</code> loop with 5 iterations.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Prints the first 5 lines in the opened CSV file.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The header row with the column headers.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The first data row, with the data separated by commas.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>This approach allows for simple inspection of the data. One learns 
that there is a header line and that the single data points per row 
represent <code>Date, Open, High, Low, Close, Volume</code> and <code>Adj Close</code>, respectively. However, the data is not yet available in memory for further usage with Python.</p>
</div>
</div>
<div class="sect3">
<h4 id="_reading_from_a_csv_file_with_python">3.2.2. Reading from a CSV File with Python</h4>
<div class="paragraph">
<p>To work with data stored as a CSV file, the file needs to be parsed 
and the data needs to be stored in a Python data structure. Python has a
 built-in module called <code>csv</code> which supports the reading of data from a CSV file. The first approach yields a <code>list</code> object containing other <code>list</code> objects with the data from the file.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">csv</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: csv_reader = csv.reader(<span class="predefined">open</span>(<span class="string"><span class="delimiter">'</span><span class="content">data/aapl.csv</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>))  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: data = [l <span class="keyword">for</span> l <span class="keyword">in</span> csv_reader]  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">4</span>]: data[:<span class="integer">5</span>]  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">4</span>]:
[[<span class="string"><span class="delimiter">'</span><span class="content">Date</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Open</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">High</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Low</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Volume</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Adj Close</span><span class="delimiter">'</span></span>],
 [<span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">113.65</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">114.23</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">113.2</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">113.54</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">26419400</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">113.54</span><span class="delimiter">'</span></span>],
 [<span class="string"><span class="delimiter">'</span><span class="content">2016-10-28</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">113.87</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">115.21</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">113.45</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">113.72</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">37861700</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">113.72</span><span class="delimiter">'</span></span>],
 [<span class="string"><span class="delimiter">'</span><span class="content">2016-10-27</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">115.39</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">115.86</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">114.1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">114.48</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">34562000</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">114.48</span><span class="delimiter">'</span></span>],
 [<span class="string"><span class="delimiter">'</span><span class="content">2016-10-26</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">114.31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">115.7</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">113.31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">115.59</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">66134200</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">115.59</span><span class="delimiter">'</span></span>]]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the <code>csv</code> module.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Instantiates a <code>csv.reader</code> iterator object.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>A <code>list</code> comprehension adding every single line from the CSV file as a <code>list</code> object to the resulting <code>list</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Prints out in <code>IPython</code> the first five elements of the <code>list</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Working with such a nested <code>list</code> object — e.g. for the 
calculation of the average closing price — is possible in principle but 
not really efficient or intuitive. Using a <code>csv.DictReader</code> iterator object instead of the standard <code>csv.reader</code>
 object makes such tasks a bit more manageable. Every row of data in the
 CSV file (apart from the header row) is then imported as a <code>dict</code> object so that single values can be accessed via the respective key.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">csv</span>

In [<span class="integer">2</span>]: csv_reader = csv.DictReader(<span class="predefined">open</span>(<span class="string"><span class="delimiter">'</span><span class="content">data/aapl.csv</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>))  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">3</span>]: data = [l <span class="keyword">for</span> l <span class="keyword">in</span> csv_reader]

In [<span class="integer">4</span>]: data[:<span class="integer">3</span>]
Out[<span class="integer">4</span>]:
        [{<span class="string"><span class="delimiter">'</span><span class="content">Adj Close</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">113.54</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">113.54</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">Date</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">High</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">114.23</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">Low</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">113.2</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">Open</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">113.65</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">Volume</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">26419400</span><span class="delimiter">'</span></span>},
         {<span class="string"><span class="delimiter">'</span><span class="content">Adj Close</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">113.72</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">113.72</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">Date</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">2016-10-28</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">High</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">115.21</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">Low</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">113.45</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">Open</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">113.87</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">Volume</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">37861700</span><span class="delimiter">'</span></span>},
         {<span class="string"><span class="delimiter">'</span><span class="content">Adj Close</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">114.48</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">114.48</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">Date</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">2016-10-27</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">High</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">115.86</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">Low</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">114.1</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">Open</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">115.39</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">Volume</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">34562000</span><span class="delimiter">'</span></span>}]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Here, the <code>csv.DictReader</code> iterator object is instantiated which reads every data row into a <code>dict</code> object — given the information in the header row.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Based on the single <code>dict</code> objects, aggregations are now 
somewhat more easy to accomplish. However, one still cannot speak of a 
convenient way of calculating the mean of the Apple closing stock price 
when inspecting the respective Python code.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">5</span>]: <span class="predefined">sum</span>([<span class="predefined">float</span>(l[<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>]) <span class="keyword">for</span> l <span class="keyword">in</span> data]) / <span class="predefined">len</span>(data)  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">5</span>]: <span class="float">115.70714309523808</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>First, a <code>list</code> object is generated with via a 
comprehension with all closing values; second, the sum is taken over all
 these values; third, the resulting sum is divided by the number of 
closing values.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>This is one of the major reasons why <code>pandas</code> has gained 
such a popularity in the Python community. It makes the importing of 
data and the handling of, for example, financial time series data sets 
much more convenient (and also often much faster) than pure Python.</p>
</div>
</div>
<div class="sect3">
<h4 id="_reading_from_a_csv_file_with_pandas">3.2.3. Reading from a CSV File with pandas</h4>
<div class="paragraph">
<p>From now on, this section uses <code>pandas</code> to work with the Apple stock price data set. The major function used is <code>read_csv</code> which allows for a number of customizations via different parameters (see the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" target="_blank"><code>read_csv</code> API reference</a>). <code>read_csv</code> yields as a result of the data reading procedure a <code>DataFrame</code> object which is the central means of storing (tabular) data with <code>pandas</code>. The <code>DataFrame</code> class has many powerful methods that are particularly helpful in financial applications (refer to the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html" target="_blank"><code>DataFrame</code> API reference</a>).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: data = pd.read_csv(<span class="string"><span class="delimiter">'</span><span class="content">data/aapl.csv</span><span class="delimiter">'</span></span>, index_col=<span class="integer">0</span>, parse_dates=<span class="predefined-constant">True</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: data.info()  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">3</span>]:
        &lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
        DatetimeIndex: <span class="integer">21</span> entries, <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">31</span> to <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">03</span>
        Data columns (total <span class="integer">6</span> columns):
        Open         <span class="integer">21</span> non-null float64
        High         <span class="integer">21</span> non-null float64
        Low          <span class="integer">21</span> non-null float64
        Close        <span class="integer">21</span> non-null float64
        Volume       <span class="integer">21</span> non-null int64
        Adj Close    <span class="integer">21</span> non-null float64
        dtypes: float64(<span class="integer">5</span>), int64(<span class="integer">1</span>)
        memory usage: <span class="float">1.1</span> KB

In [<span class="integer">4</span>]: data.tail()  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">4</span>]:
                      Open    High     Low   Close    Volume  Adj Close
        Date
        <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">07</span>  <span class="float">114.31</span>  <span class="float">114.56</span>  <span class="float">113.51</span>  <span class="float">114.06</span>  <span class="integer">24358400</span>     <span class="float">114.06</span>
        <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">06</span>  <span class="float">113.70</span>  <span class="float">114.34</span>  <span class="float">113.13</span>  <span class="float">113.89</span>  <span class="integer">28779300</span>     <span class="float">113.89</span>
        <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">05</span>  <span class="float">113.40</span>  <span class="float">113.66</span>  <span class="float">112.69</span>  <span class="float">113.05</span>  <span class="integer">21453100</span>     <span class="float">113.05</span>
        <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">04</span>  <span class="float">113.06</span>  <span class="float">114.31</span>  <span class="float">112.63</span>  <span class="float">113.00</span>  <span class="integer">29736800</span>     <span class="float">113.00</span>
        <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">03</span>  <span class="float">112.71</span>  <span class="float">113.05</span>  <span class="float">112.28</span>  <span class="float">112.52</span>  <span class="integer">21701800</span>     <span class="float">112.52</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The <code>pandas</code> package is imported.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>This imports the data from the CSV file, indicated that the first 
column shall be treated as the index column and letting the entries in 
that column be interpreted as date-time information.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>This method call prints out meta information regarding the resulting <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The <code>data.tail()</code> method prints out by default the five most recent data rows.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Calculating the mean of the Apple stock closing values now is only a single method call.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">5</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>].mean()
Out[<span class="integer">5</span>]: <span class="float">115.70714285714286</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><a href="#vectorized_backtesting">Mastering Vectorized Backtesting</a> introduces more functionality of <code>pandas</code> for the handling of financial data. For details on working with <code>pandas</code> and the powerful <code>DataFrame</code> class also refer to the official <a href="http://pandas.pydata.org/pandas-docs/stable/" target="_blank"><code>pandas</code> Documentation page</a> and to the book McKinney (2017).</p>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Although the Python standard library provides capabilities to read data from CSV files, <code>pandas</code>
 in general significantly simplifies and speeds up such operations. An 
additional benefit is that the data analysis capabilities of <code>pandas</code> are immediately available since <code>read_csv</code> returns a <code>DataFrame</code> object.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_exporting_to_excel_and_json">3.2.4. Exporting to Excel and JSON</h4>
<div class="paragraph">
<p><code>pandas</code> is also strong in exporting data stored in <code>DataFrame</code> objects when this data needs to be shared in a non-Python specific format. Apart from being able to export to CSV files, <code>pandas</code>
 allows, for example, also to do the export in the form of Excel 
spreadsheet files as well as JSON files which are both popular data 
exchange formats in the financial industry. Such an exporting procedure 
typically needs a single method call only.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">6</span>]: data.to_excel(<span class="string"><span class="delimiter">'</span><span class="content">data/aapl.xlsx</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">7</span>]: data.to_json(<span class="string"><span class="delimiter">'</span><span class="content">data/aapl.json</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">8</span>]: ls -n data/  <i class="conum" data-value="3"></i><b>(3)</b>
        total <span class="integer">32</span>
        -rw-r--r--<span class="error">@</span> <span class="integer">1</span> <span class="integer">503</span>  <span class="integer">20</span>  <span class="integer">1181</span> Nov  <span class="integer">3</span> <span class="integer">12</span>:<span class="integer">31</span> aapl.csv
        -rw-r--r--<span class="error">@</span> <span class="integer">1</span> <span class="integer">503</span>  <span class="integer">20</span>  <span class="integer">2986</span> Nov  <span class="integer">3</span> <span class="integer">12</span>:<span class="integer">48</span> aapl.json
        -rw-r--r--<span class="error">@</span> <span class="integer">1</span> <span class="integer">503</span>  <span class="integer">20</span>  <span class="integer">5835</span> Nov  <span class="integer">3</span> <span class="integer">12</span>:<span class="integer">47</span> aapl.xlsx</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Exports the data to an Excel spreadsheet file on disk.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Exports the data to a JSON file on disk.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Shows the existing files in the <code>data</code> folder with their file sizes.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>In particular when it comes to the interaction with Excel spreadsheet
 files, there are more elegant ways than just doing a data dump to a new
 file. <code>xlwings</code>, for example, is a powerful Python library 
allowing for an efficient and intelligent interaction between Python and
 Excel (visit the <a href="http://xlwings.org/" target="_blank"><code>xlwings</code> home page</a>).</p>
</div>
</div>
<div class="sect3">
<h4 id="_reading_from_excel_and_json">3.2.5. Reading from Excel and JSON</h4>
<div class="paragraph">
<p>Now that the data is also available in the form of an Excel spreadsheet file and a JSON data file, <code>pandas</code> can read data from these sources as well. The approach is as straightforward as with CSV files.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">9</span>]: data_copy_1 = pd.read_excel(<span class="string"><span class="delimiter">'</span><span class="content">data/aapl.xlsx</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Sheet1</span><span class="delimiter">'</span></span>,
                                      index_col=<span class="integer">0</span>).sort_index()  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">10</span>]: data_copy_1.head()  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">10</span>]:
                       Open    High     Low   Close    Volume  Adj Close
         Date
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">03</span>  <span class="float">112.71</span>  <span class="float">113.05</span>  <span class="float">112.28</span>  <span class="float">112.52</span>  <span class="integer">21701800</span>     <span class="float">112.52</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">04</span>  <span class="float">113.06</span>  <span class="float">114.31</span>  <span class="float">112.63</span>  <span class="float">113.00</span>  <span class="integer">29736800</span>     <span class="float">113.00</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">05</span>  <span class="float">113.40</span>  <span class="float">113.66</span>  <span class="float">112.69</span>  <span class="float">113.05</span>  <span class="integer">21453100</span>     <span class="float">113.05</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">06</span>  <span class="float">113.70</span>  <span class="float">114.34</span>  <span class="float">113.13</span>  <span class="float">113.89</span>  <span class="integer">28779300</span>     <span class="float">113.89</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">07</span>  <span class="float">114.31</span>  <span class="float">114.56</span>  <span class="float">113.51</span>  <span class="float">114.06</span>  <span class="integer">24358400</span>     <span class="float">114.06</span>

In [<span class="integer">11</span>]: data_copy_2 = pd.read_json(<span class="string"><span class="delimiter">'</span><span class="content">data/aapl.json</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">12</span>]: data_copy_2.head()  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">12</span>]:
                     Adj Close   Close    High     Low    Open    Volume
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">03</span>     <span class="float">112.52</span>  <span class="float">112.52</span>  <span class="float">113.05</span>  <span class="float">112.28</span>  <span class="float">112.71</span>  <span class="integer">21701800</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">04</span>     <span class="float">113.00</span>  <span class="float">113.00</span>  <span class="float">114.31</span>  <span class="float">112.63</span>  <span class="float">113.06</span>  <span class="integer">29736800</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">05</span>     <span class="float">113.05</span>  <span class="float">113.05</span>  <span class="float">113.66</span>  <span class="float">112.69</span>  <span class="float">113.40</span>  <span class="integer">21453100</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">06</span>     <span class="float">113.89</span>  <span class="float">113.89</span>  <span class="float">114.34</span>  <span class="float">113.13</span>  <span class="float">113.70</span>  <span class="integer">28779300</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="octal">07</span>     <span class="float">114.06</span>  <span class="float">114.06</span>  <span class="float">114.56</span>  <span class="float">113.51</span>  <span class="float">114.31</span>  <span class="integer">24358400</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This reads the data from the Excel spreadsheet file to a new <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The first five rows of the first in-memory copy of the data are printed.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>This reads the data from the JSON file to yet another <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>This then prints the first five rows of the second in-memory copy of the data.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><code>pandas</code> proves useful for reading and writing financial 
data from and to different types of data files. Often, the reading might
 be tricky due to non-standard storage formats (like a “;” instead of a 
“,” as separator) but <code>pandas</code> generally provides the right 
set of parameter combinations to cope with such cases. Although all 
examples in this section use a small data set only, one can expect high 
performance input-output operations from <code>pandas</code> in the most important scenarios when the data sets are much larger.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="open_data_sources">3.3. Working with Open Data Sources</h3>
<div class="paragraph">
<p>To a great extent, the attractiveness of the Python ecosystem stems 
from the fact that almost all packages available are open source and can
 be used for free. Financial analytics in general and algorithmic 
trading in particular, however, cannot live with open source software 
and algorithms alone — data plays a vital role as well as the quote at 
the beginning of the chapter emphasizes. The previous section uses a 
so-called <em>open data</em> source which provides financial information
 for free, even without registration of any kind. Such open financial 
data sources are a relatively recent phenomenon. The financial industry 
has seen decades during which any kind of meaningful and high quality 
financial data in electronic form needed to be purchased from 
professional data providers, like Bloomberg or Thomson Reuters.</p>
</div>
<div class="paragraph">
<p>Over the recent years, more and more financial data providers have emerged that not only <em>show</em>
 data on their website but rather allow access via programmatic APIs. 
Google Finance is one example. In addition, Quandl has emerged as a 
platform that integrates a great variety of open financial data sets 
under a consistent API.</p>
</div>
<div class="paragraph">
<p>This section covers two packages to retrieve and work with open financial data helpful in an algorithmic trading context.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong><code>pandas-datareader</code></strong>: this is a package whose origin lies in the <code>pandas</code>
 project and that has been separated in to a project of its own; it 
allows to retrieve financial data, e.g. stock prices, in a unified and 
convenient fashion from Google Finance</p>
</li>
<li>
<p><strong><code>quandl</code></strong>: this package is the Python 
wrapper for the Quandl data API, providing unified access to thousands 
of free data sets and sources as well as to premium, i.e. 
to-be-paid-for, data sets</p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="_google_finance">3.3.1. Google Finance</h4>
<div class="paragraph">
<p>The <a href="https://github.com/pydata/pandas-datareader" target="_blank"><code>pandas-datareader</code></a> package is installed with the <code>conda</code> package manager via <code>conda install pandas-datareader</code>. By default, the main <code>DataReader</code>
 function retrieves daily stock prices beginning in January 2010 and 
ending with the most recently available values. At a minimum, the 
function expects the stock symbol and the data source to be specified. 
The example retrieves data for the Apple, Inc. stock from Google 
Finance.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">from</span> <span class="include">pandas_datareader</span> <span class="keyword">import</span> <span class="include">data</span> <span class="keyword">as</span> web  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: data = web.DataReader(name=<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, data_source=<span class="string"><span class="delimiter">'</span><span class="content">google</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: data.round(<span class="integer">2</span>).tail()  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">3</span>]:
                      Open    High     Low   Close    Volume  Adj Close
        Date
        <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">31</span>  <span class="float">113.65</span>  <span class="float">114.23</span>  <span class="float">113.20</span>  <span class="float">113.54</span>  <span class="integer">26419400</span>     <span class="float">112.96</span>
        <span class="integer">2016</span>-<span class="integer">11</span>-<span class="octal">01</span>  <span class="float">113.46</span>  <span class="float">113.77</span>  <span class="float">110.53</span>  <span class="float">111.49</span>  <span class="integer">43825800</span>     <span class="float">110.92</span>
        <span class="integer">2016</span>-<span class="integer">11</span>-<span class="octal">02</span>  <span class="float">111.40</span>  <span class="float">112.35</span>  <span class="float">111.23</span>  <span class="float">111.59</span>  <span class="integer">28331700</span>     <span class="float">111.02</span>
        <span class="integer">2016</span>-<span class="integer">11</span>-<span class="octal">03</span>  <span class="float">110.98</span>  <span class="float">111.46</span>  <span class="float">109.55</span>  <span class="float">109.83</span>  <span class="integer">26932600</span>     <span class="float">109.83</span>
        <span class="integer">2016</span>-<span class="integer">11</span>-<span class="octal">04</span>  <span class="float">108.53</span>  <span class="float">110.25</span>  <span class="float">108.11</span>  <span class="float">108.84</span>  <span class="integer">30666900</span>     <span class="float">108.84</span>

In [<span class="integer">4</span>]: data.info()
Out[<span class="integer">5</span>]:
        &lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
        DatetimeIndex: <span class="integer">1724</span> entries, <span class="integer">2010</span>-<span class="octal">01</span>-<span class="octal">04</span> to <span class="integer">2016</span>-<span class="integer">11</span>-<span class="octal">04</span>
        Data columns (total <span class="integer">6</span> columns):
        Open         <span class="integer">1724</span> non-null float64
        High         <span class="integer">1724</span> non-null float64
        Low          <span class="integer">1724</span> non-null float64
        Close        <span class="integer">1724</span> non-null float64
        Volume       <span class="integer">1724</span> non-null int64
        Adj Close    <span class="integer">1724</span> non-null float64
        dtypes: float64(<span class="integer">5</span>), int64(<span class="integer">1</span>)
        memory usage: <span class="float">94.3</span> KB</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the main functionality from the module and renames <code>data</code> to <code>web</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>This retrieves data for Apple, Inc. from Google Finance with the default settings for start and end dates.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The numerical data in the <code>DataFrame</code> object is rounded to two digits and the five most recent rows are printed.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>There is also an alternative way of, for example, retrieving the same data from Google Finance.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>In [5]: web.get_data_google('AAPL')['Close'].tail()  <i class="conum" data-value="1"></i><b>(1)</b>
Out[5]:
        Date
        2016-12-06    109.95
        2016-12-07    111.03
        2016-12-08    112.12
        2016-12-09    113.95
        2016-12-12    113.30
        Name: Close, dtype: float64</pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Retrieves data for Apple, Inc. from Google Finance, selects the <code>Close</code> column and prints the five most recent values.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The <code>DataReader</code> function also allows the specification of
 different start and end dates. The example retrieves stock price data 
for Microsoft, Inc. from Google Finance starting at the beginning of 
January 2016 (first trading day) and ending with the last trading day 
within the specified period until 30 June 2016.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">6</span>]: data = web.DataReader(name=<span class="string"><span class="delimiter">'</span><span class="content">MSFT</span><span class="delimiter">'</span></span>, data_source=<span class="string"><span class="delimiter">'</span><span class="content">google</span><span class="delimiter">'</span></span>,
                              start=<span class="string"><span class="delimiter">'</span><span class="content">2016-1-1</span><span class="delimiter">'</span></span>, end=<span class="string"><span class="delimiter">'</span><span class="content">2016-6-30</span><span class="delimiter">'</span></span>)

In [<span class="integer">7</span>]: data.round(<span class="integer">2</span>).tail()
Out[<span class="integer">7</span>]:
                     Open   High    Low  Close     Volume
        Date
        <span class="integer">2016</span>-<span class="octal">06</span>-<span class="integer">24</span>  <span class="float">49.81</span>  <span class="float">50.94</span>  <span class="float">49.52</span>  <span class="float">49.83</span>  <span class="integer">133502985</span>
        <span class="integer">2016</span>-<span class="octal">06</span>-<span class="integer">27</span>  <span class="float">49.10</span>  <span class="float">49.15</span>  <span class="float">48.04</span>  <span class="float">48.43</span>   <span class="integer">50576699</span>
        <span class="integer">2016</span>-<span class="octal">06</span>-<span class="integer">28</span>  <span class="float">48.92</span>  <span class="float">49.47</span>  <span class="float">48.67</span>  <span class="float">49.44</span>   <span class="integer">38140658</span>
        <span class="integer">2016</span>-<span class="octal">06</span>-<span class="integer">29</span>  <span class="float">49.91</span>  <span class="float">50.72</span>  <span class="float">49.80</span>  <span class="float">50.54</span>   <span class="integer">31304021</span>
        <span class="integer">2016</span>-<span class="octal">06</span>-<span class="integer">30</span>  <span class="float">50.72</span>  <span class="float">51.30</span>  <span class="float">50.50</span>  <span class="float">51.17</span>   <span class="integer">28527781</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Although the <code>pandas_datareader</code> package in combination 
with the open data source Google Finance cannot satisfy professional 
requirements in algorithmic trading, the combination proves useful for 
simple illustrations, rapid prototyping and similar exploratory tasks.</p>
</div>
</div>
<div class="sect3">
<h4 id="_quandl">3.3.2. Quandl</h4>
<div class="paragraph">
<p>The Python wrapper package for the Quandl data API (see the <a href="https://www.quandl.com/tools/python" target="_blank">Python wrapper page on Quandl</a> and the <a href="https://github.com/quandl/quandl-python" target="_blank">Github page of the package</a>) is installed with <code>conda</code> by <code>conda install quandl</code>.
 The first example shows how to retrieve historical average prices for 
the BTC/USD exchange rate since the introduction of Bitcoin as a 
cryptocurrency. With Quandl, requests expect always a combination of the
 <em>database</em> and the specific <em>data set</em> desired. In the example, <code>BAVERAGE</code> and <code>USD</code>. Such information is generally easily looked up on the Quandl platform. For the example, the relevant page on Quandl is <a href="https://www.quandl.com/data/BAVERAGE/USD-USD-BITCOIN-Weighted-Price" target="_blank">BAVERAGE/USD</a>.</p>
</div>
<div class="paragraph">
<p>By default, the <code>quandl</code> package returns a <code>pandas</code> <code>DataFrame</code> object. In the example, the <code>24h Average</code>
 column is also presented in annualized fashion, i.e. with year end 
values. Note that the number shown for 2016 is the last available value 
in the data set and not necessarily the year end value.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">quandl</span> <span class="keyword">as</span> q  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: data = q.get(<span class="string"><span class="delimiter">'</span><span class="content">BAVERAGE/USD</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: data.info()
Out[<span class="integer">3</span>]:
        &lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
        DatetimeIndex: <span class="integer">2278</span> entries, <span class="integer">2010</span>-<span class="octal">07</span>-<span class="integer">17</span> to <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">31</span>
        Data columns (total <span class="integer">5</span> columns):
        <span class="integer">24</span>h Average     <span class="integer">2278</span> non-null float64
        Ask             <span class="integer">917</span> non-null float64
        Bid             <span class="integer">917</span> non-null float64
        Last            <span class="integer">917</span> non-null float64
        Total Volume    <span class="integer">2278</span> non-null float64
        dtypes: float64(<span class="integer">5</span>)
        memory usage: <span class="float">106.8</span> KB

In [<span class="integer">4</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">24h Average</span><span class="delimiter">'</span></span>].resample(<span class="string"><span class="delimiter">'</span><span class="content">A</span><span class="delimiter">'</span></span>).last()  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">4</span>]:
        Date
        <span class="integer">2010</span>-<span class="integer">12</span>-<span class="integer">31</span>      <span class="float">0.29</span>
        <span class="integer">2011</span>-<span class="integer">12</span>-<span class="integer">31</span>      <span class="float">4.60</span>
        <span class="integer">2012</span>-<span class="integer">12</span>-<span class="integer">31</span>     <span class="float">13.44</span>
        <span class="integer">2013</span>-<span class="integer">12</span>-<span class="integer">31</span>    <span class="float">764.27</span>
        <span class="integer">2014</span>-<span class="integer">12</span>-<span class="integer">31</span>    <span class="float">314.44</span>
        <span class="integer">2015</span>-<span class="integer">12</span>-<span class="integer">31</span>    <span class="float">426.52</span>
        <span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">31</span>    <span class="float">702.09</span>
        Freq: A-DEC, Name: <span class="integer">24</span>h Average, dtype: float64</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Import the Python wrapper package for Quandl.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Reads historical data for the BTC/USD exchange rate.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Selects the <code>24h Average</code> column, resamples it to yearly values and defines the last available observation to be the relevant one.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Quandl also provides, for example, diverse data sets for single 
stocks, like end-of-day stock prices, stock fundamentals or data sets 
related to options traded on a certain stock. While a large part of the 
data sets on the Quandl platform are free, some of the free data sets 
require an API key. Every user obtains such a key by signing up for a 
free Quandl account on the <a href="https://www.quandl.com/users/sign_up" target="_blank">Quandl sign up page</a>. Data requests requiring an API key expect the key to be provided as the parameter <code>api_key</code>. In the example, the API key (which is found on the account settings page) is stored as a string in the variable <code>quandl_api_key</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: quandl_api_key = <span class="string"><span class="delimiter">'</span><span class="content">YOUR_API_KEY</span><span class="delimiter">'</span></span>

In [<span class="integer">2</span>]: <span class="keyword">import</span> <span class="include">quandl</span>

In [<span class="integer">3</span>]: data = quandl.get(<span class="string"><span class="delimiter">'</span><span class="content">EOD/AAPL</span><span class="delimiter">'</span></span>, start_date=<span class="string"><span class="delimiter">'</span><span class="content">2015-1-1</span><span class="delimiter">'</span></span>,
                          end_date=<span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, api_key=quandl_api_key)

In [<span class="integer">4</span>]: data.info()
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">462</span> entries, <span class="integer">2015</span>-<span class="octal">01</span>-<span class="octal">02</span> to <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">31</span>
Data columns (total <span class="integer">12</span> columns):
Open          <span class="integer">462</span> non-null float64
High          <span class="integer">462</span> non-null float64
Low           <span class="integer">462</span> non-null float64
Close         <span class="integer">462</span> non-null float64
Volume        <span class="integer">462</span> non-null float64
Dividend      <span class="integer">462</span> non-null float64
Split         <span class="integer">462</span> non-null float64
Adj_Open      <span class="integer">462</span> non-null float64
Adj_High      <span class="integer">462</span> non-null float64
Adj_Low       <span class="integer">462</span> non-null float64
Adj_Close     <span class="integer">462</span> non-null float64
Adj_Volume    <span class="integer">462</span> non-null float64
dtypes: float64(<span class="integer">12</span>)
memory usage: <span class="float">46.9</span> KB</code></pre>
</div>
</div>
<div class="paragraph">
<p>The API key can also be configured permanently with the Python wrapper via</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">quandl.ApiConfig.api_key = <span class="string"><span class="delimiter">'</span><span class="content">YOUR_API_KEY</span><span class="delimiter">'</span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The retrieval of Apple, Inc. revenue data works the same way, 
although such (free) data sets not necessarily contain the most recent 
data available.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">5</span>]: rev_annually = quandl.get(<span class="string"><span class="delimiter">'</span><span class="content">SEC/AAPL_SALESREVENUENET_A</span><span class="delimiter">'</span></span>,
                                  api_key=quandl_api_key)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">6</span>]: rev_annually / <span class="float">1e9</span>  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">6</span>]:
              Value
Date
<span class="integer">2009</span>-<span class="integer">09</span>-<span class="integer">26</span>   <span class="float">36.537</span>
<span class="integer">2010</span>-<span class="integer">09</span>-<span class="integer">25</span>   <span class="float">65.225</span>
<span class="integer">2011</span>-<span class="integer">09</span>-<span class="integer">24</span>  <span class="float">108.249</span>
<span class="integer">2012</span>-<span class="integer">09</span>-<span class="integer">29</span>  <span class="float">156.508</span>
<span class="integer">2013</span>-<span class="integer">09</span>-<span class="integer">28</span>  <span class="float">170.910</span>
<span class="integer">2014</span>-<span class="integer">09</span>-<span class="integer">27</span>  <span class="float">182.795</span>

In [<span class="integer">7</span>]: rev_quarterly = quandl.get(<span class="string"><span class="delimiter">'</span><span class="content">SEC/AAPL_SALESREVENUENET_Q</span><span class="delimiter">'</span></span>,
                                   api_key=quandl_api_key)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">8</span>]: rev_quarterly[-<span class="integer">8</span>:] / <span class="float">1e6</span>  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">8</span>]:
              Value
Date
<span class="integer">2014</span>-<span class="octal">03</span>-<span class="integer">29</span>  <span class="float">45646.0</span>
<span class="integer">2014</span>-<span class="octal">06</span>-<span class="integer">28</span>  <span class="float">37432.0</span>
<span class="integer">2014</span>-<span class="integer">09</span>-<span class="integer">27</span>  <span class="float">42123.0</span>
<span class="integer">2014</span>-<span class="integer">12</span>-<span class="integer">27</span>  <span class="float">74599.0</span>
<span class="integer">2015</span>-<span class="octal">03</span>-<span class="integer">28</span>  <span class="float">58010.0</span>
<span class="integer">2015</span>-<span class="octal">06</span>-<span class="integer">27</span>  <span class="float">49605.0</span>
<span class="integer">2015</span>-<span class="integer">09</span>-<span class="integer">26</span>  <span class="float">51501.0</span>
<span class="integer">2015</span>-<span class="integer">12</span>-<span class="integer">26</span>  <span class="float">75872.0</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This retrieves annual revenues for Apple, Inc. and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>…​ scales it to billion USD.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>This retrieves quarterly revenues for Apple, Inc. and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>…​ scales it to million USD.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The Quandl platform also offers premium data sets for which a 
subscription or fee is required. Most of these data sets offer free 
samples. The example retrieves option implied volatilities for the 
Microsoft, Inc. stock. The free sample data set is quite large with more
 than 3,600 rows and 64 columns. The last line of code display the 30, 
60 and 90 days implied volatility values for the five most recent days 
available.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">9</span>]: vol = quandl.get(<span class="string"><span class="delimiter">'</span><span class="content">VOL/MSFT</span><span class="delimiter">'</span></span>, api_key=quandl_api_key)

In [<span class="integer">10</span>]: vol.info()
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">3674</span> entries, <span class="integer">2002</span>-<span class="octal">03</span>-<span class="integer">15</span> to <span class="integer">2016</span>-<span class="integer">11</span>-<span class="octal">04</span>
Data columns (total <span class="integer">64</span> columns):
Hv10              <span class="integer">3674</span> non-null float64
Hv20              <span class="integer">3674</span> non-null float64
...
IvCall30          <span class="integer">3674</span> non-null float64
IvPut30           <span class="integer">3674</span> non-null float64
IvMean30          <span class="integer">3674</span> non-null float64
IvMeanSkew30      <span class="integer">3674</span> non-null float64
IvCall60          <span class="integer">3674</span> non-null float64
IvPut60           <span class="integer">3674</span> non-null float64
IvMean60          <span class="integer">3674</span> non-null float64
IvMeanSkew60      <span class="integer">3674</span> non-null float64
IvCall90          <span class="integer">3674</span> non-null float64
IvPut90           <span class="integer">3674</span> non-null float64
IvMean90          <span class="integer">3674</span> non-null float64
...
IvCall1080        <span class="integer">3674</span> non-null float64
IvPut1080         <span class="integer">3674</span> non-null float64
IvMean1080        <span class="integer">3674</span> non-null float64
IvMeanSkew1080    <span class="integer">3674</span> non-null float64
dtypes: float64(<span class="integer">64</span>)
memory usage: <span class="float">1.8</span> MB

In [<span class="integer">11</span>]: vol[[<span class="string"><span class="delimiter">'</span><span class="content">IvMean30</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">IvMean60</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">IvMean90</span><span class="delimiter">'</span></span>]].tail()
Out[<span class="integer">11</span>]:
            IvMean30  IvMean60  IvMean90
Date
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">31</span>    <span class="float">0.1728</span>    <span class="float">0.1754</span>    <span class="float">0.1872</span>
<span class="integer">2016</span>-<span class="integer">11</span>-<span class="octal">01</span>    <span class="float">0.1849</span>    <span class="float">0.1850</span>    <span class="float">0.1961</span>
<span class="integer">2016</span>-<span class="integer">11</span>-<span class="octal">02</span>    <span class="float">0.1920</span>    <span class="float">0.1910</span>    <span class="float">0.2010</span>
<span class="integer">2016</span>-<span class="integer">11</span>-<span class="octal">03</span>    <span class="float">0.1998</span>    <span class="float">0.1991</span>    <span class="float">0.2076</span>
<span class="integer">2016</span>-<span class="integer">11</span>-<span class="octal">04</span>    <span class="float">0.2058</span>    <span class="float">0.2017</span>    <span class="float">0.2123</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>This concludes the overview of the Python wrapper package <code>quandl</code>
 for the Quandl data API. The Quandl platform and service is growing 
rapidly and proves as valuable source for financial data in an 
algorithmic trading context.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Open source software is a trend that started many years ago. It has 
lowered the barriers of entry in many areas and also in algorithmic 
trading. A new, reinforcing trend in this regard are open data sources 
that are growing rapidly and provide in many cases already high quality 
data sets. It cannot be expected that open data will completely replace 
professional data subscriptions any time soon, but they represent a 
valuable means to get started with algorithmic trading in a cost 
efficient manner.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="eikon_data_api">3.4. Thomson Reuters Eikon Python API</h3>
<div class="paragraph">
<p>Open data sources are a blessing for algorithmic traders wanting to 
get started in the space and wanting to be able to quickly test 
hypotheses and ideas based on real financial data sets. Sooner or later,
 however, open data sets will not suffice anymore to satisfy the 
requirements of more ambitious traders and professionals.</p>
</div>
<div class="paragraph">
<p>Thomson Reuters is one of the biggest financial data and news providers in the world. Its flagship product is <a href="http://financial.thomsonreuters.com/en/products/tools-applications/trading-investment-tools/eikon-trading-software.html" target="_blank">Eikon</a> which is the equivalent to the <a href="https://www.bloomberg.com/professional/" target="_blank">Terminal</a> by Bloomberg, the major competitor in the data services field. <a href="#eikon_terminal">Browser version of Eikon terminal</a> shows a screen shot of Eikon in the browser-based version. It provides access to peta bytes of data via a single access point.</p>
</div>
<div id="eikon_terminal" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/eikon_terminal.png" alt="eikon terminal">
</div>
<div class="title">Figure 2. Browser version of Eikon terminal</div>
</div>
<div class="paragraph">
<p>Recently, Thomson Reuters have streamlined the API landscape and have
 released (as beta at the end of 2016) a Python wrapper package, called <code>eikon</code>, for the Eikon data service API which is installed via <code>pip install eikon</code>.
 If you have a subscription to the Thomson Reuters Eikon data services, 
you can use the Python package to programmatically retrieve historical 
as well as streaming structured and unstructured data from the unified 
API. A technical prerequisite is the execution of a local scripting 
proxy application managing the API access (see <a href="#eikon_proxy">Eikon scripting proxy for local, programmatic data access</a>).</p>
</div>
<div id="eikon_proxy" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/eikon_proxy.png" alt="eikon proxy">
</div>
<div class="title">Figure 3. Eikon scripting proxy for local, programmatic data access</div>
</div>
<div class="paragraph">
<p>If you are an Eikon subscriber and have an account for the <a href="https://developers.thomsonreuters.com/" target="_blank">Developer Community pages</a>, you find an overview of the Python - TR Eikon Scripting Library (EAP) under <a href="https://developers.thomsonreuters.com/tr-eikon-scripting-apis/python-tr-eikon-scripting-library-eap/quick-start" target="_blank">Quick Start</a>.</p>
</div>
<div class="paragraph">
<p>In order to use the scripting proxy for API access, the Eikon <code>app_id</code> needs to be set. You get it via the respective button of the scripting proxy application.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">eikon</span> <span class="keyword">as</span> ek  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: ek.set_app_id(<span class="string"><span class="delimiter">'</span><span class="content">YOUR_APP_ID</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: help(ek)  <i class="conum" data-value="3"></i><b>(3)</b>
Help on package eikon:

NAME
    eikon

DESCRIPTION
    eikon <span class="keyword">is</span> a Python library to access Thomson Reuters Data <span class="keyword">with</span> Python.
    It<span class="string"><span class="delimiter">'</span><span class="content">s usage requires:</span></span>
        - An Thomson Reuters Eikon login
        - The Eikon Scripting Proxy

PACKAGE CONTENTS
    Profile
    data_grid
    eikonError
    json_requests
    news_request
    streaming
    symbology
    time_series
    tools

FILE
    /.../python3<span class="float">.5</span>/site-packages/eikon/__init__.py</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the <code>eikon</code> package as <code>ek</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Sets the <code>app_id</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Shows the help text for the main module.</td>
</tr>
</tbody></table>
</div>
<div class="sect3">
<h4 id="_retrieving_historical_structured_data">3.4.1. Retrieving Historical Structured Data</h4>
<div class="paragraph">
<p>The retrieval of historical financial time series data is as straightforward as with the other wrappers used before.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">4</span>]: symbols = [<span class="string"><span class="delimiter">'</span><span class="content">AAPL.O</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">MSFT.O</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">GOOG.O</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">5</span>]: data = ek.get_timeseries(symbols[<span class="integer">0</span>],  <i class="conum" data-value="2"></i><b>(2)</b>
                                 start_date=<span class="string"><span class="delimiter">'</span><span class="content">2016-01-01</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="3"></i><b>(3)</b>
                                 end_date=<span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="4"></i><b>(4)</b>
                                 interval=<span class="string"><span class="delimiter">'</span><span class="content">daily</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="5"></i><b>(5)</b>
                                 fields=[<span class="string"><span class="delimiter">'</span><span class="content">*</span><span class="delimiter">'</span></span>])  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">6</span>]: data.keys()  <i class="conum" data-value="7"></i><b>(7)</b>
Out[<span class="integer">6</span>]: dict_keys([<span class="string"><span class="delimiter">'</span><span class="content">AAPL.O</span><span class="delimiter">'</span></span>])

In [<span class="integer">7</span>]: <span class="predefined">type</span>(data[<span class="string"><span class="delimiter">'</span><span class="content">AAPL.O</span><span class="delimiter">'</span></span>])  <i class="conum" data-value="8"></i><b>(8)</b>
Out[<span class="integer">7</span>]: pandas.core.frame.DataFrame

In [<span class="integer">8</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">AAPL.O</span><span class="delimiter">'</span></span>].info()  <i class="conum" data-value="9"></i><b>(9)</b>
Out[<span class="integer">8</span>]:
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">210</span> entries, <span class="integer">2016</span>-<span class="octal">01</span>-<span class="octal">04</span> to <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">31</span>
Data columns (total <span class="integer">6</span> columns):
HIGH      <span class="integer">210</span> non-null float64
CLOSE     <span class="integer">210</span> non-null float64
LOW       <span class="integer">210</span> non-null float64
OPEN      <span class="integer">210</span> non-null float64
COUNT     <span class="integer">210</span> non-null float64
VOLUME    <span class="integer">210</span> non-null float64
dtypes: float64(<span class="integer">6</span>)
memory usage: <span class="float">11.5</span> KB

In [<span class="integer">9</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">AAPL.O</span><span class="delimiter">'</span></span>].tail()  <i class="conum" data-value="10"></i><b>(10)</b>
Out[<span class="integer">9</span>]:
            HIGH    CLOSE   LOW     OPEN    COUNT     VOLUME
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">25</span>  <span class="float">118.36</span>  <span class="float">118.25</span>  <span class="float">117.31</span>  <span class="float">117.95</span>  <span class="float">257396.0</span>  <span class="float">48128970.0</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">26</span>  <span class="float">115.70</span>  <span class="float">115.59</span>  <span class="float">113.31</span>  <span class="float">114.31</span>  <span class="float">348946.0</span>  <span class="float">66134219.0</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">27</span>  <span class="float">115.86</span>  <span class="float">114.48</span>  <span class="float">114.10</span>  <span class="float">115.39</span>  <span class="float">153097.0</span>  <span class="float">34562045.0</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span>  <span class="float">115.21</span>  <span class="float">113.72</span>  <span class="float">113.45</span>  <span class="float">113.87</span>  <span class="float">207753.0</span>  <span class="float">37861662.0</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">31</span>  <span class="float">114.23</span>  <span class="float">113.54</span>  <span class="float">113.20</span>  <span class="float">113.65</span>  <span class="float">137491.0</span>  <span class="float">26419398.0</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Defines a few symbols as a <code>list</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The central line of code that retrieves data for the first symbol …​</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>…​ for the given start data and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>…​ the given end data.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The time interval is here chosen to be <code>daily</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>All fields are requested.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>The function <code>get_timeseries</code> returns a dictionary object with the symbol(s) as keys.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>The values corresponding to each key are <code>DataFrame</code> objects.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>This provides an overview of the data stored in the <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>The final five rows of data are shown.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The code above more or less replicates the data retrieval for 
end-of-day values from sources like Google Finance. The beauty of 
working with a professional data service API comes when one wishes to 
work with multiple symbols and in particular with a different 
granularity of the financial data, i.e. other time intervals.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">10</span>]: %%time
          data = ek.get_timeseries(symbols,  <i class="conum" data-value="1"></i><b>(1)</b>
                                   start_date=<span class="string"><span class="delimiter">'</span><span class="content">2016-10-28</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="2"></i><b>(2)</b>
                                   end_date=<span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="3"></i><b>(3)</b>
                                   interval=<span class="string"><span class="delimiter">'</span><span class="content">minute</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="4"></i><b>(4)</b>
                                   fields=[<span class="string"><span class="delimiter">'</span><span class="content">*</span><span class="delimiter">'</span></span>])
         CPU times: user <span class="float">20.1</span> ms, sys: <span class="float">1.52</span> ms, total: <span class="float">21.7</span> ms
         Wall time: <span class="integer">466</span> ms

In [<span class="integer">11</span>]: data.keys()  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">11</span>]: dict_keys([<span class="string"><span class="delimiter">'</span><span class="content">GOOG.O</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">MSFT.O</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">AAPL.O</span><span class="delimiter">'</span></span>])

In [<span class="integer">12</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">GOOG.O</span><span class="delimiter">'</span></span>].head()  <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">12</span>]:
                    HIGH    LOW       OPEN    CLOSE   COUNT VOLUME
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span> <span class="integer">13</span>:<span class="integer">31</span>:<span class="octal">00</span> <span class="float">809.94</span>  <span class="float">807.1200</span>  <span class="float">808.35</span>  <span class="float">808.66</span>  <span class="float">391.0</span> <span class="float">113980.0</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span> <span class="integer">13</span>:<span class="integer">32</span>:<span class="octal">00</span> <span class="float">808.51</span>  <span class="float">803.8200</span>  <span class="float">808.46</span>  <span class="float">804.53</span>  <span class="float">317.0</span> <span class="float">51515.0</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span> <span class="integer">13</span>:<span class="integer">33</span>:<span class="octal">00</span> <span class="float">804.77</span>  <span class="float">799.3000</span>  <span class="float">804.12</span>  <span class="float">799.93</span>  <span class="float">526.0</span> <span class="float">88361.0</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span> <span class="integer">13</span>:<span class="integer">34</span>:<span class="octal">00</span> <span class="float">800.40</span>  <span class="float">798.1200</span>  <span class="float">799.74</span>  <span class="float">798.12</span>  <span class="float">374.0</span> <span class="float">55968.0</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span> <span class="integer">13</span>:<span class="integer">35</span>:<span class="octal">00</span> <span class="float">798.99</span>  <span class="float">796.4801</span>  <span class="float">798.61</span>  <span class="float">797.30</span>  <span class="float">158.0</span> <span class="float">24352.0</span>

In [<span class="integer">13</span>]: <span class="keyword">for</span> sym <span class="keyword">in</span> symbols:
             print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="delimiter">'</span></span> + sym + <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="delimiter">'</span></span>, data[sym].ix[-<span class="integer">10</span>:-<span class="integer">7</span>])  <i class="conum" data-value="7"></i><b>(7)</b>

AAPL.O
                     HIGH    LOW     OPEN    CLOSE    COUNT  VOLUME
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span> <span class="integer">19</span>:<span class="integer">52</span>:<span class="octal">00</span>  <span class="float">113.79</span>  <span class="float">113.66</span>  <span class="float">113.76</span>  <span class="float">113.665</span>  <span class="float">602.0</span>  <span class="float">112070.0</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span> <span class="integer">19</span>:<span class="integer">53</span>:<span class="octal">00</span>  <span class="float">113.72</span>  <span class="float">113.66</span>  <span class="float">113.67</span>  <span class="float">113.675</span>  <span class="float">406.0</span>   <span class="float">64534.0</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span> <span class="integer">19</span>:<span class="integer">54</span>:<span class="octal">00</span>  <span class="float">113.75</span>  <span class="float">113.67</span>  <span class="float">113.68</span>  <span class="float">113.720</span>  <span class="float">795.0</span>  <span class="float">123150.0</span>

MSFT.O
                     HIGH   LOW     OPEN    CLOSE   COUNT  VOLUME
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span> <span class="integer">19</span>:<span class="integer">52</span>:<span class="octal">00</span>  <span class="float">59.95</span>  <span class="float">59.890</span>  <span class="float">59.935</span>  <span class="float">59.890</span>  <span class="float">460.0</span>  <span class="float">110001.0</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span> <span class="integer">19</span>:<span class="integer">53</span>:<span class="octal">00</span>  <span class="float">59.91</span>  <span class="float">59.870</span>  <span class="float">59.890</span>  <span class="float">59.875</span>  <span class="float">459.0</span>   <span class="float">82812.0</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span> <span class="integer">19</span>:<span class="integer">54</span>:<span class="octal">00</span>  <span class="float">59.96</span>  <span class="float">59.875</span>  <span class="float">59.875</span>  <span class="float">59.950</span>  <span class="float">802.0</span>  <span class="float">152067.0</span>

GOOG.O
                     HIGH      LOW      OPEN    CLOSE   COUNT  VOLUME
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span> <span class="integer">19</span>:<span class="integer">52</span>:<span class="octal">00</span>  <span class="float">795.7143</span>  <span class="float">794.89</span>  <span class="float">795.630</span>  <span class="float">794.97</span>  <span class="float">122.0</span>  <span class="float">19341.0</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span> <span class="integer">19</span>:<span class="integer">53</span>:<span class="octal">00</span>  <span class="float">794.8900</span>  <span class="float">794.01</span>  <span class="float">794.890</span>  <span class="float">794.11</span>  <span class="float">126.0</span>  <span class="float">20794.0</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span> <span class="integer">19</span>:<span class="integer">54</span>:<span class="octal">00</span>  <span class="float">794.2500</span>  <span class="float">793.90</span>  <span class="float">794.025</span>  <span class="float">794.25</span>  <span class="float">166.0</span>  <span class="float">31381.0</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Data is retrieved for all symbols at once.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The time interval …​</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>…​ is drastically shortened.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The function call retrieves minute bars for the symbols.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The return <code>dict</code> object has now all symbols as keys.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Prints the first five rows for the Google, Inc. data set.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Prints three (arbitrary) data rows from every <code>DataFrame</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The code above illustrates how convenient it is to retrieve 
historical financial time series data from the Eikon API with Python. By
 default, the function <code>get_timeseries</code> provides the following options for the <code>interval</code> parameter: <code>tick</code>, <code>minute</code>, <code>hour</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>, <code>quarterly</code> and <code>yearly</code>.
 This gives all the flexibility needed in an algorithmic trading 
context — in particular, when combined with the resampling capabilities 
of pandas as shown in the code below.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">14</span>]: %%time
         data = ek.get_timeseries(symbols[<span class="integer">0</span>],
                                  start_date=<span class="string"><span class="delimiter">'</span><span class="content">2016-12-12 15:00:00</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="1"></i><b>(1)</b>
                                  end_date=<span class="string"><span class="delimiter">'</span><span class="content">2016-12-13 16:00:00</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="2"></i><b>(2)</b>
                                  interval=<span class="string"><span class="delimiter">'</span><span class="content">tick</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="3"></i><b>(3)</b>
                                  fields=[<span class="string"><span class="delimiter">'</span><span class="content">*</span><span class="delimiter">'</span></span>])
CPU times: user <span class="integer">289</span> ms, sys: <span class="float">11.3</span> ms, total: <span class="integer">301</span> ms
Wall time: <span class="float">5.58</span> s

In [<span class="integer">15</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">AAPL.O</span><span class="delimiter">'</span></span>].info()  <i class="conum" data-value="4"></i><b>(4)</b>
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">50000</span> entries, <span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">13</span> <span class="integer">14</span>:<span class="integer">59</span>:<span class="float">38.159000</span> to <span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">13</span> <span class="integer">15</span>:<span class="integer">59</span>:<span class="float">59.420000</span>
Data columns (total <span class="integer">2</span> columns):
VALUE     <span class="integer">39791</span> non-null float64
VOLUME    <span class="integer">50000</span> non-null float64
dtypes: float64(<span class="integer">2</span>)
memory usage: <span class="float">1.1</span> MB

In [<span class="integer">16</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">AAPL.O</span><span class="delimiter">'</span></span>].head()  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">16</span>]:
                       VALUE   VOLUME
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">13</span> <span class="integer">14</span>:<span class="integer">59</span>:<span class="float">38.159</span> <span class="float">115.05</span>  <span class="float">300.0</span>
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">13</span> <span class="integer">14</span>:<span class="integer">59</span>:<span class="float">38.321</span> <span class="float">115.04</span>  <span class="float">100.0</span>
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">13</span> <span class="integer">14</span>:<span class="integer">59</span>:<span class="float">38.940</span> <span class="float">115.04</span>  <span class="float">100.0</span>
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">13</span> <span class="integer">14</span>:<span class="integer">59</span>:<span class="float">39.189</span> NaN      <span class="float">10.0</span>
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">13</span> <span class="integer">14</span>:<span class="integer">59</span>:<span class="float">39.753</span> <span class="float">115.05</span>  <span class="float">100.0</span>

In [<span class="integer">17</span>]: resampled = data[<span class="string"><span class="delimiter">'</span><span class="content">AAPL.O</span><span class="delimiter">'</span></span>].resample(<span class="string"><span class="delimiter">'</span><span class="content">30s</span><span class="delimiter">'</span></span>).last()  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">18</span>]: resampled.tail()  <i class="conum" data-value="7"></i><b>(7)</b>
                   VALUE     VOLUME
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">13</span> <span class="integer">15</span>:<span class="integer">57</span>:<span class="integer">30</span> <span class="float">114.9800</span>  <span class="float">100.0</span>
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">13</span> <span class="integer">15</span>:<span class="integer">58</span>:<span class="octal">00</span> <span class="float">115.0389</span>  <span class="float">25.0</span>
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">13</span> <span class="integer">15</span>:<span class="integer">58</span>:<span class="integer">30</span> <span class="float">114.9800</span>  <span class="float">100.0</span>
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">13</span> <span class="integer">15</span>:<span class="integer">59</span>:<span class="octal">00</span> <span class="float">114.9900</span>  <span class="float">100.0</span>
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">13</span> <span class="integer">15</span>:<span class="integer">59</span>:<span class="integer">30</span> <span class="float">114.9600</span>  <span class="float">100.0</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>A time interval of …​</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>…​ one hour is chosen (due to data retrieval limits).</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The <code>interval</code> parameter is set to <code>tick</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Close to 40,000 price ticks are observed for the interval.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The data set itself is incomplete in larger parts.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The tick data is resampled to a 30 seconds interval length (simply by taking the last value in the relevant interval) …​</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>…​ which is reflected in the <code>DatetimeIndex</code> of the new <code>DataFrame</code> object.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_retrieving_historical_unstructured_data">3.4.2. Retrieving Historical Unstructured Data</h4>
<div class="paragraph">
<p>A major strength of working with the Eikon API via Python is the easy
 retrieval of unstructured data — which can then be parsed and analyzed 
with Python packages for natural language processing (NLP). Such a 
procedure is as simple and straightforward as for financial time series 
data. The code that follows retrieves news headlines for a fixed time 
interval which includes Apple, Inc. as a company as well as “iPhone” as a
 word. A maximum of five hits is displayed.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">19</span>]: headlines = ek.get_news_headlines(query=<span class="string"><span class="delimiter">'</span><span class="content">R:AAPL.O iphone</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="1"></i><b>(1)</b>
                                           headlines_count=<span class="integer">5</span>,  <i class="conum" data-value="2"></i><b>(2)</b>
                                           date_from=<span class="string"><span class="delimiter">'</span><span class="content">2016-1-1</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="3"></i><b>(3)</b>
                                           date_to=<span class="string"><span class="delimiter">'</span><span class="content">2016-12-20</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">20</span>]: headlines  <i class="conum" data-value="5"></i><b>(5)</b>
versionCreated          text                          storyId           sourceCode
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">16</span> <span class="integer">16</span>:<span class="integer">34</span>:<span class="float">56.032</span> Facebook underreported ...    ...:nL4N1EB4DZ:<span class="integer">1</span>  NS:RTRS
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">16</span> <span class="integer">15</span>:<span class="integer">29</span>:<span class="float">27.186</span> Apple får sälja iPhone <span class="integer">7</span> ...  ...:nFNWR6sQ2:<span class="integer">1</span>   NS:FNW
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">16</span> <span class="integer">09</span>:<span class="integer">48</span>:<span class="float">49.195</span> Apple can sell iPhone <span class="integer">7</span>s ...  ...:nL4N1EB305:<span class="integer">1</span>  NS:RTRS
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">15</span> <span class="integer">18</span>:<span class="integer">24</span>:<span class="float">34.508</span> BUZZ-iPhone supplier ...      ...:nL1N1EA1JG:<span class="integer">1</span>  NS:RTRS
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">14</span> <span class="integer">20</span>:<span class="integer">19</span>:<span class="float">21.000</span> Apple<span class="string"><span class="delimiter">'</span><span class="content">s iPhone Sale ...       ...:nNRA31h3uu:1  NS:MIDTRD</span></span>

In [<span class="integer">21</span>]: story_id = headlines.iloc[<span class="integer">0</span>]  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">22</span>]: story_id  <i class="conum" data-value="7"></i><b>(7)</b>
Out[<span class="integer">22</span>]:
versionCreated                           <span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">16</span> <span class="integer">16</span>:<span class="integer">34</span>:<span class="float">56.032000</span>
text              Facebook underreported iPhone traffic <span class="keyword">for</span> some...
storyId                urn:newsml:reuters.com:<span class="integer">20161216</span>:nL4N1EB4DZ:<span class="integer">1</span>
sourceCode                                                  NS:RTRS
Name: <span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">16</span> <span class="integer">16</span>:<span class="integer">34</span>:<span class="float">56.032000</span>, dtype: <span class="predefined">object</span>

In [<span class="integer">23</span>]: news_text = ek.get_news_story(story_id)  <i class="conum" data-value="8"></i><b>(8)</b>
         Request data: {<span class="string"><span class="delimiter">'</span><span class="content">attributionCode</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">NS:RTRS</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">storyId</span><span class="delimiter">'</span></span>:
                        <span class="string"><span class="delimiter">'</span><span class="content">urn:newsml:reuters.com:20161216:nL4N1EB4DZ:1</span><span class="delimiter">'</span></span>,
                        <span class="string"><span class="delimiter">'</span><span class="content">productName</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">F3A59D7D3B635A1FC9F3F</span><span class="delimiter">'</span></span>}

In [<span class="integer">24</span>]: <span class="keyword">from</span> <span class="include">IPython.display</span> <span class="keyword">import</span> <span class="include">HTML</span>  <i class="conum" data-value="9"></i><b>(9)</b>

In [<span class="integer">25</span>]: HTML(news_text)  <i class="conum" data-value="10"></i><b>(10)</b></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre>Dec 16 (Reuters) - Facebook Inc FB.O said it had underreported the number of views on iPhone of content published by some publishers using its Instant Articles platform between Sept. 20 and Nov. 30.
Publishers make money through ads on their posts.
Facebook said on Friday that a recent update to one of its metrics had led to the issue and affected publishers using one of its legacy platforms. Traffic numbers for iPad and Android devices were not affected. (http://bit.ly/2hje5ZP)
The company apologized in September for an error in the way it measured a key measure of video viewership that significantly amplified users' viewing times on its platform. (nL3N1BZ4AU)
The latest issue has been fixed and updated estimates will be provided, Facebook said.
Facebook also said it was updating the way it calculates potential audience size for ads as a way to give advertisers a better view of the number of people they can expect to reach.

(Reporting by Rishika Sadam in Bengaluru; Editing by Ted Kerr)
(( Rishika.S@thomsonreuters.com ;)(within U.S. +1 646 223 8780, outside U.S. +91 80 6749 6997) (; Reuters Messaging:)(Reuters Messaging: rishika.s.thomsonreuters.com@reuters.net ))

Keywords: FACEBOOK-PUBLISHERS/</pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The <code>query</code> parameter for the retrieval operation.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Sets the maximum number of hits to five.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Defines the interval …​</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>…​ for which to look for news headlines.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Gives out the results object (output shortened).</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>One particular headline is picked …​</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>…​ and the <code>story_id</code> shown.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>This retrieves the news text as html code.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>In Jupyter Notebook, for example, the html code …​</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>…​ can be rendered for better reading.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>This concludes the illustration of the Python wrapper package for the Thomson Reuters Eikon data API.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="storing_data">3.5. Storing Financial Data Efficiently</h3>
<div class="paragraph">
<p>In algorithmic trading, one of the most important scenarios for the 
management of data sets is “retrieve once, use multiple times”. Or from 
an input-output (IO) perspective, it is "`write once, read multiple 
times". In the first case, data might be retrieved from a web service 
and then used to backtest a strategy multiple times based on a 
temporary, in-memory copy of the data set. In the second case, tick data
 that is received continually is written to disk and later on again used
 multiple times for certain manipulations (like aggregations) in 
combination with a backtesting procedure.</p>
</div>
<div class="paragraph">
<p>This section assumes that the in-memory data structure to store the data is a <code>pandas</code> <code>DataFrame</code> object, no matter from which source the data is acquired (from a CSV file, a web service, etc.).</p>
</div>
<div class="paragraph">
<p>To have a somewhat meaningful data set available in terms of size, 
the section uses a sample financial data set generated by the use of 
pseudo-random numbers. <a href="#sample_data">Module with a function to generate sample financial data</a> presents the Python module with a function called <code>generate_sample_data</code> that accomplishes the task.</p>
</div>
<div class="paragraph">
<p>In principle, this function allows to generate a sample financial 
data set in tabular form of arbitrary size (available memory of course 
sets a limit).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">from</span> <span class="include">sample_data</span> <span class="keyword">import</span> <span class="include">generate_sample_data</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: print(generate_sample_data(rows=<span class="integer">5</span>, cols=<span class="integer">4</span>))  <i class="conum" data-value="2"></i><b>(2)</b>
                            No0         No1         No2         No3
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="octal">01</span> <span class="octal">00</span>:<span class="octal">00</span>:<span class="octal">00</span>  <span class="float">100.000000</span>  <span class="float">100.000000</span>  <span class="float">100.000000</span>  <span class="float">100.000000</span>
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="octal">01</span> <span class="octal">00</span>:<span class="octal">01</span>:<span class="octal">00</span>  <span class="float">102.434941</span>  <span class="float">100.232440</span>  <span class="float">101.204826</span>   <span class="float">98.636925</span>
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="octal">01</span> <span class="octal">00</span>:<span class="octal">02</span>:<span class="octal">00</span>  <span class="float">103.501514</span>  <span class="float">101.391267</span>  <span class="float">100.694098</span>   <span class="float">97.336099</span>
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="octal">01</span> <span class="octal">00</span>:<span class="octal">03</span>:<span class="octal">00</span>  <span class="float">102.182721</span>   <span class="float">99.590655</span>  <span class="float">100.043386</span>   <span class="float">99.557755</span>
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="octal">01</span> <span class="octal">00</span>:<span class="octal">04</span>:<span class="octal">00</span>  <span class="float">101.411610</span>  <span class="float">100.213770</span>   <span class="float">99.391374</span>   <span class="float">98.349621</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the function from the Python script.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Prints a sample financial data set with five rows and four columns.</td>
</tr>
</tbody></table>
</div>
<div class="sect3">
<h4 id="_storing_dataframe_objects">3.5.1. Storing DataFrame Objects</h4>
<div class="paragraph">
<p>The storage of a <code>pandas</code> <code>DataFrame</code> object as a whole is made simple by the <code>pandas</code> <code>HDFStore</code> wrapper functionality for the <a href="http://hdfgroup.org/" target="_blank">HDF5</a> binary storage library. It allows to dump complete <code>DataFrame</code>
 objects in a single step to a file-based database object. To illustrate
 the implementation, the first step is to create a sample data set of 
meaningful size — here the size of the <code>DataFrame</code> generated is about 420 MB.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

In [<span class="integer">2</span>]: <span class="keyword">from</span> <span class="include">sample_data</span> <span class="keyword">import</span> <span class="include">generate_sample_data</span>

In [<span class="integer">3</span>]: %time data = generate_sample_data(rows=<span class="float">5e6</span>, cols=<span class="integer">10</span>)  <i class="conum" data-value="1"></i><b>(1)</b>
CPU times: user <span class="float">1.93</span> s, sys: <span class="integer">385</span> ms, total: <span class="float">2.32</span> s
Wall time: <span class="float">2.32</span> s

In [<span class="integer">4</span>]: data.info()
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">5000000</span> entries, <span class="integer">2017</span>-<span class="octal">01</span>-<span class="octal">01</span> <span class="octal">00</span>:<span class="octal">00</span>:<span class="octal">00</span> to <span class="integer">2026</span>-<span class="octal">07</span>-<span class="octal">05</span> <span class="octal">05</span>:<span class="integer">19</span>:<span class="octal">00</span>
Freq: T
Data columns (total <span class="integer">10</span> columns):
No0    float64
No1    float64
No2    float64
No3    float64
No4    float64
No5    float64
No6    float64
No7    float64
No8    float64
No9    float64
dtypes: float64(<span class="integer">10</span>)
memory usage: <span class="float">419.6</span> MB</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>A sample financial data set with 5,000,000 rows and ten columns is generated; the generation takes 2.3 seconds.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The second step is to open a <code>HDFStore</code> object (i.e. HDF5 database file) on disk and to write the <code>DataFrame</code> object to it.<sup class="footnote">[<a id="_footnoteref_18" class="footnote" href="#_footnote_18" title="View footnote.">18</a>]</sup> The size on disk of about 440 MB is a bit larger than for the in-memory <code>DataFrame</code>
 object. However, the writing speed is about an order of magnitude 
faster than the in-memory generation of the sample data set. Working in 
Python with binary stores like HDF5 database files usually gets you 
writing speeds close to the theoretical maximum of the hardware 
available.<sup class="footnote">[<a id="_footnoteref_19" class="footnote" href="#_footnote_19" title="View footnote.">19</a>]</sup></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">5</span>]: h5 = pd.HDFStore(<span class="string"><span class="delimiter">'</span><span class="content">data.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">w</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">6</span>]: %time h5[<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>] = data  <i class="conum" data-value="2"></i><b>(2)</b>
CPU times: user <span class="float">6.98</span> ms, sys: <span class="integer">163</span> ms, total: <span class="integer">170</span> ms
Wall time: <span class="integer">297</span> ms

In [<span class="integer">7</span>]: h5  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">7</span>]:
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.io.pytables.HDFStore</span><span class="delimiter">'</span></span>&gt;
File path: data.h5
/data            frame        (shape-&gt;[<span class="integer">5000000</span>,<span class="integer">10</span>])

In [<span class="integer">8</span>]: ls -n data.*  <i class="conum" data-value="4"></i><b>(4)</b>
-rw-r--r--<span class="error">@</span> <span class="integer">1</span> <span class="integer">503</span>  <span class="integer">20</span>  <span class="integer">440007192</span> Nov  <span class="integer">7</span> <span class="integer">09</span>:<span class="integer">24</span> data.h5

In [<span class="integer">9</span>]: h5.close()  <i class="conum" data-value="5"></i><b>(5)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This opens the database file on disk for writing (and overwrites a potentially existing file with the same name).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Writing the <code>DataFrame</code> object to disk takes only about a third of a second.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Print out meta information for the database file.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Shows the file size on disk of about 440 MB.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Closes the database file.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The third step is to read the data from the file-based <code>HDFStore</code> object. Reading also generally takes place close to the theoretical maximum speed.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">10</span>]: h5 = pd.HDFStore(<span class="string"><span class="delimiter">'</span><span class="content">data.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">11</span>]: %time data_copy = h5[<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="2"></i><b>(2)</b>
CPU times: user <span class="float">6.77</span> ms, sys: <span class="integer">230</span> ms, total: <span class="integer">237</span> ms
Wall time: <span class="integer">240</span> ms

In [<span class="integer">12</span>]: data_copy.info()
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">5000000</span> entries, <span class="integer">2017</span>-<span class="octal">01</span>-<span class="octal">01</span> <span class="octal">00</span>:<span class="octal">00</span>:<span class="octal">00</span> to <span class="integer">2026</span>-<span class="octal">07</span>-<span class="octal">05</span> <span class="octal">05</span>:<span class="integer">19</span>:<span class="octal">00</span>
Freq: T
Data columns (total <span class="integer">10</span> columns):
No0    float64
No1    float64
No2    float64
No3    float64
No4    float64
No5    float64
No6    float64
No7    float64
No8    float64
No9    float64
dtypes: float64(<span class="integer">10</span>)
memory usage: <span class="float">419.6</span> MB

In [<span class="integer">13</span>]: h5.close()

In [<span class="integer">14</span>]: rm data.h5  <i class="conum" data-value="3"></i><b>(3)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Opens the database file for reading.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Reading takes about a quarter of a second.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>This line of code removes the data set.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>There is another, somewhat more flexible way of writing the data from a <code>DataFrame</code> object to an <code>HDFStore</code> object. To this end, one can use the <code>to_hdf</code> method of the <code>DataFrame</code> object and sets the <code>format</code> parameter to <code>table</code> (see the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_hdf.html" target="_blank"><code>to_hdf</code> API reference page</a>). This allows the appending of new data to the <code>table</code>
 object on disk and also, for example, the searching over the data on 
disk which is not possible with the first approach. The price to pay are
 slower writing and reading speeds.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

In [<span class="integer">2</span>]: <span class="keyword">from</span> <span class="include">sample_data</span> <span class="keyword">import</span> <span class="include">generate_sample_data</span>

In [<span class="integer">3</span>]: %time data = generate_sample_data(rows=<span class="float">5e6</span>, cols=<span class="integer">10</span>).round(<span class="integer">2</span>)
CPU times: user <span class="float">1.95</span> s, sys: <span class="integer">396</span> ms, total: <span class="float">2.34</span> s
Wall time: <span class="float">2.34</span> s

In [<span class="integer">4</span>]: %time data.to_hdf(<span class="string"><span class="delimiter">'</span><span class="content">data.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>, format=<span class="string"><span class="delimiter">'</span><span class="content">table</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>
CPU times: user <span class="float">2.96</span> s, sys: <span class="integer">345</span> ms, total: <span class="float">3.3</span> s
Wall time: <span class="float">3.55</span> s

In [<span class="integer">5</span>]: ls -n data.*  <i class="conum" data-value="2"></i><b>(2)</b>
-rw-r--r--<span class="error">@</span> <span class="integer">1</span> <span class="integer">503</span>  <span class="integer">20</span>  <span class="integer">446929532</span> Nov  <span class="integer">7</span> <span class="integer">10</span>:<span class="integer">13</span> data.h5

In [<span class="integer">6</span>]: %time data_copy = pd.read_hdf(<span class="string"><span class="delimiter">'</span><span class="content">data.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="3"></i><b>(3)</b>
CPU times: user <span class="integer">469</span> ms, sys: <span class="integer">216</span> ms, total: <span class="integer">685</span> ms
Wall time: <span class="integer">687</span> ms

In [<span class="integer">7</span>]: data_copy.info()
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">5000000</span> entries, <span class="integer">2017</span>-<span class="octal">01</span>-<span class="octal">01</span> <span class="octal">00</span>:<span class="octal">00</span>:<span class="octal">00</span> to <span class="integer">2026</span>-<span class="octal">07</span>-<span class="octal">05</span> <span class="octal">05</span>:<span class="integer">19</span>:<span class="octal">00</span>
Freq: T
Data columns (total <span class="integer">10</span> columns):
No0    float64
No1    float64
No2    float64
No3    float64
No4    float64
No5    float64
No6    float64
No7    float64
No8    float64
No9    float64
dtypes: float64(<span class="integer">10</span>)
memory usage: <span class="float">419.6</span> MB</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This defines the writing format to be of type <code>table</code>; writing is much slower with about 3.5 seconds.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>This format type involves a bit more overhead and lead to a somewhat increased file size.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Reading is also much slower in this application scenario.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The difference in the storage approach becomes apparent when opening the <code>HDFStore</code> object.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

In [<span class="integer">2</span>]: h5 = pd.HDFStore(<span class="string"><span class="delimiter">'</span><span class="content">data.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>)

In [<span class="integer">3</span>]: h5
Out[<span class="integer">3</span>]:
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.io.pytables.HDFStore</span><span class="delimiter">'</span></span>&gt;
File path: data.h5
/data  frame_table  (typ-&gt;appendable,nrows-&gt;<span class="integer">5000000</span>,ncols-&gt;<span class="integer">10</span>,indexers-&gt;[index])

In [<span class="integer">4</span>]: h5.close()</code></pre>
</div>
</div>
<div class="paragraph">
<p>In practice, the advantage of this approach is that one can work with the <code>table_frame</code> object on disk like with any other <code>table</code> object of the <code>PyTables</code> package which is used by <code>pandas</code> in this context. This provides access to certain basic capabilities — like, for instance, appending rows to a <code>table</code> object — of the <a href="http://www.pytables.org/" target="_blank"><code>PyTables</code></a> package.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">tables</span> <span class="keyword">as</span> tb  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: h5 = tb.open_file(<span class="string"><span class="delimiter">'</span><span class="content">data.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: h5  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">3</span>]:
File(filename=data.h5, title=<span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>, mode=<span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>, root_uep=<span class="string"><span class="delimiter">'</span><span class="content">/</span><span class="delimiter">'</span></span>,
     filters=Filters(complevel=<span class="integer">0</span>, shuffle=<span class="predefined-constant">False</span>, fletcher32=<span class="predefined-constant">False</span>,
     least_significant_digit=<span class="predefined-constant">None</span>))
/ (RootGroup) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
/data (Group) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
/data/table (Table(<span class="integer">5000000</span>,)) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
  description := {
  <span class="string"><span class="delimiter">"</span><span class="content">index</span><span class="delimiter">"</span></span>: Int64Col(shape=(), dflt=<span class="integer">0</span>, pos=<span class="integer">0</span>),
  <span class="string"><span class="delimiter">"</span><span class="content">values_block_0</span><span class="delimiter">"</span></span>: Float64Col(shape=(<span class="integer">10</span>,), dflt=<span class="float">0.0</span>, pos=<span class="integer">1</span>)}
  byteorder := <span class="string"><span class="delimiter">'</span><span class="content">little</span><span class="delimiter">'</span></span>
  chunkshape := (<span class="integer">2978</span>,)
  autoindex := <span class="predefined-constant">True</span>
  colindexes := {
    <span class="string"><span class="delimiter">"</span><span class="content">index</span><span class="delimiter">"</span></span>: Index(<span class="integer">6</span>, medium, shuffle, zlib(<span class="integer">1</span>)).is_csi=<span class="predefined-constant">False</span>}

In [<span class="integer">4</span>]: h5.root.data.table[:<span class="integer">3</span>]  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">4</span>]:
array([ (<span class="integer">1483228800000000000</span>, [<span class="float">100.0</span>, <span class="float">100.0</span>, ... <span class="float">100.0</span>, <span class="float">100.0</span>]),
       (<span class="integer">1483228860000000000</span>, [<span class="float">99.42</span>, <span class="float">99.78</span>, ... <span class="float">100.45</span>, <span class="float">100.13</span>]),
       (<span class="integer">1483228920000000000</span>, [<span class="float">100.29</span>, <span class="float">98.99</span>, ... <span class="float">102.01</span>, <span class="float">100.6</span>])],
      dtype=[(<span class="string"><span class="delimiter">'</span><span class="content">index</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">&lt;i8</span><span class="delimiter">'</span></span>), (<span class="string"><span class="delimiter">'</span><span class="content">values_block_0</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">&lt;f8</span><span class="delimiter">'</span></span>, (<span class="integer">10</span>,))])

In [<span class="integer">5</span>]: h5.close()  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">6</span>]: rm data/data.h5  <i class="conum" data-value="6"></i><b>(6)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the <code>PyTables</code> package.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Opens the database file for reading.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Shows the contents of the database file.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Prints the first three rows in the table.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Closes the database …​</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>…​ and removes the file from disk.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Although this second approach provides <em>more</em> flexibility, it does not open the doors to the full capabilities of the <code>PyTables</code>
 package. Nevertheless, the two approaches introduced in this 
sub-section are convenient and efficient when you are working with more 
or less <em>immutable data sets that fit into memory</em>. Nowadays, 
algorithmic trading, however, has to deal in general with continuously 
and rapidly growing data sets like, for example, tick data with regard 
to stock prices or foreign exchange rates. To cope with the requirements
 of such a scenario, alternative approaches might prove useful.</p>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Using the <code>HDFStore</code> wrapper for the HDF5 binary storage standard, <code>pandas</code>
 is able to write and read financial data almost at the maximum speed 
the available hardware allows. Exports to other file-based formats, like
 CSV, are generally much slower alternatives.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_using_tstables">3.5.2. Using TsTables</h4>
<div class="paragraph">
<p>The <code>PyTables</code> package — with import name <code>tables</code> — is a wrapper for the HDF5 binary storage library that is also used by <code>pandas</code> for its <code>HDFStore</code> implementation presented in the previous sub-section. The <code>TsTables</code> package (see <a href="https://github.com/multidis/tstables" target="_blank">Github page of the package</a>)
 in turn is dedicated to the efficient handling of large financial time 
series data sets based on the HDF5 binary storage library. It is 
effectively an enhancement of the <code>PyTables</code> package and adds
 support for time series data to its capabilities. It implements a 
hierarchical storage approach that allows for a fast retrieval of data 
sub-sets selected by providing start and end dates and times, 
respectively. The major scenario supported by <code>TsTables</code> is "`write once, retrieve multiple times".</p>
</div>
<div class="paragraph">
<p>The set up illustrated in this sub-section is that data is 
continuously collected from a web source, professional data provider, 
etc. and is stored interim and in-memory in a <code>DataFrame</code> object. After a while or a certain number of data points retrieved, the collected data is then stored in a <code>TsTables</code> <code>table</code> object in a HDF5 database. First, the generation of the sample data.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">from</span> <span class="include">sample_data</span> <span class="keyword">import</span> <span class="include">generate_sample_data</span>

In [<span class="integer">2</span>]: data = generate_sample_data(rows=<span class="float">2.5e6</span>, cols=<span class="integer">5</span>, freq=<span class="string"><span class="delimiter">'</span><span class="content">1s</span><span class="delimiter">'</span></span>).round(<span class="integer">2</span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">3</span>]: data.info()
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">2500000</span> entries, <span class="integer">2017</span>-<span class="octal">01</span>-<span class="octal">01</span> <span class="octal">00</span>:<span class="octal">00</span>:<span class="octal">00</span> to <span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">29</span> <span class="integer">22</span>:<span class="integer">26</span>:<span class="integer">39</span>
Freq: S
Data columns (total <span class="integer">5</span> columns):
No0    float64
No1    float64
No2    float64
No3    float64
No4    float64
dtypes: float64(<span class="integer">5</span>)
memory usage: <span class="float">114.4</span> MB</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This generates a sample financial data set with 2,500,000 rows and 
five columns with a one second frequency; the sample data is rounded to 
two digits.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Second, some more imports and the creation of the <code>TsTables</code> <code>table</code> object. The major part is the definition of the <code>desc</code> class which provides the description for the <code>table</code> object’s data structure.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">4</span>]: <span class="keyword">import</span> <span class="include">tstables</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">5</span>]: <span class="keyword">import</span> <span class="include">tables</span> <span class="keyword">as</span> tb  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">6</span>]: <span class="keyword">class</span> <span class="class">desc</span>(tb.IsDescription):
   ...:     <span class="string"><span class="delimiter">'''</span><span class="content"> Description of TsTables table structure.</span><span class="content">
</span><span class="content">   ...:     </span><span class="delimiter">'''</span></span>
   ...:     timestamp = tb.Int64Col(pos=<span class="integer">0</span>)  <i class="conum" data-value="3"></i><b>(3)</b>
   ...:     No0 = tb.Float64Col(pos=<span class="integer">1</span>)  <i class="conum" data-value="4"></i><b>(4)</b>
   ...:     No1 = tb.Float64Col(pos=<span class="integer">2</span>)
   ...:     No2 = tb.Float64Col(pos=<span class="integer">3</span>)
   ...:     No3 = tb.Float64Col(pos=<span class="integer">4</span>)
   ...:     No4 = tb.Float64Col(pos=<span class="integer">5</span>)
   ...:

In [<span class="integer">7</span>]: h5 = tb.open_file(<span class="string"><span class="delimiter">'</span><span class="content">data.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">w</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">8</span>]: ts = h5.create_ts(<span class="string"><span class="delimiter">'</span><span class="content">/</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>, desc)  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">9</span>]: h5  <i class="conum" data-value="7"></i><b>(7)</b>
Out[<span class="integer">9</span>]:
File(filename=data.h5, title=<span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>, mode=<span class="string"><span class="delimiter">'</span><span class="content">w</span><span class="delimiter">'</span></span>, root_uep=<span class="string"><span class="delimiter">'</span><span class="content">/</span><span class="delimiter">'</span></span>,
     filters=Filters(complevel=<span class="integer">0</span>, shuffle=<span class="predefined-constant">False</span>, fletcher32=<span class="predefined-constant">False</span>,
                     least_significant_digit=<span class="predefined-constant">None</span>))
/ (RootGroup) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
/data (Group/Timeseries) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
/data/y2016 (Group) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
/data/y2016/m11 (Group) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
/data/y2016/m11/d07 (Group) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
/data/y2016/m11/d07/ts_data (Table(<span class="integer">0</span>,)) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
  description := {
  <span class="string"><span class="delimiter">"</span><span class="content">timestamp</span><span class="delimiter">"</span></span>: Int64Col(shape=(), dflt=<span class="integer">0</span>, pos=<span class="integer">0</span>),
  <span class="string"><span class="delimiter">"</span><span class="content">No0</span><span class="delimiter">"</span></span>: Float64Col(shape=(), dflt=<span class="float">0.0</span>, pos=<span class="integer">1</span>),
  <span class="string"><span class="delimiter">"</span><span class="content">No1</span><span class="delimiter">"</span></span>: Float64Col(shape=(), dflt=<span class="float">0.0</span>, pos=<span class="integer">2</span>),
  <span class="string"><span class="delimiter">"</span><span class="content">No2</span><span class="delimiter">"</span></span>: Float64Col(shape=(), dflt=<span class="float">0.0</span>, pos=<span class="integer">3</span>),
  <span class="string"><span class="delimiter">"</span><span class="content">No3</span><span class="delimiter">"</span></span>: Float64Col(shape=(), dflt=<span class="float">0.0</span>, pos=<span class="integer">4</span>),
  <span class="string"><span class="delimiter">"</span><span class="content">No4</span><span class="delimiter">"</span></span>: Float64Col(shape=(), dflt=<span class="float">0.0</span>, pos=<span class="integer">5</span>)}
  byteorder := <span class="string"><span class="delimiter">'</span><span class="content">little</span><span class="delimiter">'</span></span>
  chunkshape := (<span class="integer">1365</span>,)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td><code>TsTables</code> and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>…​ <code>PyTables</code> are imported.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The first column of the table is a <code>timestamp</code> represented as an <code>int</code> value.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>All data columns contain <code>float</code> values.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>This opens a new database file for writing.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The <code>TsTables</code> table is created at the root node, with name <code>data</code> and given the class-based description <code>desc</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Inspecting the database file reveals the basic principle behind the hierarchical structuring in years, months and days.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Third, the writing of the sample data stored in a <code>DataFrame</code> object to the <code>table</code> object on disk. One of the major benefits of <code>TsTables</code>
 is the convenience with which this operation is accomplished, namely by
 a simple method call. Even better that convenience here is coupled with
 speed. With regard to the structure in the database, <code>TsTables</code>
 chunks the data into sub-sets of a single day. In the example case 
where the frequency is set to one second, this translates into 24 x 60 x
 60 = 86,400 data rows per full day worth of data.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">11</span>]: %time ts.append(data)  <i class="conum" data-value="1"></i><b>(1)</b>
CPU times: user <span class="integer">289</span> ms, sys: <span class="integer">179</span> ms, total: <span class="integer">468</span> ms
Wall time: <span class="integer">490</span> ms
In [<span class="integer">12</span>]: h5  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">12</span>]:
File(filename=data.h5, title=<span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>, mode=<span class="string"><span class="delimiter">'</span><span class="content">w</span><span class="delimiter">'</span></span>, root_uep=<span class="string"><span class="delimiter">'</span><span class="content">/</span><span class="delimiter">'</span></span>, filters=Filters(
   complevel=<span class="integer">0</span>, shuffle=<span class="predefined-constant">False</span>, fletcher32=<span class="predefined-constant">False</span>, least_significant_digit=<span class="predefined-constant">None</span>))
/ (RootGroup) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
/data (Group/Timeseries) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
/data/y2016 (Group) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
/data/y2017 (Group) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
/data/y2017/m01 (Group) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
/data/y2017/m01/d01 (Group) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
/data/y2017/m01/d01/ts_data (Table(<span class="integer">86400</span>,)) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
  description := {
  <span class="string"><span class="delimiter">"</span><span class="content">timestamp</span><span class="delimiter">"</span></span>: Int64Col(shape=(), dflt=<span class="integer">0</span>, pos=<span class="integer">0</span>),
  <span class="string"><span class="delimiter">"</span><span class="content">No0</span><span class="delimiter">"</span></span>: Float64Col(shape=(), dflt=<span class="float">0.0</span>, pos=<span class="integer">1</span>),
  <span class="string"><span class="delimiter">"</span><span class="content">No1</span><span class="delimiter">"</span></span>: Float64Col(shape=(), dflt=<span class="float">0.0</span>, pos=<span class="integer">2</span>),
  <span class="string"><span class="delimiter">"</span><span class="content">No2</span><span class="delimiter">"</span></span>: Float64Col(shape=(), dflt=<span class="float">0.0</span>, pos=<span class="integer">3</span>),
  <span class="string"><span class="delimiter">"</span><span class="content">No3</span><span class="delimiter">"</span></span>: Float64Col(shape=(), dflt=<span class="float">0.0</span>, pos=<span class="integer">4</span>),
  <span class="string"><span class="delimiter">"</span><span class="content">No4</span><span class="delimiter">"</span></span>: Float64Col(shape=(), dflt=<span class="float">0.0</span>, pos=<span class="integer">5</span>)}
  byteorder := <span class="string"><span class="delimiter">'</span><span class="content">little</span><span class="delimiter">'</span></span>
  chunkshape := (<span class="integer">1365</span>,)
/data/y2017/m01/d02 (Group) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
/data/y2017/m01/d02/ts_data (Table(<span class="integer">86400</span>,)) <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
  description := {
...</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This appends the <code>DataFrame</code> object via a simple method call.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The <code>table</code> object shows 86,400 rows after the <code>append</code> operation.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Reading sub-sets of the data from a <code>TsTables</code> <code>table</code> object is generally really fast since this is what it is optimized for in the first place. In this regard, <code>TsTables</code> supports typical algorithmic trading applications, like backtesting, pretty well. Another contributing factor is that <code>TsTables</code> returns the data already as a <code>DataFrame</code> object such that additional conversions are not necessary in general.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">13</span>]: <span class="keyword">import</span> <span class="include">datetime</span>

In [<span class="integer">14</span>]: start = datetime.datetime(<span class="integer">2017</span>, <span class="integer">1</span>, <span class="integer">2</span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">15</span>]: end = datetime.datetime(<span class="integer">2017</span>,<span class="integer">1</span>, <span class="integer">3</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">16</span>]: %time subset = ts.read_range(start, end)  <i class="conum" data-value="3"></i><b>(3)</b>
CPU times: user <span class="float">10.1</span> ms, sys: <span class="float">5.76</span> ms, total: <span class="float">15.9</span> ms
Wall time: <span class="float">14.3</span> ms

In [<span class="integer">17</span>]: start = datetime.datetime(<span class="integer">2017</span>, <span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">12</span>, <span class="integer">30</span>, <span class="integer">0</span>)

In [<span class="integer">18</span>]: end = datetime.datetime(<span class="integer">2017</span>,<span class="integer">1</span>, <span class="integer">5</span>, <span class="integer">17</span>, <span class="integer">15</span>, <span class="integer">30</span>)

In [<span class="integer">19</span>]: %time subset = ts.read_range(start, end)
CPU times: user <span class="float">25.9</span> ms, sys: <span class="integer">12</span> ms, total: <span class="integer">38</span> ms
Wall time: <span class="float">37.4</span> ms

In [<span class="integer">20</span>]: subset.info()
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">276331</span> entries, <span class="integer">2017</span>-<span class="octal">01</span>-<span class="octal">02</span> <span class="integer">12</span>:<span class="integer">30</span>:<span class="octal">00</span> to <span class="integer">2017</span>-<span class="octal">01</span>-<span class="octal">05</span> <span class="integer">17</span>:<span class="integer">15</span>:<span class="integer">30</span>
Data columns (total <span class="integer">5</span> columns):
No0    <span class="integer">276331</span> non-null float64
No1    <span class="integer">276331</span> non-null float64
No2    <span class="integer">276331</span> non-null float64
No3    <span class="integer">276331</span> non-null float64
No4    <span class="integer">276331</span> non-null float64
dtypes: float64(<span class="integer">5</span>)
memory usage: <span class="float">12.6</span> MB

In [<span class="integer">21</span>]: h5.close()

In [<span class="integer">22</span>]: rm data/data.h5</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This defines the starting date and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>…​ end date for the data retrieval operation.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The <code>read_range</code> method takes the start and end dates as input; reading here is only a matter of a few milliseconds.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>New data that is retrieved during a day can be appended to the <code>TsTables</code> <code>table</code> object as illustrated before. The package is therefore a valuable addition to the capabilities of <code>pandas</code> in combination with <code>HDFStore</code> objects when it comes to the efficient storage and retrieval of (large) financial time series data sets over time.</p>
</div>
</div>
<div class="sect3">
<h4 id="_storing_data_with_sqlite3">3.5.3. Storing Data with SQLite3</h4>
<div class="paragraph">
<p>Financial times series data can also be written directly from a <code>DataFrame</code> object to a relational database like <code>SQLite3</code>.<sup class="footnote">[<a id="_footnoteref_20" class="footnote" href="#_footnote_20" title="View footnote.">20</a>]</sup>
 The use of a relational database might be useful in scenarios where the
 SQL query language is applied to implement more sophisticated analyses.
 With regard to speed and also disk usage, relational databases cannot, 
however, compare with the other approaches that rely on binary storage 
formats like HDF5.</p>
</div>
<div class="paragraph">
<p>The <code>DataFrame</code> class provides the method <code>to_sql</code> (see the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_sql.html" target="_blank"><code>to_sql</code> API reference page</a>) to write data to a table in a relational database.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">from</span> <span class="include">sample_data</span> <span class="keyword">import</span> <span class="include">generate_sample_data</span>

In [<span class="integer">2</span>]: %time data = generate_sample_data(<span class="float">1e6</span>, <span class="integer">5</span>, <span class="string"><span class="delimiter">'</span><span class="content">1min</span><span class="delimiter">'</span></span>).round(<span class="integer">2</span>)
CPU times: user <span class="integer">199</span> ms, sys: <span class="float">38.9</span> ms, total: <span class="integer">238</span> ms
Wall time: <span class="integer">237</span> ms

In [<span class="integer">3</span>]: data.info()  <i class="conum" data-value="1"></i><b>(1)</b>
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">1000000</span> entries, <span class="integer">2017</span>-<span class="octal">01</span>-<span class="octal">01</span> <span class="octal">00</span>:<span class="octal">00</span>:<span class="octal">00</span> to <span class="integer">2018</span>-<span class="integer">11</span>-<span class="integer">26</span> <span class="integer">10</span>:<span class="integer">39</span>:<span class="octal">00</span>
Freq: T
Data columns (total <span class="integer">5</span> columns):
No0    <span class="integer">1000000</span> non-null float64
No1    <span class="integer">1000000</span> non-null float64
No2    <span class="integer">1000000</span> non-null float64
No3    <span class="integer">1000000</span> non-null float64
No4    <span class="integer">1000000</span> non-null float64
dtypes: float64(<span class="integer">5</span>)
memory usage: <span class="float">45.8</span> MB

In [<span class="integer">4</span>]: <span class="keyword">import</span> <span class="include">sqlite3</span> <span class="keyword">as</span> sq3  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">5</span>]: con = sq3.connect(<span class="string"><span class="delimiter">'</span><span class="content">data.sql</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">6</span>]: %time data.to_sql(<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>, con)  <i class="conum" data-value="4"></i><b>(4)</b>
CPU times: user <span class="float">7.13</span> s, sys: <span class="integer">272</span> ms, total: <span class="float">7.4</span> s
Wall time: <span class="float">7.51</span> s

In [<span class="integer">8</span>]: ls -n data.*  <i class="conum" data-value="5"></i><b>(5)</b>
-rw-r--r--<span class="error">@</span> <span class="integer">1</span> <span class="integer">503</span>  <span class="integer">20</span>  <span class="integer">105316352</span> Nov  <span class="integer">7</span> <span class="integer">15</span>:<span class="integer">08</span> data.sql</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The sample financial data set has 1,000,000 rows and five columns; memory usage is about 46 MB.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>This imports the <code>SQLite3</code> module.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>A connection is opened to a new database file.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Writing the data to the relational database takes 7.5 seconds.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The size on disk with 100+ MB indicates lots of overhead.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>One strength of relational databases is the ability to implement 
(out-of-memory) analytics tasks based on standardized SQL statements. As
 an example, consider a query that selects for column <code>No1</code> all those rows where the value in that row lies between 105 and 108.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">8</span>]: query = <span class="string"><span class="delimiter">'</span><span class="content">SELECT * FROM data WHERE No1 &gt; 105 and No2 &lt; 108</span><span class="delimiter">'</span></span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">9</span>]: %time res = con.execute(query).fetchall()  <i class="conum" data-value="2"></i><b>(2)</b>
CPU times: user <span class="integer">632</span> ms, sys: <span class="float">39.9</span> ms, total: <span class="integer">672</span> ms
Wall time: <span class="integer">672</span> ms

In [<span class="integer">10</span>]: res[:<span class="integer">5</span>]  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">10</span>]:
[(<span class="string"><span class="delimiter">'</span><span class="content">2017-01-25 05:32:00</span><span class="delimiter">'</span></span>, <span class="float">101.02</span>, <span class="float">105.01</span>, <span class="float">84.46</span>, <span class="float">113.23</span>, <span class="float">92.79</span>),
 (<span class="string"><span class="delimiter">'</span><span class="content">2017-01-25 05:33:00</span><span class="delimiter">'</span></span>, <span class="float">100.99</span>, <span class="float">105.03</span>, <span class="float">84.42</span>, <span class="float">113.11</span>, <span class="float">92.8</span>),
 (<span class="string"><span class="delimiter">'</span><span class="content">2017-01-25 05:34:00</span><span class="delimiter">'</span></span>, <span class="float">100.95</span>, <span class="float">105.02</span>, <span class="float">84.34</span>, <span class="float">113.03</span>, <span class="float">92.77</span>),
 (<span class="string"><span class="delimiter">'</span><span class="content">2017-01-25 05:35:00</span><span class="delimiter">'</span></span>, <span class="float">100.81</span>, <span class="float">105.12</span>, <span class="float">84.39</span>, <span class="float">113.04</span>, <span class="float">92.76</span>),
 (<span class="string"><span class="delimiter">'</span><span class="content">2017-01-25 05:36:00</span><span class="delimiter">'</span></span>, <span class="float">100.83</span>, <span class="float">105.09</span>, <span class="float">84.27</span>, <span class="float">112.97</span>, <span class="float">92.75</span>)]

In [<span class="integer">11</span>]: <span class="predefined">len</span>(res)  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">11</span>]: <span class="integer">204103</span>

In [<span class="integer">12</span>]: con.close()

In [<span class="integer">13</span>]: rm data/data.sql</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The SQL query as a Python <code>str</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The query executed to retrieve all results rows.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The first five results printed.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The length of the results <code>list</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Admittedly, such simple queries are possible with <code>pandas</code>
 as well if the data set fits into memory. However, the SQL query 
language has proven use- and powerful for decades now and should be in 
the algorithmic trader’s arsenal of data weapons.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_conclusions_3">3.6. Conclusions</h3>
<div class="paragraph">
<p>This chapter covers the handling of financial time series data. It 
illustrates the reading of such data from different file-based sources, 
like CSV files. It also shows how to retrieve financial data from web 
services like the one of Google Finance for end-of-day and intraday 
data. Open financial data sources are a valuable addition to the 
financial landscape. Quandl is a platform integrating thousands of open 
data sets under the umbrella of a unified API.</p>
</div>
<div class="paragraph">
<p>Another important topic covered in this chapter is the efficient storage of complete <code>DataFrame</code>
 objects on disk as well as of the data contained in such an in-memory 
object to databases. Database flavors used in this chapter include the 
HDF5 database standard as well the light weight relational database <code>SQLite3</code>. This chapter lays the foundation for <a href="#vectorized_backtesting">Mastering Vectorized Backtesting</a> which addresses vectorized backtesting, <a href="#machine_learning">Predicting Market Movements with Machine Learning</a> which covers machine learning and deep learning for market prediction as well as <a href="#event_based_backtesting">Building Classes for Event-based Backtesting</a> that discusses event-based backtesting of trading strategies.</p>
</div>
</div>
<div class="sect2">
<h3 id="_further_resources_3">3.7. Further Resources</h3>
<div class="paragraph">
<p>You find more information about the open financial data sources covered in this chapter by following these links:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://www.google.com/finance" target="_blank">Google Finance home page</a></p>
</li>
<li>
<p><a href="http://quandl.org/" target="_blank">Quandl home page</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Information about the packages used to retrieve data from these sources is found here:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://www.quandl.com/tools/python" target="_blank">Python wrapper page on Quandl</a></p>
</li>
<li>
<p><a href="https://github.com/quandl/quandl-python" target="_blank">Github page of the Quandl Python wrapper</a></p>
</li>
<li>
<p><a href="https://github.com/pydata/pandas-datareader" target="_blank"><code>pandas-datareader</code> Github page</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You should consult the official documentation pages for more information on the packages used in this chapter:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://pandas.pydata.org/" target="_blank"><code>pandas</code> home page</a></p>
</li>
<li>
<p><a href="http://pytables.org/" target="_blank"><code>PyTables</code> home page</a></p>
</li>
<li>
<p><a href="http://sqlite.org/" target="_blank"><code>SQLite</code> home page</a></p>
</li>
<li>
<p><a href="https://github.com/afiedler/tstables" target="_blank"><code>TsTables</code> Github page</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Books cited in this chapter:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>McKinney, Wes (2017): <em>Python for Data Analysis</em>. 2nd ed., O’Reilly, Bejing et al.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_python_scripts">3.8. Python Scripts</h3>
<div id="sample_data" class="exampleblock">
<div class="title">Example 6. Module with a function to generate sample financial data</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Module to Generate a</span>
<span class="comment"># Sample Financial Data Set</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np
<span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

r = <span class="float">0.05</span>  <span class="comment"># constant short rate</span>
sigma = <span class="float">0.5</span>  <span class="comment"># volatility factor</span>


<span class="keyword">def</span> <span class="function">generate_sample_data</span>(rows, cols, freq=<span class="string"><span class="delimiter">'</span><span class="content">1min</span><span class="delimiter">'</span></span>):
    <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">    Function to generate sample financial data.</span><span class="content">
</span><span class="content">
</span><span class="content">    Parameters</span><span class="content">
</span><span class="content">    ==========</span><span class="content">
</span><span class="content">    rows: int</span><span class="content">
</span><span class="content">        number of rows to generate</span><span class="content">
</span><span class="content">    cols: int</span><span class="content">
</span><span class="content">        number of columns to generate</span><span class="content">
</span><span class="content">    freq: str</span><span class="content">
</span><span class="content">        frequency string for DatetimeIndex</span><span class="content">
</span><span class="content">
</span><span class="content">    Returns</span><span class="content">
</span><span class="content">    =======</span><span class="content">
</span><span class="content">    df: DataFrame</span><span class="content">
</span><span class="content">        DataFrame object with the sample data</span><span class="content">
</span><span class="content">    </span><span class="delimiter">'''</span></span>
    rows = <span class="predefined">int</span>(rows)
    cols = <span class="predefined">int</span>(cols)
    <span class="comment"># generate a DatetimeIndex object given the frequency</span>
    index = pd.date_range(<span class="string"><span class="delimiter">'</span><span class="content">2017-1-1</span><span class="delimiter">'</span></span>, periods=rows, freq=freq)
    <span class="comment"># determine time delta in year fractions</span>
    dt = (index[<span class="integer">1</span>] - index[<span class="integer">0</span>]) / pd.Timedelta(value=<span class="string"><span class="delimiter">'</span><span class="content">365D</span><span class="delimiter">'</span></span>)
    <span class="comment"># generate column names</span>
    columns = [<span class="string"><span class="delimiter">'</span><span class="content">No%d</span><span class="delimiter">'</span></span> % i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(cols)]
    <span class="comment"># generate sample paths for geometric Brownian motion</span>
    raw = np.exp(np.cumsum((r - <span class="float">0.5</span> * sigma ** <span class="integer">2</span>) * dt +
                 sigma * np.sqrt(dt) *
                 np.random.standard_normal((rows, cols)), axis=<span class="integer">0</span>))
    <span class="comment"># normalize the data to start at 100</span>
    raw = raw / raw[<span class="integer">0</span>] * <span class="integer">100</span>
    <span class="comment"># generate the DataFrame object</span>
    df = pd.DataFrame(raw, index=index, columns=columns)
    <span class="keyword">return</span> df


<span class="keyword">if</span> __name__ == <span class="string"><span class="delimiter">'</span><span class="content">__main__</span><span class="delimiter">'</span></span>:
    rows = <span class="integer">5</span>  <span class="comment"># number of rows</span>
    columns = <span class="integer">3</span>  <span class="comment"># number of columns</span>
    freq = <span class="string"><span class="delimiter">'</span><span class="content">D</span><span class="delimiter">'</span></span>  <span class="comment"># daily frequency</span>
    print(generate_sample_data(rows, columns, freq))</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="vectorized_backtesting">4. Mastering Vectorized Backtesting</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph align_me_right">
<p>…​, they were silly enough to think you can look at the past to predict the future.<sup class="footnote">[<a id="_footnoteref_21" class="footnote" href="#_footnote_21" title="View footnote.">21</a>]</sup></p>
</div>
</blockquote>
<div class="attribution">
— The Economist
</div>
</div>
<div class="sect2">
<h3 id="_introduction_4">4.1. Introduction</h3>
<div class="paragraph">
<p>Developing ideas and hypotheses for an algorithmic trading program is
 generally more creative and sometimes even fun part in the preparation 
stage. Thoroughly testing them is generally the more technical and time 
consuming part. This chapter is about the vectorized backtesting of 
different algorithmic trading strategies. It covers the following types 
of strategies (refer also to <a href="#trading_strategies">Trading Strategies</a>):</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>simple moving averages (SMA) based strategies</strong>: the 
basic idea of SMA usage for buy and sell signal generation is already 
decades old; SMAs are a major tool in the so-called technical analysis 
of stock prices; a signal is derived, for example, when a SMA defined on
 a shorter time window — say 42 days — crosses a SMA defined on a longer
 time window — say 252 days</p>
</li>
<li>
<p><strong>momentum strategies</strong>: these are strategies that are a
 based on the hypothesis that past performance will persist for some 
additional time; for example, a stock that is downward trending is 
assumed to do so for longer, that is why such a stock is to be shorted</p>
</li>
<li>
<p><strong>mean-reversion strategies</strong>: the reasoning behind 
mean-reversion strategies is that stock prices or prices of other 
financial instruments tend to revert to some mean level or to some trend
 level when they have deviated (too much) from such levels</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The chapter proceeds as follows. <a href="#using_vectorization">Making Use of Vectorization</a> introduces vectorization as a useful technical approach to formulate and backtest trading strategies. <a href="#simple_moving_averages">Strategies based on Simple Moving Averages</a> is the core of this chapter and covers vectorized backtesting of SMA-based strategies in some depth. <a href="#momentum_trading">Strategies based on Momentum</a> introduces and backtests trading strategies based on the so-called momentum ("recent performance") of a stock. <a href="#mean_reversion">Strategies based on Mean-Reversion</a> finishes the chapter with a coverage of mean-reversion strategies.</p>
</div>
<div class="paragraph">
<p>The major goal of this chapter is to master the vectorized implementation approach that packages like <code>NumPy</code> and <code>pandas</code>
 allow for as an efficient and fast backtesting tool. To this end, the 
approaches presented make a number of simplifying assumptions to better 
focus the discussion on the major topic of vectorization.</p>
</div>
<div class="paragraph">
<p>Vectorized backtesting should be considered in the following cases:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>simple trading strategies</strong>: the vectorized 
backtesting approach clearly has limits when it comes to the modeling of
 algorithmic trading strategies; however, many popular, simple 
strategies can be backtested in vectorized fashion</p>
</li>
<li>
<p><strong>interactive strategy exploration</strong>: vectorized 
backtesting allows for an agile, interactive exploration of trading 
strategies and their characteristics; a few lines of code generally 
suffice to come up with first results; different parameter combinations 
are easily tested</p>
</li>
<li>
<p><strong>visualization as major goal</strong>: the approach lends 
itself pretty well for visualizations of the used data, statistics, 
signals and performance results; a few lines of Python are generally 
enough to generate appealing and insightful plots</p>
</li>
<li>
<p><strong>comprehensive backtesting programs</strong>: vectorized 
backtesting is pretty fast in general, allowing to test a gereat variety
 of parameters combinations in a short amount of time; when speed is 
key, the approach should be considered</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="using_vectorization">4.2. Making Use of Vectorization</h3>
<div class="paragraph">
<p><em>Vectorization</em> or <em>array programming</em> refers to a 
programming style where operations on scalars (i.e. integer or floating 
point numbers) are generalized to vectors, matrices or even 
multi-dimensional arrays. Consider a vector of integers <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-32"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-33">v</span><span class="MJXp-mo" id="MJXp-Span-34" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mo" id="MJXp-Span-35" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-36">1</span><span class="MJXp-mo" id="MJXp-Span-37" style="margin-left: 0em; margin-right: 0.222em;">,</span><span class="MJXp-mn" id="MJXp-Span-38">2</span><span class="MJXp-mo" id="MJXp-Span-39" style="margin-left: 0em; margin-right: 0.222em;">,</span><span class="MJXp-mn" id="MJXp-Span-40">3</span><span class="MJXp-mo" id="MJXp-Span-41" style="margin-left: 0em; margin-right: 0.222em;">,</span><span class="MJXp-mn" id="MJXp-Span-42">4</span><span class="MJXp-mo" id="MJXp-Span-43" style="margin-left: 0em; margin-right: 0.222em;">,</span><span class="MJXp-mn" id="MJXp-Span-44">5</span><span class="MJXp-msubsup" id="MJXp-Span-45"><span class="MJXp-mo" id="MJXp-Span-46" style="margin-left: 0em; margin-right: 0.05em;">)</span><span class="MJXp-mrow MJXp-script" id="MJXp-Span-47" style="vertical-align: 0.5em;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-48">T</span></span></span></span></span><span class="MathJax MathJax_Processed" id="MathJax-Element-3-Frame" tabindex="0" style=""><nobr><span class="math" id="MathJax-Span-36" role="math"><span style="display: inline-block; position: relative; width: 0em; height: 0px; font-size: 124%;"><span style="position: absolute;"><span class="mrow" id="MathJax-Span-37"><span class="mi" id="MathJax-Span-38" style="font-family: MathJax_Math; font-style: italic;">v</span><span class="mo" id="MathJax-Span-39" style="font-family: MathJax_Main; padding-left: 0.278em;">=</span><span class="mo" id="MathJax-Span-40" style="font-family: MathJax_Main; padding-left: 0.278em;">(</span><span class="mn" id="MathJax-Span-41" style="font-family: MathJax_Main;">1</span><span class="mo" id="MathJax-Span-42" style="font-family: MathJax_Main;">,</span><span class="mn" id="MathJax-Span-43" style="font-family: MathJax_Main; padding-left: 0.167em;">2</span><span class="mo" id="MathJax-Span-44" style="font-family: MathJax_Main;">,</span><span class="mn" id="MathJax-Span-45" style="font-family: MathJax_Main; padding-left: 0.167em;">3</span><span class="mo" id="MathJax-Span-46" style="font-family: MathJax_Main;">,</span><span class="mn" id="MathJax-Span-47" style="font-family: MathJax_Main; padding-left: 0.167em;">4</span><span class="mo" id="MathJax-Span-48" style="font-family: MathJax_Main;">,</span><span class="mn" id="MathJax-Span-49" style="font-family: MathJax_Main; padding-left: 0.167em;">5</span><span class="msubsup" id="MathJax-Span-50"><span style="display: inline-block; position: relative; width: 0.962em; height: 0px;"><span style="position: absolute; clip: rect(3.093em, 1000.29em, 4.377em, -1000em); top: -3.985em; left: 0em;"><span class="mo" id="MathJax-Span-51" style="font-family: MathJax_Main;">)</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span><span style="position: absolute; top: -4.348em; left: 0.389em;"><span class="texatom" id="MathJax-Span-52"><span class="mrow" id="MathJax-Span-53"><span class="mi" id="MathJax-Span-54" style="font-size: 70.7%; font-family: MathJax_Math; font-style: italic;">T<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.085em;"></span></span></span></span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span></span></span></span></span></span></span></nobr></span><script type="math/tex" id="MathJax-Element-3">v = (1, 2, 3, 4, 5)^{T}</script> represented in Python as a <code>list</code> object <code>v = [1, 2, 3, 4, 5]</code>. Calculating the scalar product of such a vector and, say, the number 2 requires in pure Python a <code>for</code> loop or something similar like a list comprehension which is just different syntax for a <code>for</code> loop.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: v = [<span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">4</span>, <span class="integer">5</span>]

In [<span class="integer">2</span>]: sm = [<span class="integer">2</span> * i <span class="keyword">for</span> i <span class="keyword">in</span> v]

In [<span class="integer">3</span>]: sm
Out[<span class="integer">3</span>]: [<span class="integer">2</span>, <span class="integer">4</span>, <span class="integer">6</span>, <span class="integer">8</span>, <span class="integer">10</span>]</code></pre>
</div>
</div>
<div class="paragraph">
<p>In principle, Python allows to multiply a <code>list</code> object by an integer, but Python’s data model gives back another <code>list</code> object in the example case containing two times the elements of the original object.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">4</span>]: <span class="integer">2</span> * v
Out[<span class="integer">4</span>]: [<span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">4</span>, <span class="integer">5</span>, <span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">4</span>, <span class="integer">5</span>]</code></pre>
</div>
</div>
<div class="sect3">
<h4 id="_vectorization_with_numpy">4.2.1. Vectorization with NumPy</h4>
<div class="paragraph">
<p>The <code>NumPy</code> package for numerical computing (cf. <a href="http://numpy.org/" target="_blank"><code>NumPy</code> home page</a>) introduces vectorization to Python. The major class provided by <code>NumPy</code> is the <code>ndarray</code> class which stands for <em>n-dimensional array</em>. An instance of such an object can be created, for example, on the basis of the <code>list</code> object <code>v</code>. Scalar multiplication, linear transformations and similar operations from linear algebra then work as desired.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">5</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">6</span>]: a = np.array(v)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">7</span>]: a  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">7</span>]: array([<span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">4</span>, <span class="integer">5</span>])

In [<span class="integer">8</span>]: <span class="predefined">type</span>(a)  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">8</span>]: numpy.ndarray

In [<span class="integer">9</span>]: <span class="integer">2</span> * a  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">9</span>]: array([ <span class="integer">2</span>,  <span class="integer">4</span>,  <span class="integer">6</span>,  <span class="integer">8</span>, <span class="integer">10</span>])

In [<span class="integer">10</span>]: <span class="float">0.5</span> * a + <span class="integer">2</span>  <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">10</span>]: array([ <span class="float">2.5</span>,  <span class="float">3.</span> ,  <span class="float">3.5</span>,  <span class="float">4.</span> ,  <span class="float">4.5</span>])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the <code>NumPy</code> package.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Instantiates an <code>ndarray</code> object based on the <code>list</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Prints out the data stored as an <code>ndarray</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Looks up the type of the object.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Achieves a scalar multiplication in vectorized fashion.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Achieves a linear transformation in vectorized fashion.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The transition from a one-dimensional array, i.e. a vector, to a 
two-dimensional array, i.e. a matrix, is natural. The same holds true 
for higher dimensions.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">11</span>]: a = np.arange(<span class="integer">12</span>).reshape((<span class="integer">4</span>, <span class="integer">3</span>))  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">12</span>]: a
Out[<span class="integer">12</span>]:
array([[ <span class="integer">0</span>,  <span class="integer">1</span>,  <span class="integer">2</span>],
       [ <span class="integer">3</span>,  <span class="integer">4</span>,  <span class="integer">5</span>],
       [ <span class="integer">6</span>,  <span class="integer">7</span>,  <span class="integer">8</span>],
       [ <span class="integer">9</span>, <span class="integer">10</span>, <span class="integer">11</span>]])

In [<span class="integer">13</span>]: <span class="integer">2</span> * a
Out[<span class="integer">13</span>]:
array([[ <span class="integer">0</span>,  <span class="integer">2</span>,  <span class="integer">4</span>],
       [ <span class="integer">6</span>,  <span class="integer">8</span>, <span class="integer">10</span>],
       [<span class="integer">12</span>, <span class="integer">14</span>, <span class="integer">16</span>],
       [<span class="integer">18</span>, <span class="integer">20</span>, <span class="integer">22</span>]])

In [<span class="integer">14</span>]: a ** <span class="integer">2</span>  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">14</span>]:
array([[  <span class="integer">0</span>,   <span class="integer">1</span>,   <span class="integer">4</span>],
       [  <span class="integer">9</span>,  <span class="integer">16</span>,  <span class="integer">25</span>],
       [ <span class="integer">36</span>,  <span class="integer">49</span>,  <span class="integer">64</span>],
       [ <span class="integer">81</span>, <span class="integer">100</span>, <span class="integer">121</span>]])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Creates a one-dimensional <code>ndarray</code> object and reshapes it to two dimensions.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates the square of every element of the object in vectorized fashion.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>In addition, the <code>ndarray</code> class provides certain methods 
that allow vectorized operations. They often have also counterparts in 
the form of so-called universal functions that <code>NumPy</code> provides.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">15</span>]: a.mean()  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">15</span>]: <span class="float">5.5</span>

In [<span class="integer">16</span>]: np.mean(a)  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">16</span>]: <span class="float">5.5</span>

In [<span class="integer">17</span>]: a.mean(axis=<span class="integer">0</span>)  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">17</span>]: array([ <span class="float">4.5</span>,  <span class="float">5.5</span>,  <span class="float">6.5</span>])

In [<span class="integer">18</span>]: np.mean(a, axis=<span class="integer">1</span>)  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">18</span>]: array([  <span class="float">1.</span>,   <span class="float">4.</span>,   <span class="float">7.</span>,  <span class="float">10.</span>])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the mean of all elements by a method call.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates the mean of all elements by a universal function.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Calculates the mean along the first axis.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Calculates the mean along the second axis.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>As a financial example consider the function <code>generate_sample_data</code> in <a href="#sample_data">Module with a function to generate sample financial data</a>
 that uses an Euler discretization to generate sample paths for a 
geometric Brownian motion. The implementation makes use of multiple 
vectorized operations that are combined to a single line of code.</p>
</div>
<div class="paragraph">
<p>For more details and applications of vectorization with <code>NumPy</code> in a financial context, refer to Hilpisch (2014).</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The standard instruction set and data model of Python does in general not allow for vectorized numerical operations. <code>NumPy</code> introduces powerful vectorization techniques based on the regular array class <code>ndarray</code>
 that lead to concise code that is close to mathematical notation, for 
example, in linear algebra regarding vectors and matrices.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_vectorization_with_pandas">4.2.2. Vectorization with pandas</h4>
<div class="paragraph">
<p>The <code>pandas</code> package and the central <code>DataFrame</code> class make heavy use of <code>NumPy</code> and the <code>ndarray</code> class. Therefore, most of the vectorization principles seen in the <code>NumPy</code> context carry over to <code>pandas</code>. The mechanics are best explained again on the basis of a concrete example. To begin with, define a two-dimensional <code>ndarray</code> object first.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

In [<span class="integer">2</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

In [<span class="integer">3</span>]: a = np.arange(<span class="integer">15</span>).reshape(<span class="integer">5</span>, <span class="integer">3</span>)

In [<span class="integer">4</span>]: a
Out[<span class="integer">4</span>]:
array([[ <span class="integer">0</span>,  <span class="integer">1</span>,  <span class="integer">2</span>],
       [ <span class="integer">3</span>,  <span class="integer">4</span>,  <span class="integer">5</span>],
       [ <span class="integer">6</span>,  <span class="integer">7</span>,  <span class="integer">8</span>],
       [ <span class="integer">9</span>, <span class="integer">10</span>, <span class="integer">11</span>],
       [<span class="integer">12</span>, <span class="integer">13</span>, <span class="integer">14</span>]])</code></pre>
</div>
</div>
<div class="paragraph">
<p>For the creation of a <code>DataFrame</code> object, generate a <code>list</code> object with column names and a <code>DatetimeIndex</code> object next, both of appropriate size given the <code>ndarray</code> object.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">5</span>]: columns = <span class="predefined">list</span>(<span class="string"><span class="delimiter">'</span><span class="content">abc</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">6</span>]: columns
Out[<span class="integer">6</span>]: [<span class="string"><span class="delimiter">'</span><span class="content">a</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">b</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>]

In [<span class="integer">7</span>]: index = pd.date_range(<span class="string"><span class="delimiter">'</span><span class="content">2017-7-1</span><span class="delimiter">'</span></span>, periods=<span class="integer">5</span>, freq=<span class="string"><span class="delimiter">'</span><span class="content">B</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">8</span>]: index
Out[<span class="integer">8</span>]:
DatetimeIndex([<span class="string"><span class="delimiter">'</span><span class="content">2017-07-03</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-07-04</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-07-05</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-07-06</span><span class="delimiter">'</span></span>,
               <span class="string"><span class="delimiter">'</span><span class="content">2017-07-07</span><span class="delimiter">'</span></span>], dtype=<span class="string"><span class="delimiter">'</span><span class="content">datetime64[ns]</span><span class="delimiter">'</span></span>, freq=<span class="string"><span class="delimiter">'</span><span class="content">B</span><span class="delimiter">'</span></span>)

In [<span class="integer">9</span>]: df = pd.DataFrame(a, columns=columns, index=index)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">10</span>]: df
Out[<span class="integer">10</span>]:
             a   b   c
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">03</span>   <span class="integer">0</span>   <span class="integer">1</span>   <span class="integer">2</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">04</span>   <span class="integer">3</span>   <span class="integer">4</span>   <span class="integer">5</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">05</span>   <span class="integer">6</span>   <span class="integer">7</span>   <span class="integer">8</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">06</span>   <span class="integer">9</span>  <span class="integer">10</span>  <span class="integer">11</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">07</span>  <span class="integer">12</span>  <span class="integer">13</span>  <span class="integer">14</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Created a <code>list</code> object out of the <code>str</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>A <code>pandas</code> <code>DatetimeIndex</code> object is created that start on 01. July 2017 and has a "business day" frequency of five periods.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>A <code>DataFrame</code> object is instantiated based on the <code>ndarray</code> object <code>a</code>, the defines column labels and index values.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>In principle, vectorization now works like with <code>ndarray</code> objects. One difference is that aggregation operations default to column-wise results.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">11</span>]: <span class="integer">2</span> * df  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">11</span>]:
             a   b   c
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">03</span>   <span class="integer">0</span>   <span class="integer">2</span>   <span class="integer">4</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">04</span>   <span class="integer">6</span>   <span class="integer">8</span>  <span class="integer">10</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">05</span>  <span class="integer">12</span>  <span class="integer">14</span>  <span class="integer">16</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">06</span>  <span class="integer">18</span>  <span class="integer">20</span>  <span class="integer">22</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">07</span>  <span class="integer">24</span>  <span class="integer">26</span>  <span class="integer">28</span>

In [<span class="integer">12</span>]: df.sum()  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">12</span>]:
a    <span class="integer">30</span>
b    <span class="integer">35</span>
c    <span class="integer">40</span>
dtype: int64

In [<span class="integer">13</span>]: np.mean(df)  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">13</span>]:
a    <span class="float">6.0</span>
b    <span class="float">7.0</span>
c    <span class="float">8.0</span>
dtype: float64</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the scalar product for the <code>DataFrame</code> object (treated as a matrix).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates the sum <em>per column</em>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Calculates the mean <em>per column</em>.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Column-wise operations can be implemented by referencing the 
respective column names, either by the bracket notation or the dot 
notation.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">14</span>]: df[<span class="string"><span class="delimiter">'</span><span class="content">a</span><span class="delimiter">'</span></span>] + df[<span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">14</span>]:
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">03</span>     <span class="integer">2</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">04</span>     <span class="integer">8</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">05</span>    <span class="integer">14</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">06</span>    <span class="integer">20</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">07</span>    <span class="integer">26</span>
Freq: B, dtype: int64

In [<span class="integer">15</span>]: <span class="float">0.5</span> * df.a + <span class="integer">2</span> * df.b - df.c  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">15</span>]:
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">03</span>     <span class="float">0.0</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">04</span>     <span class="float">4.5</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">05</span>     <span class="float">9.0</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">06</span>    <span class="float">13.5</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">07</span>    <span class="float">18.0</span>
Freq: B, dtype: float64</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the element-wise sum over columns <code>a</code> and <code>c</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates a linear transform involving all three columns.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Similarly, conditions yielding boolean results vectors and SQL-like 
selections based on such conditions are straightforward to implement.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">16</span>]: df[<span class="string"><span class="delimiter">'</span><span class="content">a</span><span class="delimiter">'</span></span>] &gt; <span class="integer">5</span>  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">16</span>]:
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">03</span>    <span class="predefined-constant">False</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">04</span>    <span class="predefined-constant">False</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">05</span>     <span class="predefined-constant">True</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">06</span>     <span class="predefined-constant">True</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">07</span>     <span class="predefined-constant">True</span>
Freq: B, Name: a, dtype: <span class="predefined">bool</span>

In [<span class="integer">17</span>]: df[df[<span class="string"><span class="delimiter">'</span><span class="content">a</span><span class="delimiter">'</span></span>] &gt; <span class="integer">5</span>]  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">17</span>]:
             a   b   c
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">05</span>   <span class="integer">6</span>   <span class="integer">7</span>   <span class="integer">8</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">06</span>   <span class="integer">9</span>  <span class="integer">10</span>  <span class="integer">11</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">07</span>  <span class="integer">12</span>  <span class="integer">13</span>  <span class="integer">14</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Which element in column <code>a</code> is greater than five?</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Select all those rows where the element in column <code>a</code> is greater than five.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>For a vectorized backtesting of trading strategies, comparisons between two columns or more are typical.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">18</span>]: df[<span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>] &gt; df[<span class="string"><span class="delimiter">'</span><span class="content">b</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">18</span>]:
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">03</span>    <span class="predefined-constant">True</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">04</span>    <span class="predefined-constant">True</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">05</span>    <span class="predefined-constant">True</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">06</span>    <span class="predefined-constant">True</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">07</span>    <span class="predefined-constant">True</span>
Freq: B, dtype: <span class="predefined">bool</span>

In [<span class="integer">19</span>]:
  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">19</span>]:
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">03</span>    <span class="predefined-constant">False</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">04</span>    <span class="predefined-constant">False</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">05</span>    <span class="predefined-constant">False</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">06</span>     <span class="predefined-constant">True</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="octal">07</span>     <span class="predefined-constant">True</span>
Freq: B, dtype: <span class="predefined">bool</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>For which date is the element in column <code>c</code> greater than in column <code>b</code>?</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Condition comparing a linear combination of columns <code>a</code> and <code>b</code> with column <code>c</code>.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Vectorization with <code>pandas</code> is a powerful concept, in 
particular for the implementation of financial algorithms and the 
vectorized backtesting as illustrated in the remainder of this chapter. 
For more on the basics of vectorization with <code>pandas</code> and financial examples again refer to the book Hilpisch (2014).</p>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>While <code>NumPy</code> brings general vectorization approaches to the numerical computing world of Python, <code>pandas</code>
 allows vectorization over time series data. This is really helpful for 
the implementation of financial algorithms and the backtesting of 
algorithmic trading strategies. By using this approach, you can expect 
concise code as well as a faster code execution in comparison to 
standard Python code, making use of <code>for</code> loops and similar idioms to accomplish the same goal.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="simple_moving_averages">4.3. Strategies based on Simple Moving Averages</h3>
<div class="paragraph">
<p>Trading based on simple moving averages (SMAs) is a decades old 
strategy that has its origins in the technical stock analysis world. 
Brock et al. (1992), for example, empirically investigate such 
strategies systematically. They write:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>The term "technical analysis" is a general heading for a myriad of 
trading techniques. …​ In this paper, we explore two of the simplest and
 most popular technical rules: moving average-oscillator and 
trading-range break (resistance and support levels). In the first 
method, buy and sell signals are generated by two moving averages, a 
long period, and a short period. …​ Our study reveals that technical 
analysis helps to predict stock changes.</p>
</div>
</blockquote>
</div>
<div class="sect3">
<h4 id="_getting_into_the_basics">4.3.1. Getting into the Basics</h4>
<div class="paragraph">
<p>This sub-section focuses on the basics of backtesting trading 
strategies that make use of two SMAs. The example to follow works with 
end-of-day closing data for the Apple, Inc. stock price as retrieved 
from Google Finance with the <code>pandas_datareader</code> package. Adjusted close values are sufficient for the purposes of the example. See also <a href="#open_data_sources">Working with Open Data Sources</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: <span class="keyword">from</span> <span class="include">pandas_datareader</span> <span class="keyword">import</span> <span class="include">data</span> <span class="keyword">as</span> web  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: data = web.DataReader(<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, data_source=<span class="string"><span class="delimiter">'</span><span class="content">google</span><span class="delimiter">'</span></span>,
                              end=<span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>)[<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">4</span>]: data = pd.DataFrame(data)  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">5</span>]: data.rename(columns={<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>}, inplace=<span class="predefined-constant">True</span>)  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">6</span>]: data.info()  <i class="conum" data-value="6"></i><b>(6)</b>
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">1720</span> entries, <span class="integer">2010</span>-<span class="octal">01</span>-<span class="octal">04</span> to <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">31</span>
Data columns (total <span class="integer">1</span> columns):
price    <span class="integer">1720</span> non-null float64
dtypes: float64(<span class="integer">1</span>)
memory usage: <span class="float">26.9</span> KB</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the <code>pandas</code> package.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Imports the <code>pandas_datareader</code> package.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Reads the <code>Close</code> values for Apple from Google Finance.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Transforms the <code>Series</code> object to a <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Renames the <code>Adj Close</code> column to <code>price</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Shows the meta information for the <code>DataFrame</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The calculation of SMAs is made simple by the <code>rolling</code> method in combination with a deferred calculation operation.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">7</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].rolling(<span class="integer">42</span>).mean()  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">8</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].rolling(<span class="integer">252</span>).mean()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">9</span>]: data.tail()  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">9</span>]:
                 price        SMA1        SMA2
Date
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">25</span>  <span class="float">117.645979</span>  <span class="float">111.958039</span>  <span class="float">103.630076</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">26</span>  <span class="float">114.999563</span>  <span class="float">112.162940</span>  <span class="float">103.643649</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">27</span>  <span class="float">113.895240</span>  <span class="float">112.344389</span>  <span class="float">103.634595</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span>  <span class="float">113.139120</span>  <span class="float">112.527260</span>  <span class="float">103.617671</span>
<span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">31</span>  <span class="float">112.960039</span>  <span class="float">112.703498</span>  <span class="float">103.604017</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Creates a column with 42 days SMA values.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Creates a column with 252 days SMA values.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Prints the final five rows of the data set.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>A visualization of the Apple stock price in combination with the SMAs
 best illustrates the results. The resulting plot is shown as <a href="#sma_plot_1">The Apple stock price with two SMAs</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">10</span>]: data.plot(title=<span class="string"><span class="delimiter">'</span><span class="content">AAPL stock price | 42 &amp; 252 days SMAs</span><span class="delimiter">'</span></span>,
                   figsize=(<span class="integer">10</span>, <span class="integer">6</span>))</code></pre>
</div>
</div>
<div id="sma_plot_1" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/sma_plot_1.png" alt="sma plot 1">
</div>
<div class="title">Figure 4. The Apple stock price with two SMAs</div>
</div>
<div class="paragraph">
<p>The next step is to generate signals, or rather market positionings, 
based on the relationship between the two SMAs. The rule is: <em>go long the stock whenever the shorter SMA is above the longer one and vice versa</em>.
 For our purposes, we indicate a long position by 1 and a short position
 by -1. Being able to directly compare two columns of the <code>DataFrame</code>
 object makes the implementation of the rule an affair of a single line 
of code only. The positioning over time is illustrated in <a href="#sma_plot_2">Market positioning based on the strategy with two SMAs</a> and both starts and ends with a long position.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">11</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">12</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.where(data[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] &gt; data[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>], <span class="integer">1</span>, -<span class="integer">1</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">13</span>]: data.dropna(inplace=<span class="predefined-constant">True</span>)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">14</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].plot(ylim=[-<span class="float">1.1</span>, <span class="float">1.1</span>], title=<span class="string"><span class="delimiter">'</span><span class="content">Market Positioning</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="4"></i><b>(4)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Import <code>NumPy</code> for certain operations.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Implements the trading rule in vectorized fashion.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Deletes all rows of the data set that contain at least one <code>NaN</code> value.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Plots the positioning over time.</td>
</tr>
</tbody></table>
</div>
<div id="sma_plot_2" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/sma_plot_2.png" alt="sma plot 2">
</div>
<div class="title">Figure 5. Market positioning based on the strategy with two SMAs</div>
</div>
<div class="paragraph">
<p>To calculate the performance of the strategy, calculate the log 
returns of the Apple stock next. The code to do this is again rather 
concise due to vectorization. <a href="#sma_plot_3">Frequency distribution of Apple stock returns</a> shows the histogram of the log returns.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">15</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>] / data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>))  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">16</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].hist(bins=<span class="integer">35</span>)  <i class="conum" data-value="2"></i><b>(2)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the log returns in vectorized fashion over the <code>price</code> column.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Plots the log returns as a histogram (frequency distribution).</td>
</tr>
</tbody></table>
</div>
<div id="sma_plot_3" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/sma_plot_3.png" alt="sma plot 3">
</div>
<div class="title">Figure 6. Frequency distribution of Apple stock returns</div>
</div>
<div class="paragraph">
<p>To derive the strategy returns, multiply the <code>position</code> column — shifted by one trading day — with the <code>returns</code> column. Since log returns are additive, calculating the sum over the columns <code>returns</code> and <code>strategy</code>
 provides a first comparison of the performance of the strategy relative
 to the stock itself, with the strategy booking a win this time.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">17</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>) * data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">18</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].sum()  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">18</span>]: returns     <span class="float">0.990033</span>
         strategy    <span class="float">1.170421</span>
         dtype: float64</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Derives the log returns of the strategy given the positionings and market returns.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Sums up the single log return values for both the stock and the strategy.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Calculating the cumulative sum over time with <code>cumsum</code> and based on this the cumulative returns by applying the universal exponential function <code>np.exp</code> gives a more comprehensive picture of how the strategy compares to the stock’s performance over time. <a href="#sma_plot_4">Cumulative returns of the Apple stock and the SMA-based strategy</a>
 shows the data graphically and illustrates that the outperformance in 
this particular case stems from the two relatively short periods of time
 where the strategy is short the Apple stock.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">19</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].cumsum(
                ).apply(np.exp).plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))</code></pre>
</div>
</div>
<div id="sma_plot_4" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/sma_plot_4.png" alt="sma plot 4">
</div>
<div class="title">Figure 7. Cumulative returns of the Apple stock and the SMA-based strategy</div>
</div>
<div class="paragraph">
<p>Average, annualized risk-return statistics for both the stock and the strategy are easy to calculate.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">19</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].mean() * <span class="integer">252</span>  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">19</span>]: returns     <span class="float">0.169951</span>
         strategy    <span class="float">0.200917</span>
         dtype: float64

In [<span class="integer">20</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].std() * <span class="integer">252</span> ** <span class="float">0.5</span>  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">20</span>]: returns     <span class="float">0.263713</span>
         strategy    <span class="float">0.263627</span>
         dtype: float64</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the annualized mean return.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates the annualized standard deviation.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Other risk statistics often of interest in the context of trading strategy performances are the <em>maximum drawdown</em> and the <em>longest drawdown period</em>. A helper statistic to use in this context is the cumulative maximum calculated by the <code>cummax</code> method on the cumulative returns. <a href="#sma_plot_5">Cumulative returns and cumulative maximum of the SMA-based strategy</a> shows the two time series for the SMA-based strategy.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">21</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">cumret</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>].cumsum().apply(np.exp)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">22</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">cummax</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">cumret</span><span class="delimiter">'</span></span>].cummax()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">23</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">cumret</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">cummax</span><span class="delimiter">'</span></span>]].plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="3"></i><b>(3)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Defines a new column <code>cumret</code> with the cumulative return over time.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Defines yet another column with the running maximum value of the cumulative return.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>This plots the two new columns of the <code>DataFrame</code> object.</td>
</tr>
</tbody></table>
</div>
<div id="sma_plot_5" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/sma_plot_5.png" alt="sma plot 5">
</div>
<div class="title">Figure 8. Cumulative returns and cumulative maximum of the SMA-based strategy</div>
</div>
<div class="paragraph">
<p>The maximum drawdown is then simply calculated as the maximum of the 
difference between the two relevant columns. The maximum drawdown in the
 example is about 76 percentage points.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">24</span>]: drawdown = (data[<span class="string"><span class="delimiter">'</span><span class="content">cummax</span><span class="delimiter">'</span></span>] - data[<span class="string"><span class="delimiter">'</span><span class="content">cumret</span><span class="delimiter">'</span></span>])  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">25</span>]: drawdown.max()  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">25</span>]: <span class="float">0.76543763075302618</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the element-wise difference between the two columns.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Picks out the maximum value from all differences.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The determination of the longest drawdown period is a bit more 
involved. It requires those dates at which the cumulative return equals 
the cumulative maximum, i.e. where a new maximum is set. This 
information is stored in a temporary object. Then the differences in 
days between all such dates are calculated and the longest period is 
picked out. Such periods can be only one day long or more than 100 days.
 Here, the longest drawdown period lasts for 381 days.<sup class="footnote">[<a id="_footnoteref_22" class="footnote" href="#_footnote_22" title="View footnote.">22</a>]</sup></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">26</span>]: temp = drawdown[drawdown == <span class="integer">0</span>]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">27</span>]: periods = (temp.index[<span class="integer">1</span>:].to_pydatetime() -
                    temp.index[:-<span class="integer">1</span>].to_pydatetime())  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">28</span>]: periods[<span class="integer">12</span>:<span class="integer">15</span>]
Out[<span class="integer">28</span>]: array([datetime.timedelta(<span class="integer">1</span>), datetime.timedelta(<span class="integer">149</span>),
                datetime.timedelta(<span class="integer">3</span>)], dtype=<span class="predefined">object</span>)

In [<span class="integer">29</span>]: periods.max()  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">29</span>]: datetime.timedelta(<span class="integer">381</span>)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Where are the differences equal to zero?</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates the <code>timedelta</code> values between all index values.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Picks out the maximum <code>timedelta</code> value.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Vectorized backtesting with <code>pandas</code> is generally a rather efficient endeavor due to the capabilities of the package and the main <code>DataFrame</code>
 class. However, the interactive approach illustrated does not work well
 when one wishes to implement a larger backtesting program which, for 
example, optimizes the parameters of a SMA-based strategy. To this end, a
 more general approach is advisable.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p><code>pandas</code> proves to be a powerful tool for the vectorized 
analysis of trading strategies. Many statistics of interest — like log 
returns, cumulative returns, annualized returns and volatility, maximum 
drawdown and maximum drawdown period — can in general be calculated by a
 single or just a few lines of code. Being able to visualize results by a
 simple method call is an additional benefit.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_generalizing_the_approach">4.3.2. Generalizing the Approach</h4>
<div class="paragraph">
<p><a href="#sma_vector_backtester">Module with a class for vectorized backtesting of SMA-based strategies</a>
 presents a Python module that contains a class for the vectorized 
backtesting of SMA-based trading strategies. In a sense, it is a 
generalization of the approach introduced so far. It allows to define an
 instance of the <code>SMAVectorBacktester</code> class by providing the following parameters:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>symbol</code> for the Google Finance symbol to be used</p>
</li>
<li>
<p><code>SMA1</code> for the time window in days for the <em>shorter</em> SMA</p>
</li>
<li>
<p><code>SMA2</code> for the time window in days for the <em>longer</em> SMA</p>
</li>
<li>
<p><code>start</code> for the start date of the data retrieval</p>
</li>
<li>
<p><code>end</code> for the end date of the data retrieval</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The application itself is best illustrated by an interactive session 
that makes use of the class. The example first replicates the backtest 
implemented before based on Apple, Inc. stock price data. It then 
optimizes the SMA parameters for maximum absolute performance. Based on 
the optimal parameters, it plots the resulting cumulative performance of
 the strategy compared to the stock’s performance over the relevant 
period of time.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">SMAVectorBacktester</span> <span class="keyword">as</span> SMA  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: smabt = SMA.SMAVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, <span class="integer">42</span>, <span class="integer">252</span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: smabt.run_strategy()  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">3</span>]: (<span class="float">3.2200000000000002</span>, <span class="float">0.54000000000000004</span>)

In [<span class="integer">4</span>]: %time smabt.optimize_parameters((<span class="integer">30</span>, <span class="integer">50</span>, <span class="integer">2</span>), (<span class="integer">200</span>, <span class="integer">300</span>, <span class="integer">2</span>))  <i class="conum" data-value="4"></i><b>(4)</b>
CPU times: user <span class="integer">14</span> s, sys: <span class="float">22.2</span> ms, total: <span class="integer">14</span> s
Wall time: <span class="integer">14</span> s
Out[<span class="integer">4</span>]: (array([  <span class="float">42.</span>,  <span class="float">230.</span>]), <span class="float">4.1399999999999997</span>)

In [<span class="integer">5</span>]: smabt.plot_results()  <i class="conum" data-value="5"></i><b>(5)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This imports the module as <code>SMA</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>An instance of the main class is instantiated.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Backtests the SMA-based strategy given the parameters during instantiation.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The <code>optimize_parameters</code> method takes as input parameter ranges with step sizes and determines the optimal combination by a brute force approach.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The <code>plot_results</code> method plots the strategy performance 
compared to the benchmark instrument given the currently stored 
parameter values (here from the optimization procedure).</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The absolute performance of the strategy with the original 
parametrization is 3.22 or 322%. The optimized strategy yields an 
absolute return of 4.14 or 414% for the parameter combination <code>SMA1 = 42</code> and <code>SMA2 = 230</code>. <a href="#sma_plot_6">Cumulative returns of the Apple stock and the optimized SMA strategy</a>
 shows the cumulative performance over time graphically, again compared 
to the performance of the Apple stock price which represents the 
benchmark.</p>
</div>
<div id="sma_plot_6" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/sma_plot_6.png" alt="sma plot 6">
</div>
<div class="title">Figure 9. Cumulative returns of the Apple stock and the optimized SMA strategy</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="momentum_trading">4.4. Strategies based on Momentum</h3>
<div class="paragraph">
<p>There are two basic types of momentum strategies. The first type are <em>cross-sectional</em>
 momentum strategies. Selecting from a larger pool of instruments, these
 strategies buy those instruments that have recently outperformed 
relative to their peers or a benchmark and sell those instruments that 
have underperformed. The basic idea is that the instruments continue to 
out- and underperform, respectively — at least for a certain period of 
time. Jegadeesh and Titman (1993, 2001) and Chan et al. (1996) study 
these types of trading strategies and their potential sources of profit.</p>
</div>
<div class="paragraph">
<p>Cross-sectional momentum strategies have traditionally performed quite well. Jegadeesh and Titman (1993) write:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>This paper documents that strategies which buy stocks that have 
performed well in the past and sell stocks that have performed poorly in
 the past generate significant positive returns over 3- to 12-month 
holding periods.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>The second type are <em>time series</em> momentum strategies. These 
strategies buy those instruments that have recently performed well and 
sell those instruments that have recently performed poorly. In this 
case, the benchmark are the past returns of the instrument itself. 
Moskowitz et al. (2012) analyze this type of momentum strategy in detail
 across a wide range of markets. They write:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Rather than focus on the relative returns of securities in the 
cross-section, time series momentum focuses purely on a security’s own
past return. …​ Our finding of time series momentum in virtually every 
instrument we examine seems to challenge the "random walk" hypothesis, 
which in its most basic form implies that knowing whether a price went 
up or down in the past should not be informative about whether it will 
go up or down in the future.</p>
</div>
</blockquote>
</div>
<div class="sect3">
<h4 id="_getting_into_the_basics_2">4.4.1. Getting into the Basics</h4>
<div class="paragraph">
<p>Consider again end-of-day closing prices for the the Apple, Inc. stock.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

In [<span class="integer">2</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

In [<span class="integer">3</span>]: <span class="keyword">from</span> <span class="include">pandas_datareader</span> <span class="keyword">import</span> <span class="include">data</span> <span class="keyword">as</span> web

In [<span class="integer">4</span>]: data = web.DataReader(<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, data_source=<span class="string"><span class="delimiter">'</span><span class="content">google</span><span class="delimiter">'</span></span>,
                              end=<span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>)[<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>]

In [<span class="integer">5</span>]: data = pd.DataFrame(data)

In [<span class="integer">6</span>]: data.rename(columns={<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>}, inplace=<span class="predefined-constant">True</span>)

In [<span class="integer">7</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>] / data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>))</code></pre>
</div>
</div>
<div class="paragraph">
<p>The most simple time series momentum strategy is to buy the stock if 
the last return was positive and to sell it if it was negative. With <code>NumPy</code> and <code>pandas</code> this is easy to formalize — just take the sign of the last available return as the market position. <a href="#mom_plot_1">Cumulative returns of the Apple stock and momentum strategy (last return only)</a> illustrates the performance of this strategy. The strategy does neither really out- nor underperform the Apple stock itself.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">8</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.sign(data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>])  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">9</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>) * data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">10</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].dropna().cumsum(
              ).apply(np.exp).plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="3"></i><b>(3)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Defines a new column with the sign, i.e. 1 or -1, of the relevant 
log return; the resulting values represent the market positionings (long
 or short).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates the strategy log returns given the market positionings.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Plots and compares the strategy performance with the benchmark instrument.</td>
</tr>
</tbody></table>
</div>
<div id="mom_plot_1" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/mom_plot_1.png" alt="mom plot 1">
</div>
<div class="title">Figure 10. Cumulative returns of the Apple stock and momentum strategy (last return only)</div>
</div>
<div class="paragraph">
<p>Using a rolling time window, the time series momentum strategy can be
 generalized to more then just the last return. For example, the average
 of the last two returns can be used to generate the signal for the 
positioning. <a href="#mom_plot_2">Cumulative returns of the Apple stock and momentum strategy (last two returns)</a> shows that the strategy in this case does slightly better.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">11</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.sign(data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].rolling(<span class="integer">2</span>).mean())  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">12</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>) * data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]

In [<span class="integer">13</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].dropna().cumsum(
              ).apply(np.exp).plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This time, the mean return over a rolling window of two days is taken.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>However, the performance is quite sensitive to the time window 
parameter. Choosing, for example, the last six returns instead of two 
leads to a much worse performance as shown in <a href="#mom_plot_3">Cumulative returns of the Apple stock and momentum strategy (last six returns)</a></p>
</div>
<div id="mom_plot_2" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/mom_plot_2.png" alt="mom plot 2">
</div>
<div class="title">Figure 11. Cumulative returns of the Apple stock and momentum strategy (last two returns)</div>
</div>
<div id="mom_plot_3" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/mom_plot_3.png" alt="mom plot 3">
</div>
<div class="title">Figure 12. Cumulative returns of the Apple stock and momentum strategy (last six returns)</div>
</div>
<div class="paragraph">
<p>Time series momentum might be expected intraday as well. <a href="#mom_plot_4">Cumulative exponential intraday returns of the Apple stock and three momentum strategies (last one, three, five returns)</a>
 shows the performance of three time series momentum strategies for one,
 three and five return observations, respectively. The data used is 
intraday stock price data for Apple as retrieved from Yahoo! Finance in 
2016. The figure is based on the code that follows.<sup class="footnote">[<a id="_footnoteref_23" class="footnote" href="#_footnote_23" title="View footnote.">23</a>]</sup> All three strategies outperform the stock over the course of this single trading day.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

In [<span class="integer">2</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

In [<span class="integer">3</span>]: h5 = pd.HDFStore(<span class="string"><span class="delimiter">'</span><span class="content">../data/AAPL_1min_11112016.h5</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">4</span>]: data = h5[<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>]
        h5.close()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">5</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(data[<span class="string"><span class="delimiter">'</span><span class="content">close</span><span class="delimiter">'</span></span>] / data[<span class="string"><span class="delimiter">'</span><span class="content">close</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>))  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">6</span>]: to_plot = [<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">7</span>]: <span class="keyword">for</span> m <span class="keyword">in</span> [<span class="integer">1</span>, <span class="integer">3</span>, <span class="integer">5</span>]:
            data[<span class="string"><span class="delimiter">'</span><span class="content">position_%d</span><span class="delimiter">'</span></span> % m] = np.sign(data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].rolling(m).mean())  <i class="conum" data-value="5"></i><b>(5)</b>
            data[<span class="string"><span class="delimiter">'</span><span class="content">strategy_%d</span><span class="delimiter">'</span></span> % m] = data[<span class="string"><span class="delimiter">'</span><span class="content">position_%d</span><span class="delimiter">'</span></span> % m].shift(<span class="integer">1</span>) * data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="6"></i><b>(6)</b>
            to_plot.append(<span class="string"><span class="delimiter">'</span><span class="content">strategy_%d</span><span class="delimiter">'</span></span> % m)  <i class="conum" data-value="7"></i><b>(7)</b>
In [<span class="integer">8</span>]: data[to_plot].dropna().cumsum().apply(np.exp).plot(
            title=<span class="string"><span class="delimiter">'</span><span class="content">AAPL intraday 11. November 2016</span><span class="delimiter">'</span></span>,
            figsize=(<span class="integer">10</span>, <span class="integer">6</span>), style=[<span class="string"><span class="delimiter">'</span><span class="content">-</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">--</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">--</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">--</span><span class="delimiter">'</span></span>])  <i class="conum" data-value="8"></i><b>(8)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Opens a database file with minute bar data.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Reads the data and closes the database file.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Calculates the intraday log returns.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Defines a <code>list</code> object for the columns to be plotted later.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Derives positionings according to the momentum strategy parameter.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Calculates the resulting strategy log returns.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Appends the column name to the <code>list</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Plots all relevant columns to compare the strategies' performances to the benchmark instrument’s performance.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><a href="#mom_plot_5">Cumulative exponential intraday returns of the S&amp;P 500 index and three momentum strategies (last one, three, five returns)</a>
 shows the performance of the same three strategies for the S&amp;P 500 
index. Although the three strategies again outperform the benchmark 
instrument, the strategy based on the last three returns only does so by
 a rather tight margin.</p>
</div>
<div id="mom_plot_4" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/mom_plot_4.png" alt="mom plot 4">
</div>
<div class="title">Figure 13. Cumulative exponential intraday returns of
 the Apple stock and three momentum strategies (last one, three, five 
returns)</div>
</div>
<div id="mom_plot_5" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/mom_plot_5.png" alt="mom plot 5">
</div>
<div class="title">Figure 14. Cumulative exponential intraday returns of
 the S&amp;P 500 index and three momentum strategies (last one, three, 
five returns)</div>
</div>
</div>
<div class="sect3">
<h4 id="_generalizing_the_approach_2">4.4.2. Generalizing the Approach</h4>
<div class="paragraph">
<p><a href="#mom_vector_backtester">Module with a class for vectorized backtesting of momentum-based strategies</a> presents a Python module containing the <code>MomVectorBacktester</code>
 class which allows for a bit more standardized backtesting of 
momentum-based strategies. The class has the following attributes:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>symbol</code> for the Google Finance symbol to be used</p>
</li>
<li>
<p><code>start</code> for the start date of the data retrieval</p>
</li>
<li>
<p><code>end</code> for the end date of the data retrieval</p>
</li>
<li>
<p><code>amount</code> for the initial amount to be invested</p>
</li>
<li>
<p><code>tc</code> for the proportional transaction costs per trade</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Compared to the <code>SMAVectorBacktester</code> class, this one 
introduces two important generalizations: the fixed amount to be 
invested at the beginning of the backtesting period and proportional 
transaction costs to get closer to market realities.</p>
</div>
<div class="paragraph">
<p>The application is as straightforward and convenient as before. The 
example first replicates the results from the interactive session before
 but this time with an initial investment of 10,000 USD. <a href="#mom_plot_6">Cumulative returns of the Apple stock and the momentum strategy (last two returns, no transaction costs)</a>
 visualizes the performance of the strategy taking the mean of the last 
two returns to generate signals for the positioning. The second case 
covered is one with proportional transaction costs of 0.1% per trade. As
 <a href="#mom_plot_7">Cumulative returns of the Apple stock and the momentum strategy (last two returns, transaction costs of 0.1%)</a>
 illustrates, even small transaction costs deteriorate the performance 
significantly in this case. One major factor in this regard is the 
relatively high frequency of trades that the strategy requires.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">MomVectorBacktester</span> <span class="keyword">as</span> Mom  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: mombt = Mom.MomVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                                        <span class="integer">10000</span>, <span class="float">0.0</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: mombt.run_strategy(momentum=<span class="integer">2</span>)  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">3</span>]: (<span class="float">42833.589999999997</span>, <span class="float">2269.4299999999998</span>)

In [<span class="integer">4</span>]: mombt.plot_results()

In [<span class="integer">5</span>]: mombt = Mom.MomVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                                        <span class="integer">10000</span>, <span class="float">0.001</span>)  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">6</span>]: mombt.run_strategy(momentum=<span class="integer">2</span>)  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">6</span>]: (<span class="float">25262.540000000001</span>, -<span class="float">15301.620000000001</span>)

In [<span class="integer">7</span>]: mombt.plot_results()</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the module as <code>Mom</code></td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Instantiates an object of the backtesting class defining the 
starting capital to be 10,000 USD and the proportional transaction costs
 to be zero.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Backtests the momentum strategy based on a time window of two days; the strategy outperforms the benchmark instrument.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>This time, proportional transaction costs of 0.1% are assumed per trade.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>In that case, the strategy underperforms the benchmark instrument.</td>
</tr>
</tbody></table>
</div>
<div id="mom_plot_6" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/mom_plot_6.png" alt="mom plot 6">
</div>
<div class="title">Figure 15. Cumulative returns of the Apple stock and the momentum strategy (last two returns, no transaction costs)</div>
</div>
<div id="mom_plot_7" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/mom_plot_7.png" alt="mom plot 7">
</div>
<div class="title">Figure 16. Cumulative returns of the Apple stock and the momentum strategy (last two returns, transaction costs of 0.1%)</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="mean_reversion">4.5. Strategies based on Mean-Reversion</h3>
<div class="paragraph">
<p>Roughly speaking, mean-reversion strategies rely on a reasoning that 
is the opposite to momentum strategies. If a financial instrument has 
performed "too good" relative to its trend, it is shorted, and vice 
versa. To put it differently, while (time series) momentum strategies 
assume a <em>positive correlation</em> between returns, mean-reversion strategies assume a <em>negative correlation</em>. Balvers et al. (2000) write:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Mean reversion refers to a tendency of asset prices to return to a trend path.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Working with a simple moving average (SMA) as a proxy for a "trend 
path", a mean-reversion strategy in the Apple, Inc. stock can be 
backtested in a similar fashion as the backtests of the SMA- and 
momentum-based strategies. The idea is to define a threshold for the 
distance between the current stock price and the SMA which signals a 
long or short position.</p>
</div>
<div class="sect3">
<h4 id="_getting_into_the_basics_3">4.5.1. Getting into the Basics</h4>
<div class="paragraph">
<p>The examples to follow are for two different financial instruments 
for which one would expect significant mean reversion since they are 
both based on the gold price:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong><code>GLD</code></strong> is the symbol for SPDR Gold Shares which is the largest physically backed exchange traded fund (ETF) for gold (cf. <a href="http://www.spdrgoldshares.com/" target="_blank">SPDR Gold Shares home page</a>)</p>
</li>
<li>
<p><strong><code>GDX</code></strong> is the symbol for the VanEck 
Vectors Gold Miners ETF which invests in equity products to track the 
NYSE Arca Gold Miners Index (cf. <a href="https://www.vaneck.com/etf-europe/etf/equity/gdx/overview/" target="_blank">VanEck Vectors Gold Miners overview page</a>)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The example starts with <code>GLD</code> and implements a 
mean-reversion strategy on the basis of a SMA of 50 days and a threshold
 value of 10 for the absolute deviation of the current price to deviate 
from the SMA to signal a positioning. <a href="#mr_plot_1">Difference between current price of <code>GLD</code> and SMA as well as threshold values for generating mean-reversion signals</a>
 shows the differences between the current price as well as the positive
 and negative threshold value to generate sell and buy signals, 
respectively.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

In [<span class="integer">2</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

In [<span class="integer">3</span>]: <span class="keyword">from</span> <span class="include">pandas_datareader</span> <span class="keyword">import</span> <span class="include">data</span> <span class="keyword">as</span> web

In [<span class="integer">4</span>]: data = web.DataReader(<span class="string"><span class="delimiter">'</span><span class="content">GLD</span><span class="delimiter">'</span></span>, data_source=<span class="string"><span class="delimiter">'</span><span class="content">google</span><span class="delimiter">'</span></span>,
                              end=<span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>)[<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>]

In [<span class="integer">5</span>]: data = pd.DataFrame(data)

In [<span class="integer">6</span>]: data.rename(columns={<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>}, inplace=<span class="predefined-constant">True</span>)

In [<span class="integer">7</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>] / data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>))

In [<span class="integer">8</span>]: SMA = <span class="integer">50</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">9</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].rolling(SMA).mean()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">10</span>]: threshold = <span class="integer">10</span>  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">11</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">distance</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>] - data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">12</span>]: <span class="keyword">import</span> <span class="include">matplotlib.pyplot</span> <span class="keyword">as</span> plt

In [<span class="integer">13</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">distance</span><span class="delimiter">'</span></span>].dropna().plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>), legend=<span class="predefined-constant">True</span>)  <i class="conum" data-value="5"></i><b>(5)</b>
         plt.axhline(threshold, color=<span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>)
         plt.axhline(-threshold, color=<span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>)
         plt.axhline(<span class="integer">0</span>, color=<span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The SMA parameter is defined …​</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>…​ and SMA ("trend path") is calculated.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The threshold for the signal generation is defined.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The distance is calculated for every point in time.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The distance values are plotted.</td>
</tr>
</tbody></table>
</div>
<div id="mr_plot_1" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/mr_plot_1.png" alt="mr plot 1">
</div>
<div class="title">Figure 17. Difference between current price of <code>GLD</code> and SMA as well as threshold values for generating mean-reversion signals</div>
</div>
<div class="paragraph">
<p>Based on the differences and the fixed threshold values, positionings can again be derived in vectorized fashion. <a href="#mr_plot_2">Positionings generated for <code>GLD</code> based on the mean-reversion strategy</a> shows the resulting positionings.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">14</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.where(data[<span class="string"><span class="delimiter">'</span><span class="content">distance</span><span class="delimiter">'</span></span>] &gt; threshold,
            -<span class="integer">1</span>, np.nan)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">15</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.where(data[<span class="string"><span class="delimiter">'</span><span class="content">distance</span><span class="delimiter">'</span></span>] &lt; -threshold,
            <span class="integer">1</span>, data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>])  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">16</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.where(data[<span class="string"><span class="delimiter">'</span><span class="content">distance</span><span class="delimiter">'</span></span>] *
            data[<span class="string"><span class="delimiter">'</span><span class="content">distance</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>) &lt; <span class="integer">0</span>, <span class="integer">0</span>, data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>])  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">17</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].ffill().fillna(<span class="integer">0</span>)  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">18</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].ix[SMA:].plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="5"></i><b>(5)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>If the distance value is greater than the threshold value go short (set -1 in the new column <code>position</code>) otherwise set <code>NaN</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>If the distance value is lower than the negative threshold value go long (set 1), otherwise keep the column <code>position</code> unchanged.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>If there is a change in the sign of the distance value go market neutral (set 0), otherwise keep the column <code>position</code> unchanged.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Forward fill all <code>NaN</code> position with the previous values; replace all remaining <code>NaN</code> values by 0.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Plot the resulting positionings from the index position <code>SMA</code> on.</td>
</tr>
</tbody></table>
</div>
<div id="mr_plot_2" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/mr_plot_2.png" alt="mr plot 2">
</div>
<div class="title">Figure 18. Positionings generated for <code>GLD</code> based on the mean-reversion strategy</div>
</div>
<div class="paragraph">
<p>The final step is to derive the strategy returns that are shown in <a href="#mr_plot_3">Cumulative returns of the <code>GLD</code> ETF and the mean-reversion strategy (SMA = 50, threshold = 10)</a>. The strategy outperforms the <code>GLD</code> ETF by quite a margin although the particular parametrization leads to long periods of a neutral position.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">16</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>) * data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]

In [<span class="integer">17</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].dropna().cumsum(
              ).apply(np.exp).plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))</code></pre>
</div>
</div>
<div id="mr_plot_3" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/mr_plot_3.png" alt="mr plot 3">
</div>
<div class="title">Figure 19. Cumulative returns of the <code>GLD</code> ETF and the mean-reversion strategy (SMA = 50, threshold = 10)</div>
</div>
</div>
<div class="sect3">
<h4 id="_generalizing_the_approach_3">4.5.2. Generalizing the Approach</h4>
<div class="paragraph">
<p>As before, the vectorized backtesting is more efficient to implement based on a respective Python class. The class <code>MRVectorBacktester</code> presented in <a href="#mr_vector_backtester">Module with a class for vectorized backtesting of mean-reversion-based strategies</a> inherits from the <code>MomVectorBacktester</code> class and just replaces the <code>run_strategy</code> method to accommodate for the specifics of the mean-reversion strategy.</p>
</div>
<div class="paragraph">
<p>The example now uses <code>GDX</code> and sets the proportional 
transaction costs to 0.25%. The initial amount to invest is again set to
 10,000 USD. While the SMA is 50 as before, the threshold value is 
reduced to 5. <a href="#mr_plot_4">Cumulative returns of the <code>GDX</code> ETF and the mean-reversion strategy (SMA = 50, threshold = 5, transaction costs of 0.25%)</a> shows the performance of the mean-reversion strategy compared to the <code>GDX</code> ETF.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">MRVectorBacktester</span> <span class="keyword">as</span> MR  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: mrbt = MR.MRVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">GDX</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                                     <span class="integer">10000</span>, <span class="float">0.0025</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: mrbt.run_strategy(SMA=<span class="integer">50</span>, threshold=<span class="integer">5</span>)  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">3</span>]: (<span class="float">18293.98</span>, <span class="float">12921.76</span>)

In [<span class="integer">4</span>]: mrbt.plot_results()  <i class="conum" data-value="4"></i><b>(4)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the module as <code>MR</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Instantiates an object of the <code>MRVectorBacktester</code> class 
with 10,000 USD initial capital and 0.25% proportional transaction costs
 per trade; the strategy significantly outperforms the benchmark 
instrument in this case.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Backtests the mean-reversion strategy with an <code>SMA</code> value of 50 and a <code>threshold</code> value of 5.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Plots the cumulative performance of the strategy against</td>
</tr>
</tbody></table>
</div>
<div id="mr_plot_4" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/mr_plot_4.png" alt="mr plot 4">
</div>
<div class="title">Figure 20. Cumulative returns of the <code>GDX</code> ETF and the mean-reversion strategy (SMA = 50, threshold = 5, transaction costs of 0.25%)</div>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The emphasis in this chapter — as in the rest of the book — is on the
 technological implementation of certain concepts in algorithmic trading
 using Python. The strategies, parameters, data sets, etc. used are 
sometimes arbitrarily chosen and sometimes purposefully to make a 
certain point. If a trading strategy is shown to perform well, for 
example, given a certain data set and combination of parameters this 
neither constitutes any kind of recommendation nor allows it to draw 
more general conclusions about the general quality and performance 
potential of the strategy at hand. The reader is, of course, encouraged 
to use the codes and examples presented to explore his or her own ideas 
and to implement them in practice based on his or her own conclusions.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_conclusions_4">4.6. Conclusions</h3>
<div class="paragraph">
<p>Vectorization is a powerful concept in scientific computing as well 
as for financial analytics in the context of the backtesting of 
financial trading strategies. This chapter introduces to vectorization 
with both <code>NumPy</code> and <code>pandas</code> and applies it to 
backtest three types of trading strategies: strategies based on simple 
moving averages, momentum and mean-reversion. The chapter admittedly 
makes a number of simplifying assumptions and a rigorous backtesting of 
trading strategies needs to take into account more factors that 
determine trading success in practice, like, for example, data issues, 
selection issues or market microstructure elements. However, the major 
goal of the chapter is to focus on the concept of vectorization and what
 it can do in algorithmic trading from a technological and 
implementation point of view.</p>
</div>
</div>
<div class="sect2">
<h3 id="_further_resources_4">4.7. Further Resources</h3>
<div class="paragraph">
<p>For the basics of vectorization with <code>NumPy</code> and <code>pandas</code>, refer to these books:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>McKinney, Wes (2017): <em>Python for Data Analysis</em>. 2nd ed., O’Reilly, Bejing et al.</p>
</li>
<li>
<p>VanderPlas, Jake (2016): <em>Python Data Science Handbook</em>. O’Reilly, Bejing et al.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For the use of <code>NumPy</code> and <code>pandas</code> in a financial context, refer to these books:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Hilpisch, Yves (2014): <em>Python for Finance</em>. O’Reilly, Bejing et al.</p>
</li>
<li>
<p>Hilpisch, Yves (2015): <em>Derivatives Analytics with Python</em>. Wiley Finance.</p>
</li>
<li>
<p>Hilpisch, Yves (2017): <em>Listed Volatility and Variance Derivatives</em>. Wiley Finance.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For more background information and empirical results about trading strategies based on simple moving refer to these sources:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Brock, William, Josef Lakonishok, Blake LeBaron (1992): "Simple 
Technical Trading Rules and the Stochastic Properties of Stock Returns."
 <em>Journal of Finance</em>, Vol. 47, No. 5, 1731-1764.</p>
</li>
<li>
<p>Droke, Clif (2001): <em>Moving Averages Simplified.</em> Marketplace Books, Columbia.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The book by Ernest Chan covers in detail trading strategies based on 
momentum as well as on mean-reversion. The book is also a good source 
for the pitfalls of backtesting trading strategies.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Chan, Ernest (2013): <em>Algorithmic Trading</em>. John Wiley &amp; Sons, Hoboken et al.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>These research papers analyze characteristics and sources of profit for <em>cross-sectional momentum</em> strategies, the traditional approach to momentum:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Chan, Louis, Narasimhan Jegadeesh and Josef Lakonishok (1996): "Momentum Strategies." <em>Journal of Finance</em>, Vol. 51, No. 5, 1681-1713.</p>
</li>
<li>
<p>Jegadeesh, Narasimhan and Sheridan Titman (1993): "Returns to Buying 
Winners and Selling Losers: Implications for Stock Market Efficiency." <em>Journal of Finance</em>, Vol. 48, No. 1, 65-91.</p>
</li>
<li>
<p>Jegadeesh, Narasimhan and Sheridan Titman (2001): "Profitability of 
Momentum Strategies: An Evaluation of Alternative Explanations." <em>Journal of Finance</em>, Vol. 56, No. 2, 599-720.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The paper by Moskowitz et al. provides an analysis of so-called <em>time series</em> momentum strategies:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Moskowitz, Tobias, Yao Hua Ooi and Lasse Heje Pedersen (2012): "Time Series Momentum." <em>Journal of Financial Economics</em>, Vol. 104, 228-250.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>These papers empirically analyze mean reversion in asset prices:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Balvers, Ronald, Yangru Wu and Erik Gilliland (2000): "Mean Reversion
 across National Stock Markets and Parametric Contrarian Investment 
Strategies." <em>Journal of Finance</em>, Vol. 55, No. 2, 745-772.</p>
</li>
<li>
<p>Kim, Myung Jig, Charles Nelson and Richard Startz (1991): "Mean 
Reversion in Stock Prices? A Reappraisal of the Empirical Evidence." <em>Review of Economic Studies</em>, Vol. 58, 515-528.</p>
</li>
<li>
<p>Spierdijk, Laura, Jacob Bikker and Peter van den Hoek (2012): "Mean 
Reversion in International Stock markets: An Empirical Analysis of the 
20th Century." <em>Journal of International Money and Finance</em>, Vol. 31, 228-249.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_python_scripts_2">4.8. Python Scripts</h3>
<div id="sma_vector_backtester" class="exampleblock">
<div class="title">Example 7. Module with a class for vectorized backtesting of SMA-based strategies</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Module with Class</span>
<span class="comment"># for Vectorized Backtesting</span>
<span class="comment"># of SMA-based Strategies</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np
<span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd
<span class="keyword">from</span> <span class="include">pandas_datareader</span> <span class="keyword">import</span> <span class="include">data</span> <span class="keyword">as</span> web
<span class="keyword">from</span> <span class="include">scipy.optimize</span> <span class="keyword">import</span> <span class="include">brute</span>


<span class="keyword">class</span> <span class="class">SMAVectorBacktester</span>(<span class="predefined">object</span>):
    <span class="docstring"><span class="delimiter">'''</span><span class="content"> Class for the vectorized backtesting of SMA-based trading strategies.</span><span class="content">
</span><span class="content">
</span><span class="content">    Attributes</span><span class="content">
</span><span class="content">    ==========</span><span class="content">
</span><span class="content">    symbol: str</span><span class="content">
</span><span class="content">        Google Finance symbol with which to work with</span><span class="content">
</span><span class="content">    SMA1: int</span><span class="content">
</span><span class="content">        time window in days for shorter SMA</span><span class="content">
</span><span class="content">    SMA2: int</span><span class="content">
</span><span class="content">        time window in days for longer SMA</span><span class="content">
</span><span class="content">    start: str</span><span class="content">
</span><span class="content">        start date for data retrieval</span><span class="content">
</span><span class="content">    end: str</span><span class="content">
</span><span class="content">        end date for data retrieval</span><span class="content">
</span><span class="content">
</span><span class="content">    Methods</span><span class="content">
</span><span class="content">    =======</span><span class="content">
</span><span class="content">    get_data:</span><span class="content">
</span><span class="content">        retrieves and prepares the base data set</span><span class="content">
</span><span class="content">    set_parameters:</span><span class="content">
</span><span class="content">        sets one or two new SMA parameters</span><span class="content">
</span><span class="content">    run_strategy:</span><span class="content">
</span><span class="content">        runs the backtest for the SMA-based strategy</span><span class="content">
</span><span class="content">    plot_results:</span><span class="content">
</span><span class="content">        plots the performance of the strategy compared to the symbol</span><span class="content">
</span><span class="content">    update_and_run:</span><span class="content">
</span><span class="content">        updates SMA parameters and returns the (negative) absolute performance</span><span class="content">
</span><span class="content">    optimize_parameters:</span><span class="content">
</span><span class="content">        implements a brute force optimizeation for the two SMA parameters</span><span class="content">
</span><span class="content">    </span><span class="delimiter">'''</span></span>

    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, symbol, SMA1, SMA2, start, end):
        <span class="predefined-constant">self</span>.symbol = symbol
        <span class="predefined-constant">self</span>.SMA1 = SMA1
        <span class="predefined-constant">self</span>.SMA2 = SMA2
        <span class="predefined-constant">self</span>.start = start
        <span class="predefined-constant">self</span>.end = end
        <span class="predefined-constant">self</span>.results = <span class="predefined-constant">None</span>
        <span class="predefined-constant">self</span>.get_data()

    <span class="keyword">def</span> <span class="function">get_data</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Retrieves and prepares the data.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        raw = web.DataReader(<span class="predefined-constant">self</span>.symbol, data_source=<span class="string"><span class="delimiter">'</span><span class="content">google</span><span class="delimiter">'</span></span>,
                             start=<span class="predefined-constant">self</span>.start, end=<span class="predefined-constant">self</span>.end)[<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>]
        raw = pd.DataFrame(raw)
        raw.rename(columns={<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>}, inplace=<span class="predefined-constant">True</span>)
        raw[<span class="string"><span class="delimiter">'</span><span class="content">return</span><span class="delimiter">'</span></span>] = np.log(raw / raw.shift(<span class="integer">1</span>))
        raw[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] = raw[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].rolling(<span class="predefined-constant">self</span>.SMA1).mean()
        raw[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>] = raw[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].rolling(<span class="predefined-constant">self</span>.SMA2).mean()
        <span class="predefined-constant">self</span>.data = raw

    <span class="keyword">def</span> <span class="function">set_parameters</span>(<span class="predefined-constant">self</span>, SMA1=<span class="predefined-constant">None</span>, SMA2=<span class="predefined-constant">None</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Updates SMA parameters and resp. time series.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> SMA1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="predefined-constant">None</span>:
            <span class="predefined-constant">self</span>.SMA1 = SMA1
            <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].rolling(<span class="predefined-constant">self</span>.SMA1).mean()
        <span class="keyword">if</span> SMA2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="predefined-constant">None</span>:
            <span class="predefined-constant">self</span>.SMA2 = SMA2
            <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].rolling(<span class="predefined-constant">self</span>.SMA2).mean()

    <span class="keyword">def</span> <span class="function">run_strategy</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Backtests the trading strategy.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        data = <span class="predefined-constant">self</span>.data.copy().dropna()
        data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.where(data[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] &gt; data[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>], <span class="integer">1</span>, -<span class="integer">1</span>)
        data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>) * data[<span class="string"><span class="delimiter">'</span><span class="content">return</span><span class="delimiter">'</span></span>]
        data[<span class="string"><span class="delimiter">'</span><span class="content">creturns</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">return</span><span class="delimiter">'</span></span>].cumsum().apply(np.exp)
        data[<span class="string"><span class="delimiter">'</span><span class="content">cstrategy</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>].cumsum().apply(np.exp)
        <span class="predefined-constant">self</span>.results = data
        <span class="comment"># absolute performance of the strategy</span>
        aperf = data[<span class="string"><span class="delimiter">'</span><span class="content">cstrategy</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>]
        <span class="comment"># out-/underperformance of strategy</span>
        operf = aperf - data[<span class="string"><span class="delimiter">'</span><span class="content">creturns</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>]
        <span class="keyword">return</span> <span class="predefined">round</span>(aperf, <span class="integer">2</span>), <span class="predefined">round</span>(operf, <span class="integer">2</span>)

    <span class="keyword">def</span> <span class="function">plot_results</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Plots the cumulative performance of the trading strategy</span><span class="content">
</span><span class="content">        compared to the symbol.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.results <span class="keyword">is</span> <span class="predefined-constant">None</span>:
            print(<span class="string"><span class="delimiter">'</span><span class="content">No results to plot yet. Run a strategy.</span><span class="delimiter">'</span></span>)
        title = <span class="string"><span class="delimiter">'</span><span class="content">%s | SMA1 = %d, SMA2 = %d</span><span class="delimiter">'</span></span> % (<span class="predefined-constant">self</span>.symbol, <span class="predefined-constant">self</span>.SMA1, <span class="predefined-constant">self</span>.SMA2)
        <span class="predefined-constant">self</span>.results[[<span class="string"><span class="delimiter">'</span><span class="content">creturns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">cstrategy</span><span class="delimiter">'</span></span>]].plot(title=title, figsize=(<span class="integer">10</span>, <span class="integer">6</span>))

    <span class="keyword">def</span> <span class="function">update_and_run</span>(<span class="predefined-constant">self</span>, SMA):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Updates SMA parameters and returns negative absolute performance</span><span class="content">
</span><span class="content">        (for minimazation algorithm).</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters</span><span class="content">
</span><span class="content">        ==========</span><span class="content">
</span><span class="content">        SMA: tuple</span><span class="content">
</span><span class="content">            SMA parameter tuple</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.set_parameters(<span class="predefined">int</span>(SMA[<span class="integer">0</span>]), <span class="predefined">int</span>(SMA[<span class="integer">1</span>]))
        <span class="keyword">return</span> -<span class="predefined-constant">self</span>.run_strategy()[<span class="integer">0</span>]

    <span class="keyword">def</span> <span class="function">optimize_parameters</span>(<span class="predefined-constant">self</span>, SMA1_range, SMA2_range):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Finds global maximum given the SMA parameter ranges.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters</span><span class="content">
</span><span class="content">        ==========</span><span class="content">
</span><span class="content">        SMA1_range, SMA2_range: tuple</span><span class="content">
</span><span class="content">            tuples of the form (start, end, step size)</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        opt = brute(<span class="predefined-constant">self</span>.update_and_run, (SMA1_range, SMA2_range), finish=<span class="predefined-constant">None</span>)
        <span class="keyword">return</span> opt, -<span class="predefined-constant">self</span>.update_and_run(opt)


<span class="keyword">if</span> __name__ == <span class="string"><span class="delimiter">'</span><span class="content">__main__</span><span class="delimiter">'</span></span>:
    smabt = SMAVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, <span class="integer">42</span>, <span class="integer">252</span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>)
    print(smabt.run_strategy())
    smabt.set_parameters(SMA1=<span class="integer">20</span>, SMA2=<span class="integer">100</span>)
    print(smabt.run_strategy())
    print(smabt.optimize_parameters((<span class="integer">30</span>, <span class="integer">56</span>, <span class="integer">4</span>), (<span class="integer">200</span>, <span class="integer">300</span>, <span class="integer">4</span>)))</code></pre>
</div>
</div>
</div>
</div>
<div id="mom_vector_backtester" class="exampleblock">
<div class="title">Example 8. Module with a class for vectorized backtesting of momentum-based strategies</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Module with Class</span>
<span class="comment"># for Vectorized Backtesting</span>
<span class="comment"># of Momentum-based Strategies</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np
<span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd
<span class="keyword">from</span> <span class="include">pandas_datareader</span> <span class="keyword">import</span> <span class="include">data</span> <span class="keyword">as</span> web


<span class="keyword">class</span> <span class="class">MomVectorBacktester</span>(<span class="predefined">object</span>):
    <span class="docstring"><span class="delimiter">'''</span><span class="content"> Class for the vectorized backtesting of</span><span class="content">
</span><span class="content">    Momentum-based trading strategies.</span><span class="content">
</span><span class="content">
</span><span class="content">    Attributes</span><span class="content">
</span><span class="content">    ==========</span><span class="content">
</span><span class="content">    symbol: str</span><span class="content">
</span><span class="content">        Google Finance symbol with which to work with</span><span class="content">
</span><span class="content">    start: str</span><span class="content">
</span><span class="content">        start date for data retrieval</span><span class="content">
</span><span class="content">    end: str</span><span class="content">
</span><span class="content">        end date for data retrieval</span><span class="content">
</span><span class="content">    amount: int, float</span><span class="content">
</span><span class="content">        amount to be invested at the beginning</span><span class="content">
</span><span class="content">    tc: float</span><span class="content">
</span><span class="content">        proportional transaction costs (e.g. 0.5% = 0.005) per trade</span><span class="content">
</span><span class="content">
</span><span class="content">    Methods</span><span class="content">
</span><span class="content">    =======</span><span class="content">
</span><span class="content">    get_data:</span><span class="content">
</span><span class="content">        retrieves and prepares the base data set</span><span class="content">
</span><span class="content">    run_strategy:</span><span class="content">
</span><span class="content">        runs the backtest for the momentum-based strategy</span><span class="content">
</span><span class="content">    plot_results:</span><span class="content">
</span><span class="content">        plots the performance of the strategy compared to the symbol</span><span class="content">
</span><span class="content">    </span><span class="delimiter">'''</span></span>

    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, symbol, start, end, amount, tc):
        <span class="predefined-constant">self</span>.symbol = symbol
        <span class="predefined-constant">self</span>.start = start
        <span class="predefined-constant">self</span>.end = end
        <span class="predefined-constant">self</span>.amount = amount
        <span class="predefined-constant">self</span>.tc = tc
        <span class="predefined-constant">self</span>.results = <span class="predefined-constant">None</span>
        <span class="predefined-constant">self</span>.get_data()

    <span class="keyword">def</span> <span class="function">get_data</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Retrieves and prepares the data.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        raw = web.DataReader(<span class="predefined-constant">self</span>.symbol, data_source=<span class="string"><span class="delimiter">'</span><span class="content">google</span><span class="delimiter">'</span></span>,
                             start=<span class="predefined-constant">self</span>.start, end=<span class="predefined-constant">self</span>.end)[<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>]
        raw = pd.DataFrame(raw)
        raw.rename(columns={<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>}, inplace=<span class="predefined-constant">True</span>)
        raw[<span class="string"><span class="delimiter">'</span><span class="content">return</span><span class="delimiter">'</span></span>] = np.log(raw / raw.shift(<span class="integer">1</span>))
        <span class="predefined-constant">self</span>.data = raw

    <span class="keyword">def</span> <span class="function">run_strategy</span>(<span class="predefined-constant">self</span>, momentum=<span class="integer">1</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Backtests the trading strategy.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.momentum = momentum
        data = <span class="predefined-constant">self</span>.data.copy()
        data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.sign(data[<span class="string"><span class="delimiter">'</span><span class="content">return</span><span class="delimiter">'</span></span>].rolling(momentum).mean())
        data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>) * data[<span class="string"><span class="delimiter">'</span><span class="content">return</span><span class="delimiter">'</span></span>]
        <span class="comment"># determine when a trade takes place</span>
        trades = data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].diff().fillna(<span class="integer">0</span>) != <span class="integer">0</span>
        <span class="comment"># subtract transaction costs from return when trade takes place</span>
        data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>][trades] -= <span class="predefined-constant">self</span>.tc
        data[<span class="string"><span class="delimiter">'</span><span class="content">creturns</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.amount * data[<span class="string"><span class="delimiter">'</span><span class="content">return</span><span class="delimiter">'</span></span>].cumsum().apply(np.exp)
        data[<span class="string"><span class="delimiter">'</span><span class="content">cstrategy</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.amount * \
            data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>].cumsum().apply(np.exp)
        <span class="predefined-constant">self</span>.results = data
        <span class="comment"># absolute performance of the strategy</span>
        aperf = <span class="predefined-constant">self</span>.results[<span class="string"><span class="delimiter">'</span><span class="content">cstrategy</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>]
        <span class="comment"># out-/underperformance of strategy</span>
        operf = aperf - <span class="predefined-constant">self</span>.results[<span class="string"><span class="delimiter">'</span><span class="content">creturns</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>]
        <span class="keyword">return</span> <span class="predefined">round</span>(aperf, <span class="integer">2</span>), <span class="predefined">round</span>(operf, <span class="integer">2</span>)

    <span class="keyword">def</span> <span class="function">plot_results</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Plots the cumulative performance of the trading strategy</span><span class="content">
</span><span class="content">        compared to the symbol.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.results <span class="keyword">is</span> <span class="predefined-constant">None</span>:
            print(<span class="string"><span class="delimiter">'</span><span class="content">No results to plot yet. Run a strategy.</span><span class="delimiter">'</span></span>)
        title = <span class="string"><span class="delimiter">'</span><span class="content">%s | TC = %.4f</span><span class="delimiter">'</span></span> % (<span class="predefined-constant">self</span>.symbol, <span class="predefined-constant">self</span>.tc)
        <span class="predefined-constant">self</span>.results[[<span class="string"><span class="delimiter">'</span><span class="content">creturns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">cstrategy</span><span class="delimiter">'</span></span>]].plot(title=title,
                                                     figsize=(<span class="integer">10</span>, <span class="integer">6</span>))


<span class="keyword">if</span> __name__ == <span class="string"><span class="delimiter">'</span><span class="content">__main__</span><span class="delimiter">'</span></span>:
    mombt = MomVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, <span class="integer">10000</span>, <span class="float">0.0</span>)
    print(mombt.run_strategy())
    print(mombt.run_strategy(momentum=<span class="integer">2</span>))
    mombt = MomVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, <span class="integer">10000</span>, <span class="float">0.001</span>)
    print(mombt.run_strategy(momentum=<span class="integer">2</span>))</code></pre>
</div>
</div>
</div>
</div>
<div id="mr_vector_backtester" class="exampleblock">
<div class="title">Example 9. Module with a class for vectorized backtesting of mean-reversion-based strategies</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Module with Class</span>
<span class="comment"># for Vectorized Backtesting</span>
<span class="comment"># of Momentum-based Strategies</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">from</span> <span class="include">MomVectorBacktester</span> <span class="keyword">import</span> <span class="include">*</span>


<span class="keyword">class</span> <span class="class">MRVectorBacktester</span>(MomVectorBacktester):
    <span class="docstring"><span class="delimiter">'''</span><span class="content"> Class for the vectorized backtesting of</span><span class="content">
</span><span class="content">    Mean Reversion-based trading strategies.</span><span class="content">
</span><span class="content">
</span><span class="content">    Attributes</span><span class="content">
</span><span class="content">    ==========</span><span class="content">
</span><span class="content">    symbol: str</span><span class="content">
</span><span class="content">        Google Finance symbol with which to work with</span><span class="content">
</span><span class="content">    start: str</span><span class="content">
</span><span class="content">        start date for data retrieval</span><span class="content">
</span><span class="content">    end: str</span><span class="content">
</span><span class="content">        end date for data retrieval</span><span class="content">
</span><span class="content">    amount: int, float</span><span class="content">
</span><span class="content">        amount to be invested at the beginning</span><span class="content">
</span><span class="content">    tc: float</span><span class="content">
</span><span class="content">        proportional transaction costs (e.g. 0.5% = 0.005) per trade</span><span class="content">
</span><span class="content">
</span><span class="content">    Methods</span><span class="content">
</span><span class="content">    =======</span><span class="content">
</span><span class="content">    get_data:</span><span class="content">
</span><span class="content">        retrieves and prepares the base data set</span><span class="content">
</span><span class="content">    run_strategy:</span><span class="content">
</span><span class="content">        runs the backtest for the mean reversion-based strategy</span><span class="content">
</span><span class="content">    plot_results:</span><span class="content">
</span><span class="content">        plots the performance of the strategy compared to the symbol</span><span class="content">
</span><span class="content">    </span><span class="delimiter">'''</span></span>

    <span class="keyword">def</span> <span class="function">run_strategy</span>(<span class="predefined-constant">self</span>, SMA, threshold):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Backtests the trading strategy.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        data = <span class="predefined-constant">self</span>.data.copy()
        data[<span class="string"><span class="delimiter">'</span><span class="content">sma</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].rolling(SMA).mean()
        data[<span class="string"><span class="delimiter">'</span><span class="content">distance</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>] - data[<span class="string"><span class="delimiter">'</span><span class="content">sma</span><span class="delimiter">'</span></span>]
        <span class="comment"># sell signals</span>
        data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.where(data[<span class="string"><span class="delimiter">'</span><span class="content">distance</span><span class="delimiter">'</span></span>] &gt; threshold, -<span class="integer">1</span>, np.nan)
        <span class="comment"># buy signals</span>
        data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.where(data[<span class="string"><span class="delimiter">'</span><span class="content">distance</span><span class="delimiter">'</span></span>] &lt; -threshold,
                                    <span class="integer">1</span>, data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>])
        <span class="comment"># crossing of current price and SMA (zero distance)</span>
        data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.where(data[<span class="string"><span class="delimiter">'</span><span class="content">distance</span><span class="delimiter">'</span></span>] *
                                    data[<span class="string"><span class="delimiter">'</span><span class="content">distance</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>) &lt; <span class="integer">0</span>,
                                    <span class="integer">0</span>, data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>])
        data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].ffill().fillna(<span class="integer">0</span>)
        data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>) * data[<span class="string"><span class="delimiter">'</span><span class="content">return</span><span class="delimiter">'</span></span>]
        <span class="comment"># determine when a trade takes place</span>
        trades = data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].diff().fillna(<span class="integer">0</span>) != <span class="integer">0</span>
        <span class="comment"># subtract transaction costs from return when trade takes place</span>
        data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>][trades] -= <span class="predefined-constant">self</span>.tc
        data[<span class="string"><span class="delimiter">'</span><span class="content">creturns</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.amount * data[<span class="string"><span class="delimiter">'</span><span class="content">return</span><span class="delimiter">'</span></span>].cumsum().apply(np.exp)
        data[<span class="string"><span class="delimiter">'</span><span class="content">cstrategy</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.amount * \
            data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>].cumsum().apply(np.exp)
        <span class="predefined-constant">self</span>.results = data
        <span class="comment"># absolute performance of the strategy</span>
        aperf = <span class="predefined-constant">self</span>.results[<span class="string"><span class="delimiter">'</span><span class="content">cstrategy</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>]
        <span class="comment"># out-/underperformance of strategy</span>
        operf = aperf - <span class="predefined-constant">self</span>.results[<span class="string"><span class="delimiter">'</span><span class="content">creturns</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>]
        <span class="keyword">return</span> <span class="predefined">round</span>(aperf, <span class="integer">2</span>), <span class="predefined">round</span>(operf, <span class="integer">2</span>)


<span class="keyword">if</span> __name__ == <span class="string"><span class="delimiter">'</span><span class="content">__main__</span><span class="delimiter">'</span></span>:
    mrbt = MRVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">GLD</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, <span class="integer">10000</span>, <span class="float">0.0</span>)
    print(mrbt.run_strategy(SMA=<span class="integer">50</span>, threshold=<span class="integer">10</span>))
    mrbt = MRVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">GLD</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, <span class="integer">10000</span>, <span class="float">0.0025</span>)
    print(mrbt.run_strategy(SMA=<span class="integer">50</span>, threshold=<span class="integer">10</span>))
    mrbt = MRVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">GDX</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, <span class="integer">10000</span>, <span class="float">0.0025</span>)
    print(mrbt.run_strategy(SMA=<span class="integer">50</span>, threshold=<span class="integer">5</span>))</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="machine_learning">5. Predicting Market Movements with Machine Learning</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph align_me_right">
<p>Skynet begins to learn at a geometric rate. It becomes self-aware at 2:14 a.m. Eastern time, August 29th.</p>
</div>
</blockquote>
<div class="attribution">
— The Terminator (Terminator 2)
</div>
</div>
<div class="sect2">
<h3 id="_introduction_5">5.1. Introduction</h3>
<div class="paragraph">
<p>Recent years have seen tremendous progress in the areas of machine 
learning, deep learning and artificial intelligence. The financial 
industry in general and algorithmic traders around the globe in 
particular try to benefit from these technological advances as well. 
This chapter introduces techniques from statistics, like linear 
regression, and machine learning, like support vector machines, to 
predict future price movements based on past returns. It also 
illustrates the use of <code>tensorflow</code>, Google’s open source 
deep learning library, to predict stock market movements. This chapter 
can of course not replace a thorough introduction to machine learning 
but it can show, from a practitioner’s point of view, how to concretely 
apply certain techniques to the price prediction problem.<sup class="footnote">[<a id="_footnoteref_24" class="footnote" href="#_footnote_24" title="View footnote.">24</a>]</sup></p>
</div>
<div class="paragraph">
<p>The chapter covers the following types of trading strategies:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>linear regression-based strategies</strong>: such strategies 
use linear regression to extrapolate a trend or to derive a financial 
instrument’s (direction of) future price movement</p>
</li>
<li>
<p><strong>machine learning-based strategies</strong>: in algorithmic 
trading it is generally enough to predict the direction of movement for a
 financial instrument as opposed to the absolute magnitude of that 
movement; with this reasoning the prediction problem boils basically 
down to a <em>classification problem</em> of deciding whether there will
 be an upwards or downwards movement; different machine learning 
algorithms have been developed to attack such classification problems; 
this chapter introduces logistic regression for classification</p>
</li>
<li>
<p><strong>deep learning-based strategies</strong>: deep learning has 
been popularized by such technological giants as Google; similar to 
machine learning algorithms, deep learning algorithms based on neural 
networks allow to attack classification problems faced in stock market 
prediction</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The chapter is organized as follow. <a href="#linear_regression">Using Linear Regression for Market Movement Prediction</a> introduces linear regression as a technique to predict index levels and the direction of price movements. <a href="#machine_learning_scikit">Using Machine Learning for Market Movement Prediction</a> focuses on machine learning and introduces <code>scikit-learn</code>
 on the basis of linear regression. It mainly covers logistic regression
 as an alternative linear model explicitly applicable to classification 
problems. <a href="#deep_learning">Using Deep Learning for Market Movement Prediction</a> introduces <code>tensorflow</code> to predict the direction of stock market movements based on neural network algorithms.</p>
</div>
<div class="paragraph">
<p>The major goal of this chapter is to provide practical approaches to 
predict future price movements in financial markets based on past 
returns. The basic assumption is that the efficient market hypothesis 
does not hold universally and that — similar to the reasoning behind the
 technical analysis of stock price charts — the history might provide 
some insights about the future that can be mined with statistical 
techniques.</p>
</div>
</div>
<div class="sect2">
<h3 id="linear_regression">5.2. Using Linear Regression for Market Movement Prediction</h3>
<div class="paragraph">
<p>Ordinary least squares (OLS) and linear regression are decades-old 
statistical techniques that have proven useful in many different 
application areas. This section uses linear regression for price 
prediction purposes. However, it starts with a quick review of the 
basics and an introduction to the basic approach.</p>
</div>
<div class="sect3">
<h4 id="_a_quick_review_of_linear_regression">5.2.1. A Quick Review of Linear Regression</h4>
<div class="paragraph">
<p>Before applying linear regression, a quick review of the approach 
based on some randomized data might be helpful. The example code uses <code>NumPy</code> to first generate a <code>ndarray</code> object with data for the independent variable <code>x</code>. Based on this data, randomized data (“noisy data”) for the dependent variable <code>y</code> is generated. <code>NumPy</code> provides two functions, <code>polyfit</code> and <code>polyval</code>,
 for a convenient implementation of OLS regression based on simple 
monomials. For a linear regression the highest degree for the monomials 
to be used is set to 1. <a href="#lr_plot_1">Linear regression illustrated based on randomized data</a> shows the data and the regression line.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: <span class="keyword">import</span> <span class="include">matplotlib.pyplot</span> <span class="keyword">as</span> plt  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: x = np.linspace(<span class="integer">0</span>, <span class="integer">10</span>)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">4</span>]: y = x + np.random.standard_normal(<span class="predefined">len</span>(x))  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">5</span>]: reg = np.polyfit(x, y, deg=<span class="integer">1</span>)  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">6</span>]: reg  <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">6</span>]: array([ <span class="float">0.94612934</span>,  <span class="float">0.22855261</span>])

In [<span class="integer">7</span>]: plt.figure(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="7"></i><b>(7)</b>
        plt.plot(x, y, <span class="string"><span class="delimiter">'</span><span class="content">bo</span><span class="delimiter">'</span></span>, label=<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="8"></i><b>(8)</b>
        plt.plot(x, np.polyval(reg, x), <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>, lw=<span class="float">2.5</span>, label=<span class="string"><span class="delimiter">'</span><span class="content">linear regression</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="9"></i><b>(9)</b>
        plt.legend(loc=<span class="integer">0</span>)  <i class="conum" data-value="10"></i><b>(10)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Import <code>NumPy</code> …​</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>…​ and <code>matplotlib</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Generates an evenly spaced grid of floats for the <code>x</code> values between 0 and 10.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Generates the randomized data for the <code>y</code> values.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>OLS regression of degree 1, i.e. linear regression, is conducted.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Prints out the optimal parameter values.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Creates a new figure object.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Plots the original data set as dots.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>Plots the regression line.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>Creates the legend.</td>
</tr>
</tbody></table>
</div>
<div id="lr_plot_1" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/lr_plot_1.png" alt="lr plot 1">
</div>
<div class="title">Figure 21. Linear regression illustrated based on randomized data</div>
</div>
<div class="paragraph">
<p>The interval for the dependent variable <code>x</code> is <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-49"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-50">x</span><span class="MJXp-mo" id="MJXp-Span-51" style="margin-left: 0.333em; margin-right: 0.333em;">∈</span><span class="MJXp-mo" id="MJXp-Span-52" style="margin-left: 0em; margin-right: 0em;">[</span><span class="MJXp-mn" id="MJXp-Span-53">0</span><span class="MJXp-mo" id="MJXp-Span-54" style="margin-left: 0em; margin-right: 0.222em;">,</span><span class="MJXp-mn" id="MJXp-Span-55">10</span><span class="MJXp-mo" id="MJXp-Span-56" style="margin-left: 0em; margin-right: 0em;">]</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-4-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-4">x \in [ 0,10 ] </script>. Enlarging the interval to, say, <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-57"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-58">x</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-59">i</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-60">n</span><span class="MJXp-mo" id="MJXp-Span-61" style="margin-left: 0em; margin-right: 0em;">[</span><span class="MJXp-mn" id="MJXp-Span-62">0</span><span class="MJXp-mo" id="MJXp-Span-63" style="margin-left: 0em; margin-right: 0.222em;">,</span><span class="MJXp-mn" id="MJXp-Span-64">20</span><span class="MJXp-mo" id="MJXp-Span-65" style="margin-left: 0em; margin-right: 0em;">]</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-5-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-5">x in [ 0,20 ] </script> allows to “predict” values for the dependent variable <code>y</code> beyond the domain of the original data set by an extrapolation given the optimal regression parameters. <a href="#lr_plot_2">Prediction (extrapolation) based on linear regression</a> visualizes the extrapolation.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">8</span>]: plt.figure(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))
        plt.plot(x, y, <span class="string"><span class="delimiter">'</span><span class="content">bo</span><span class="delimiter">'</span></span>, label=<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>)
        xn = np.linspace(<span class="integer">0</span>, <span class="integer">20</span>)  <i class="conum" data-value="1"></i><b>(1)</b>
        plt.plot(xn, np.polyval(reg, xn), <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>, lw=<span class="float">2.5</span>, label=<span class="string"><span class="delimiter">'</span><span class="content">linear regression</span><span class="delimiter">'</span></span>)
        plt.legend(loc=<span class="integer">0</span>)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Generates an enlarged domain for the <code>x</code> values.</td>
</tr>
</tbody></table>
</div>
<div id="lr_plot_2" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/lr_plot_2.png" alt="lr plot 2">
</div>
<div class="title">Figure 22. Prediction (extrapolation) based on linear regression</div>
</div>
</div>
<div class="sect3">
<h4 id="_the_basic_idea_for_price_prediction">5.2.2. The Basic Idea for Price Prediction</h4>
<div class="paragraph">
<p>Price prediction based on time series data has to deal with one 
special feature: the time-based ordering of the data. Generally, the 
ordering of the data is not important for the application of linear 
regression. In the first example above, the data on which the linear 
regression is implemented could have been compiled in completely 
different orderings — while keeping the <code>x</code> and <code>y</code> pairs constant. Independent of the ordering, the optimal regression parameters would have been the same.</p>
</div>
<div class="paragraph">
<p>In the context of predicting tomorrow’s index level, for example, it 
seems to be, however, of paramount importance to have the historic index
 levels in the correct order. If this is the case, one would then try to
 predict tomorrow’s index level given the index level of today, 
yesterday, the day before, etc. The number of days used as input is 
generally called <em>lags</em>. Using today’s index level and the two more from before therefore translates into <em>three lags</em>.</p>
</div>
<div class="paragraph">
<p>The next example casts this idea again into a rather simple context. The data the example uses are the numbers from 0 to 11.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

In [<span class="integer">2</span>]: x = np.arange(<span class="integer">12</span>)

In [<span class="integer">3</span>]: x
Out[<span class="integer">3</span>]: array([ <span class="integer">0</span>,  <span class="integer">1</span>,  <span class="integer">2</span>,  <span class="integer">3</span>,  <span class="integer">4</span>,  <span class="integer">5</span>,  <span class="integer">6</span>,  <span class="integer">7</span>,  <span class="integer">8</span>,  <span class="integer">9</span>, <span class="integer">10</span>, <span class="integer">11</span>])</code></pre>
</div>
</div>
<div class="paragraph">
<p>Assume three lags for the regression. This implies three independent 
variables for the regression and one dependent one. More concretely, 0, 1
 and 2 are values of the independent variables while 3 would be the 
corresponding value for the dependent variable. Moving forward on step 
(“in time”), the values are 1, 2, and 3 as well as 4. The final 
combination of values is 8, 9 and 10 with 11. The problem therefore is 
to cast this idea formally into a linear equation of the form <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-66"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-67">A</span><span class="MJXp-mo" id="MJXp-Span-68" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-69">x</span><span class="MJXp-mo" id="MJXp-Span-70" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-71">b</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-6-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-6">A \cdot x = b</script> where <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-72"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-73">A</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-7-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-7">A</script> is a matrix and <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-74"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-75">x</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-8-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-8">x</script> and <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-76"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-77">b</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-9-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-9">b</script> are vectors.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">4</span>]: lags = <span class="integer">3</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">5</span>]: m = np.zeros((lags + <span class="integer">1</span>, <span class="predefined">len</span>(x) - lags))  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">6</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(lags + <span class="integer">1</span>):  <i class="conum" data-value="3"></i><b>(3)</b>
            <span class="keyword">if</span> i == lags:  <i class="conum" data-value="4"></i><b>(4)</b>
                m[i] = x[i:]  <i class="conum" data-value="5"></i><b>(5)</b>
            <span class="keyword">else</span>:  <i class="conum" data-value="6"></i><b>(6)</b>
                m[i] = x[i:i - lags]  <i class="conum" data-value="7"></i><b>(7)</b>

In [<span class="integer">6</span>]: m.T  <i class="conum" data-value="8"></i><b>(8)</b>
Out[<span class="integer">6</span>]: array([[  <span class="float">0.</span>,   <span class="float">1.</span>,   <span class="float">2.</span>,   <span class="float">3.</span>],
               [  <span class="float">1.</span>,   <span class="float">2.</span>,   <span class="float">3.</span>,   <span class="float">4.</span>],
               [  <span class="float">2.</span>,   <span class="float">3.</span>,   <span class="float">4.</span>,   <span class="float">5.</span>],
               [  <span class="float">3.</span>,   <span class="float">4.</span>,   <span class="float">5.</span>,   <span class="float">6.</span>],
               [  <span class="float">4.</span>,   <span class="float">5.</span>,   <span class="float">6.</span>,   <span class="float">7.</span>],
               [  <span class="float">5.</span>,   <span class="float">6.</span>,   <span class="float">7.</span>,   <span class="float">8.</span>],
               [  <span class="float">6.</span>,   <span class="float">7.</span>,   <span class="float">8.</span>,   <span class="float">9.</span>],
               [  <span class="float">7.</span>,   <span class="float">8.</span>,   <span class="float">9.</span>,  <span class="float">10.</span>],
               [  <span class="float">8.</span>,   <span class="float">9.</span>,  <span class="float">10.</span>,  <span class="float">11.</span>]])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Defines the number of lags.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Instantiates an <code>ndarray</code> object with the appropriate dimensions.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Iterates over the numbers from 0 to <code>lags</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>In the special case of <code>i == lags</code> …​</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>…​ it executes this line of code.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>In all other cases …​</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>…​ this line of code.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Prints out the transpose of the <code>ndarray</code> object <code>m</code>.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>In the transposed <code>ndarray</code> object <code>m</code>, the first three columns contain the values for the three independent variables. They together form the matrix <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-78"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-79">A</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-10-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-10">A</script>. The fourth and final column represents the vector <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-80"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-81">b</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-11-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-11">b</script>. Linear regression then yields as a result the missing vector <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-82"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-83">x</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-12-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-12">x</script>. Since there are now more independent variables, <code>polyfit</code> and <code>polyval</code> do not work anymore. However, there is a function in the <code>NumPy</code> sub-package for linear algebra (<code>linalg</code>) that allows to solve general least-squares problems: <code>lstsq</code>. Only the first element of the results array is needed since it contains the optimal regression parameters.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">7</span>]: reg = np.linalg.lstsq(m[:lags].T, m[lags])[<span class="integer">0</span>]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">8</span>]: reg  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">8</span>]: array([-<span class="float">0.66666667</span>,  <span class="float">0.33333333</span>,  <span class="float">1.33333333</span>])

In [<span class="integer">9</span>]: np.dot(m[:lags].T, reg)  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">9</span>]: array([  <span class="float">3.</span>,   <span class="float">4.</span>,   <span class="float">5.</span>,   <span class="float">6.</span>,   <span class="float">7.</span>,   <span class="float">8.</span>,   <span class="float">9.</span>,  <span class="float">10.</span>,  <span class="float">11.</span>])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Implements the linear OLS regression.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Prints out the optimal parameters.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The <code>dot</code> product yields the prediction results.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>This basic idea easily carries over to real world financial time series data.</p>
</div>
</div>
<div class="sect3">
<h4 id="_predicting_index_levels">5.2.3. Predicting Index Levels</h4>
<div class="paragraph">
<p>The next step is to translate the basic approach to time series data 
for a real financial instrument, like the S&amp;P 500 stock index.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: h5 = pd.HDFStore(<span class="string"><span class="delimiter">'</span><span class="content">../data/equities.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>)
        data = pd.DataFrame(h5[<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>])
        h5.close() <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: data = data[(data.index &gt; <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>) &amp; (data.index &lt; <span class="string"><span class="delimiter">'</span><span class="content">2016-11-1</span><span class="delimiter">'</span></span>)] <span class="comment">#  </span><i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">4</span>]: data = pd.DataFrame(data)  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">5</span>]: data.rename(columns={<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>}, inplace=<span class="predefined-constant">True</span>)  <i class="conum" data-value="5"></i><b>(5)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the <code>pandas</code> package.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Opens a database file and reads a <code>DataFrame</code> object; data is selected for the S&amp;P 500 index.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>A fixed time interval is selected.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Transforms the <code>Series</code> object to a <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Renames the single column to <code>price</code>.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Formally, the Python code from the simple example before hardly needs
 to be changed to implement the regression-based prediction approach. 
Just the data object needs to be replaced.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">6</span>]: lags = <span class="integer">3</span>

In [<span class="integer">7</span>]: m = np.zeros((lags + <span class="integer">1</span>, <span class="predefined">len</span>(data) - lags))

In [<span class="integer">8</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(lags + <span class="integer">1</span>):
            <span class="keyword">if</span> i == lags:
                m[i] = data.price.values[i:]  <i class="conum" data-value="1"></i><b>(1)</b>
            <span class="keyword">else</span>:
                m[i] = data.price.values[i:i - lags]  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">9</span>]: reg = np.linalg.lstsq(m[:lags].T, m[lags])[<span class="integer">0</span>]

In [<span class="integer">10</span>]: reg
Out[<span class="integer">10</span>]: array([-<span class="float">0.00116939</span>,  <span class="float">0.0343677</span> ,  <span class="float">0.96710897</span>])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Takes now the <code>price</code> column …​</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>…​ from the <code>DataFrame</code> object in both cases.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The optimal regression parameters illustrate what is typically called the <em>random walk hypothesis</em>.
 This hypothesis states that stock prices, for instance, follow a random
 walk with the consequence that the best predictor for tomorrow’s stock 
price is today’s stock price. The optimal parameters seem to support 
such a hypothesis since today’s index level almost completely explains 
the predicted level for tomorrow. The two other values hardly have any 
weight assigned.</p>
</div>
<div class="paragraph">
<p><a href="#lr_plot_3">S&amp;P 500 index level and predicted values based on linear regression (3 lags)</a>
 shows the S&amp;P 500 index level and the predicted values. Due to the 
sheer amount of data for the multi-year time window the two time series 
are hardly indistinguishable in the plot.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">6</span>]: p = np.dot(m[:lags].T, reg)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">7</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] = <span class="float">0.0</span>  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">8</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>].iloc[lags:] = p  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">9</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>]].ix[lags:].plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="4"></i><b>(4)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the prediction values as the <code>dot</code> product.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Creates a new column in the <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Puts in the prediction values from the appropriate index position on.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Plots the <code>price</code> and <code>prediction</code> columns.</td>
</tr>
</tbody></table>
</div>
<div id="lr_plot_3" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/lr_plot_3.png" alt="lr plot 3">
</div>
<div class="title">Figure 23. S&amp;P 500 index level and predicted values based on linear regression (3 lags)</div>
</div>
<div class="paragraph">
<p>Zooming in, i.e. plotting the results for a much shorter time window, allows to better distinguish the two time series. <a href="#lr_plot_4">S&amp;P 500 index level and predicted values based on linear regression (3 lags)</a>
 shows the results for a two months time window. This plot illustrates 
that the prediction for tomorrow’s index level is roughly today’s index 
level. The prediction line is more or less a shift of the index level 
line to the right by one trading day.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">10</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>]][data.index &gt; <span class="string"><span class="delimiter">'</span><span class="content">2016-8-1</span><span class="delimiter">'</span></span>].plot(
                                                     figsize=(<span class="integer">10</span>, <span class="integer">6</span>))</code></pre>
</div>
</div>
<div id="lr_plot_4" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/lr_plot_4.png" alt="lr plot 4">
</div>
<div class="title">Figure 24. S&amp;P 500 index level and predicted values based on linear regression (3 lags)</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Applying linear OLS regression to the prediction of stock index 
levels for the S&amp;P 500 stock index provides support for the random 
walk hypothesis. The results of the numerical example show that today’s 
index level is the best predictor for tomorrow’s index level in a 
least-squares sense.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_predicting_future_returns">5.2.4. Predicting Future Returns</h4>
<div class="paragraph">
<p>So far, the analysis is based on absolute index levels. However, 
(log) returns might be a better choice for such statistical applications
 due, for example, to their normalization effect. Again, the code to 
apply linear regression to the returns data is almost the same as 
before. This time it is not only today’s return that is used to predict 
tomorrow’s return, the regression results are completely different in 
nature.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">11</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>] / data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>))  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">12</span>]: data.dropna(inplace=<span class="predefined-constant">True</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">13</span>]: m = np.zeros((lags + <span class="integer">1</span>, <span class="predefined">len</span>(data) - lags))

In [<span class="integer">14</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(lags + <span class="integer">1</span>):
            <span class="keyword">if</span> i == lags:
                m[i] = data.returns.values[i:]  <i class="conum" data-value="3"></i><b>(3)</b>
            <span class="keyword">else</span>:
                m[i] = data.returns.values[i:i - lags]  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">15</span>]: reg = np.linalg.lstsq(m[:lags].T, m[lags])[<span class="integer">0</span>]

In [<span class="integer">16</span>]: reg
Out[<span class="integer">16</span>]: array([-<span class="float">0.0615827</span> ,  <span class="float">0.02076784</span>, -<span class="float">0.04604324</span>])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the log returns.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Deletes all lines with <code>NaN</code> values.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Takes now the <code>returns</code> column …​</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>…​ from the <code>DataFrame</code> object in both cases.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><a href="#lr_plot_5">S&amp;P 500 log returns and predicted values based on linear regression (3 lags)</a>
 shows the returns data and the prediction values. As the figure 
impressively illustrates, linear regression can obviously not predict 
the magnitude of future returns to some significant extent.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">17</span>]: p = np.dot(m[:lags].T, reg)

In [<span class="integer">18</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] = <span class="float">0.0</span>

In [<span class="integer">19</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>].iloc[lags:] = p

In [<span class="integer">20</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>]].ix[lags:].plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))</code></pre>
</div>
</div>
<div id="lr_plot_5" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/lr_plot_5.png" alt="lr plot 5">
</div>
<div class="title">Figure 25. S&amp;P 500 log returns and predicted values based on linear regression (3 lags)</div>
</div>
<div class="paragraph">
<p>From a trading point of view, one might argue that the magnitude of 
the forecasted return is not that relevant but rather whether the 
direction is forecasted correctly or not. To this end, a simple 
calculation yields an overview. Whenever the linear regression gets the 
direction right, i.e. the sign of the forecasted return is correct, the 
product of the market return and the predicted return is positive and 
otherwise negative. In the example case, the prediction is 882 times 
correct and 834 wrong which translates into a hit ratio of about 51.4%.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">21</span>]: hits = np.sign(data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].ix[lags:] *
                        data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>].ix[lags:]).value_counts()  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">22</span>]: hits  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">22</span>]:  <span class="float">1.0</span>    <span class="integer">882</span>
         -<span class="float">1.0</span>    <span class="integer">834</span>
         dtype: int64

In [<span class="integer">23</span>]: hits.values[<span class="integer">0</span>] / <span class="predefined">sum</span>(hits)  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">23</span>]: <span class="float">0.51398601398601396</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the product of the market and predicted return, takes the sign of the results and counts the values.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Prints out the counts for the two possible values.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Calculates the hit ratio, i.e. the number of correct predictions given all predictions.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_predicting_future_market_direction">5.2.5. Predicting Future Market Direction</h4>
<div class="paragraph">
<p>The question that arises is whether one can improve on the hit ratio 
by directly implementing the linear regression based on the sign of the 
log returns that serve as the dependent variable values. In theory at 
least, this simplifies the problem from predicting an absolute return 
value to the sign of the return value. The only change in the Python 
code to implement this reasoning is to use the sign values (i.e. 1.0 or 
-1.0 in Python) for the regression step. This indeed increases the 
number of hits to 911 and the hit ratio to about 53.1%.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">24</span>]: reg = np.linalg.lstsq(m[:lags].T, np.sign(m[lags]))[<span class="integer">0</span>]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">25</span>]: reg
Out[<span class="integer">25</span>]: array([-<span class="float">1.68909852</span>,  <span class="float">1.60878822</span>, -<span class="float">3.54837038</span>])

In [<span class="integer">26</span>]: p = np.sign(np.dot(m[:lags].T, reg))  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">27</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] = <span class="float">0.0</span>

In [<span class="integer">28</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>].iloc[lags:] = p

In [<span class="integer">29</span>]: hits = np.sign(data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].ix[lags:] *
                        data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>].ix[lags:]).value_counts()

In [<span class="integer">30</span>]: hits
Out[<span class="integer">30</span>]:  <span class="float">1.0</span>    <span class="integer">911</span>
         -<span class="float">1.0</span>    <span class="integer">805</span>
         dtype: int64

In [<span class="integer">31</span>]: hits.values[<span class="integer">0</span>] / <span class="predefined">sum</span>(hits)
Out[<span class="integer">31</span>]: <span class="float">0.53119533527696794</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This takes the sign of the to be predicted return directly.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Also for the prediction values, only the sign is relevant.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_vectorized_backtesting_of_regression_based_strategy">5.2.6. Vectorized Backtesting of Regression-based Strategy</h4>
<div class="paragraph">
<p>The hit ratio alone does not tell too much about the promises of a 
trading strategy using linear regression in the way presented so far. It
 is well known that the <em>ten best and worst days</em> in the markets for a given period of time considerably influence the overall performance of investments.<sup class="footnote">[<a id="_footnoteref_25" class="footnote" href="#_footnote_25" title="View footnote.">25</a>]</sup>
 In an ideal world, a long-short trader would try, of course, to benefit
 from both best and worst days by going long and short, respectively, on
 the basis of respective market timing indicators. Translated to the 
current context, this implies that in addition to the hit ratio the 
quality of the market timing also is of importance. Therefore, a 
backtesting along the lines of the approach in <a href="#vectorized_backtesting">Mastering Vectorized Backtesting</a> can give a better picture of the value of regression for prediction.</p>
</div>
<div class="paragraph">
<p>Given the data that is already available, vectorized backtesting 
boils down to two lines of Python code including visualization. This is 
so in particular since the prediction values already reflect the market 
positions (long or short). <a href="#lr_plot_6">Cumulative returns of the S&amp;P 500 index and the regression-based strategy (3 lags)</a>
 shows that the strategy under the current assumptions outperforms the 
market significantly (ignoring, among others, transaction costs).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">32</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] * data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">33</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].cumsum().apply(np.exp).plot(
                                            figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="2"></i><b>(2)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Multiplies the prediction values (positionings) by the market returns.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Plots the cumulative performance of both the market and the strategy over time.</td>
</tr>
</tbody></table>
</div>
<div id="lr_plot_6" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/lr_plot_6.png" alt="lr plot 6">
</div>
<div class="title">Figure 26. Cumulative returns of the S&amp;P 500 index and the regression-based strategy (3 lags)</div>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The hit ratio of a prediction-based strategy is only one side of the 
coin when it gets to overall strategy performance. The other side is how
 well the strategy gets the market timing right. A strategy correctly 
predicting the best and worst days over a certain period of time might 
outperform the market even with a hit ratio well below 50%.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_generalizing_the_approach_4">5.2.7. Generalizing the Approach</h4>
<div class="paragraph">
<p><a href="#lr_vector_backtester">Module with a class for vectorized backtesting of linear regression-based strategies</a>
 presents a Python module containing a class for the vectorized 
backtesting of the regression-based trading strategy in the spirit of <a href="#vectorized_backtesting">Mastering Vectorized Backtesting</a>. In addition to allowing for an arbitrary amount to invest and proportional transaction costs, it also allows the <em>in-sample fitting</em> of the linear regression model and the <em>out-of-sample evaluation</em>.
 This means that the regression model is fitted based on one part of the
 data set, say for the years 2010 to 2014, and is evaluated based on 
another part of the data set, say for the years 2015 and 2016. For all 
strategies that involve an optimization or fitting step, this provides a
 more realistic view on the performance in practice since it avoids the 
pitfalls of in-sample biases and the overfitting of models.</p>
</div>
<div class="paragraph">
<p><a href="#lr_plot_7">Cumulative returns of the S&amp;P 500 index and the regression-based strategy (3 lags) out-of-sample</a>
 shows that the regression-based strategy based on three lags does 
significantly underperform the S&amp;P 500 index out-of-sample.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">LRVectorBacktester</span> <span class="keyword">as</span> LR  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: lrbt = LR.LRVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                                     <span class="integer">10000</span>, <span class="float">0.0</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: lrbt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                          <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, lags=<span class="integer">3</span>)  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">3</span>]: (<span class="float">27707.759999999998</span>, <span class="float">8941.9300000000003</span>)

In [<span class="integer">4</span>]: lrbt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2014-12-31</span><span class="delimiter">'</span></span>,
                          <span class="string"><span class="delimiter">'</span><span class="content">2015-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, lags=<span class="integer">3</span>)  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">4</span>]: (<span class="float">9481.1700000000001</span>, -<span class="float">845.46000000000004</span>)

In [<span class="integer">5</span>]: lrbt.plot_results()  <i class="conum" data-value="5"></i><b>(5)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the module as <code>LR</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Instantiates an object of the <code>LRVectorBacktester</code> class.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Trains and evaluates the strategy on the same data set.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Uses two different data sets for the training and evaluation steps.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Plots the out-of-sample strategy performance compared to the market.</td>
</tr>
</tbody></table>
</div>
<div id="lr_plot_7" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/lr_plot_7.png" alt="lr plot 7">
</div>
<div class="title">Figure 27. Cumulative returns of the S&amp;P 500 index and the regression-based strategy (3 lags) out-of-sample</div>
</div>
<div class="paragraph">
<p>However, increasing the number of lags to four lets the same strategy
 implemented on the German DAX 30 index outperform the market even when 
assuming proportional transaction costs of 0.1% per trade (cf. <a href="#lr_plot_8">Cumulative returns of the DAX30 index and the regression-based strategy (4 lags) out-of-sample</a>).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">6</span>]: lrbt = LR.LRVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">^GDAXI</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                                     <span class="integer">10000</span>, <span class="float">0.001</span>)

In [<span class="integer">7</span>]: lrbt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2014-12-31</span><span class="delimiter">'</span></span>,
                          <span class="string"><span class="delimiter">'</span><span class="content">2015-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, lags=<span class="integer">4</span>)  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">7</span>]: (<span class="float">16606.900000000001</span>, <span class="float">5730.3999999999996</span>)

In [<span class="integer">8</span>]: lrbt.plot_results()</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Uses four lags in this case.</td>
</tr>
</tbody></table>
</div>
<div id="lr_plot_8" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/lr_plot_8.png" alt="lr plot 8">
</div>
<div class="title">Figure 28. Cumulative returns of the DAX30 index and the regression-based strategy (4 lags) out-of-sample</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="machine_learning_scikit">5.3. Using Machine Learning for Market Movement Prediction</h3>
<div class="paragraph">
<p>Nowadays, the Python ecosystem provides a number of packages in the machine learning field. The most popular of these is <code>scikit-learn</code> (cf. <a href="http://scikit-learn.org/" target="_blank"><code>scikit-learn</code> home page</a>),
 which is also one of the best documented and maintained packages. This 
section first introduces to the API of the package based on linear 
regression, replicating some of the results of the previous section. It 
then goes on to use logistic regression as a classification algorithm to
 attack the problem of predicting the future market direction.</p>
</div>
<div class="sect3">
<h4 id="_linear_regression_with_scikit_learn">5.3.1. Linear Regression with scikit-learn</h4>
<div class="paragraph">
<p>To introduce the <code>scikit-learn</code> API, revisiting the basic 
idea behind the prediction approach presented in this chapter is 
fruitful. Data preparation is the same as with <code>NumPy</code> only.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

In [<span class="integer">2</span>]: x = np.arange(<span class="integer">12</span>)

In [<span class="integer">3</span>]: x
Out[<span class="integer">3</span>]: array([ <span class="integer">0</span>,  <span class="integer">1</span>,  <span class="integer">2</span>,  <span class="integer">3</span>,  <span class="integer">4</span>,  <span class="integer">5</span>,  <span class="integer">6</span>,  <span class="integer">7</span>,  <span class="integer">8</span>,  <span class="integer">9</span>, <span class="integer">10</span>, <span class="integer">11</span>])

In [<span class="integer">4</span>]: lags = <span class="integer">3</span>

In [<span class="integer">5</span>]: m = np.zeros((lags + <span class="integer">1</span>, <span class="predefined">len</span>(x) - lags))

In [<span class="integer">6</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(lags + <span class="integer">1</span>):
            <span class="keyword">if</span> i == lags:
                m[i] = x[i:]
            <span class="keyword">else</span>:
                m[i] = x[i:i - lags]</code></pre>
</div>
</div>
<div class="paragraph">
<p>Using <code>scikit-learn</code> for our purposes mainly consists of three steps:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>model selection</strong>: a model is to be picked and instantiated</p>
</li>
<li>
<p><strong>model fitting</strong>: the model is to be fitted to the data at hand</p>
</li>
<li>
<p><strong>prediction</strong>: given the fitted model, the prediction is conducted</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>To apply linear regression, this translates into the following code that makes use of the <code>linear_model</code> sub-package for generalized linear models (cf. <a href="http://scikit-learn.org/stable/modules/linear_model.html" target="_blank"><code>scikit-learn</code> linear models page</a>). By default, the <code>LinearRegression</code> model fits an intercept value.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">7</span>]: <span class="keyword">from</span> <span class="include">sklearn</span> <span class="keyword">import</span> <span class="include">linear_model</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">8</span>]: lm = linear_model.LinearRegression()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">9</span>]: lm.fit(m[:lags].T, m[lags])  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">9</span>]: LinearRegression(copy_X=<span class="predefined-constant">True</span>, fit_intercept=<span class="predefined-constant">True</span>, n_jobs=<span class="integer">1</span>, normalize=<span class="predefined-constant">False</span>)

In [<span class="integer">10</span>]: lm.coef_  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">10</span>]: array([ <span class="float">0.33333333</span>,  <span class="float">0.33333333</span>,  <span class="float">0.33333333</span>])

In [<span class="integer">11</span>]: lm.intercept_  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">11</span>]: <span class="float">2.0000000000000018</span>

In [<span class="integer">12</span>]: lm.predict(m[:lags].T)  <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">12</span>]: array([  <span class="float">3.</span>,   <span class="float">4.</span>,   <span class="float">5.</span>,   <span class="float">6.</span>,   <span class="float">7.</span>,   <span class="float">8.</span>,   <span class="float">9.</span>,  <span class="float">10.</span>,  <span class="float">11.</span>])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the generalized linear model classes.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Instantiates a linear regression model.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Fits the model to the data.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Prints out the optimal regression parameters.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Prints out the intercept values</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Predicts the sought after values given the fitted model.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Setting the parameter <code>fit_intercept</code> to <code>False</code>, gives the exact same regression results as with <code>NumPy</code> and <code>polyfit</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">13</span>]: lm = linear_model.LinearRegression(fit_intercept=<span class="predefined-constant">False</span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">14</span>]: lm.fit(m[:lags].T, m[lags])

In [<span class="integer">15</span>]: lm.coef_
Out[<span class="integer">15</span>]: array([-<span class="float">0.66666667</span>,  <span class="float">0.33333333</span>,  <span class="float">1.33333333</span>])

In [<span class="integer">16</span>]: lm.intercept_
Out[<span class="integer">16</span>]: <span class="float">0.0</span>

In [<span class="integer">17</span>]: lm.predict(m[:lags].T)
Out[<span class="integer">17</span>]: array([  <span class="float">3.</span>,   <span class="float">4.</span>,   <span class="float">5.</span>,   <span class="float">6.</span>,   <span class="float">7.</span>,   <span class="float">8.</span>,   <span class="float">9.</span>,  <span class="float">10.</span>,  <span class="float">11.</span>])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This forces a fit without intercept value.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>This example already illustrates quite well how to apply <code>scikit-learn</code> to the  prediction problem. Due to its consistent API design, the basic approach carries over to other models as well.</p>
</div>
</div>
<div class="sect3">
<h4 id="_a_simple_classification_problem">5.3.2. A Simple Classification Problem</h4>
<div class="paragraph">
<p>In a classification problem, it is to be decided to which of a 
limited set of categories (“classes”) a new observation belongs. A 
classical problem studied in machine learning is the identification of 
hand-written digits from 0 to 9. Such an identification leads to a 
correct result, say 3. Or it leads to a wrong result, say 6 or 8, where 
all such wrong results are equally wrong. In a financial market context,
 predicting an index level can lead to a numerical result that is far 
off the correct one or that is quite close to it. Predicting tomorrow’s 
market direction, there can only be a correct or a (“completely”) wrong 
result. The latter is a classification problem with the set of 
categories limited to “up” and “down” or “+1” and “-1”; the former is 
not.</p>
</div>
<div class="paragraph">
<p>A simple example for a classification problem is found on Wikipedia under <a href="https://en.wikipedia.org/wiki/Logistic_regression" target="_blank">Logistic Regression</a>.
 The data set relates the number of hours studied for an exam by a 
student to the passing of the exam. While the number of hours studied is
 a <code>float</code>, the passing of the exam is either <code>True</code> or <code>False</code>, i.e. 1 or 0. <a href="#ml_plot_1">Example data for classification problem</a> shows the data graphically.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

In [<span class="integer">2</span>]: hours = np.array([<span class="float">0.5</span>, <span class="float">0.75</span>, <span class="float">1.</span>, <span class="float">1.25</span>, <span class="float">1.5</span>, <span class="float">1.75</span>, <span class="float">1.75</span>, <span class="float">2.</span>,
                          <span class="float">2.25</span>, <span class="float">2.5</span>, <span class="float">2.75</span>, <span class="float">3.</span>, <span class="float">3.25</span>, <span class="float">3.5</span>, <span class="float">4.</span>, <span class="float">4.25</span>,
                          <span class="float">4.5</span>, <span class="float">4.75</span>, <span class="float">5.</span>, <span class="float">5.5</span>])  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">3</span>]: success = np.array([<span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">1</span>, <span class="integer">0</span>, <span class="integer">1</span>, <span class="integer">0</span>, <span class="integer">1</span>, <span class="integer">0</span>, <span class="integer">1</span>,
                            <span class="integer">0</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>])  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">4</span>]: <span class="keyword">import</span> <span class="include">matplotlib.pyplot</span> <span class="keyword">as</span> plt

In [<span class="integer">5</span>]: plt.plot(hours, success, <span class="string"><span class="delimiter">'</span><span class="content">ro</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="3"></i><b>(3)</b>
        plt.ylim(-<span class="float">0.2</span>, <span class="float">1.2</span>)  <i class="conum" data-value="4"></i><b>(4)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The numbers of hours studied by a certain student.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The success of the student given the number of hours studied.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Plots the data set taking <code>hours</code> as <code>x</code> values and <code>success</code> as <code>y</code> values.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Adjusts the limits of the <code>y</code> axis.</td>
</tr>
</tbody></table>
</div>
<div id="ml_plot_1" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ml_plot_1.png" alt="ml plot 1">
</div>
<div class="title">Figure 29. Example data for classification problem</div>
</div>
<div class="paragraph">
<p>The basic question typically raised in a such a context is: given a 
certain number of hours studied by a student (not in the data set), will
 he/she pass the exam or not? What answer could linear regression give? 
Probably not one that is satisfying as <a href="#ml_plot_2">Linear regression applied to classification problem</a>
 shows. Given different numbers of hours studied, linear regression 
gives (prediction) values mainly between 0 and 1 but also lower and 
higher. But there can only be 0 and 1 as the outcome of taking the exam.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">6</span>]: reg = np.polyfit(hours, success, deg=<span class="integer">1</span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">7</span>]: plt.plot(hours, success, <span class="string"><span class="delimiter">'</span><span class="content">ro</span><span class="delimiter">'</span></span>)
        plt.plot(hours, np.polyval(reg, hours), <span class="string"><span class="delimiter">'</span><span class="content">b</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>
        plt.ylim(-<span class="float">0.2</span>, <span class="float">1.2</span>)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Implements a linear regression on the data set.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Plots the regression line in addition to the data set.</td>
</tr>
</tbody></table>
</div>
<div id="ml_plot_2" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ml_plot_2.png" alt="ml plot 2">
</div>
<div class="title">Figure 30. Linear regression applied to classification problem</div>
</div>
<div class="paragraph">
<p>This is where classification algorithms like logistic regression and 
support vector machines come into play. For illustration, the 
application of logistic regression suffices (cf. chapter 4 in James et 
al. (2013) for more background information). The respective class is 
also found in the <code>linear_model</code> sub-package. <a href="#ml_plot_3">Logistic regression applied to classification problem</a>
 shows the result of the code below. This time there is a clear cut 
(prediction) value for every different input value. Between 0 and 2 
hours the model predicts that there will be a failure, from 2.25 hours 
of study on it predicts a success.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">8</span>]: <span class="keyword">from</span> <span class="include">sklearn</span> <span class="keyword">import</span> <span class="include">linear_model</span>

In [<span class="integer">9</span>]: lm = linear_model.LogisticRegression()  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">10</span>]: hrs = hours.reshape(<span class="integer">1</span>, -<span class="integer">1</span>).T  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">11</span>]: lm.fit(hrs, success)  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">11</span>]: LogisticRegression(C=<span class="float">1.0</span>, class_weight=<span class="predefined-constant">None</span>, dual=<span class="predefined-constant">False</span>,
            fit_intercept=<span class="predefined-constant">True</span>, intercept_scaling=<span class="integer">1</span>, max_iter=<span class="integer">100</span>,
            multi_class=<span class="string"><span class="delimiter">'</span><span class="content">ovr</span><span class="delimiter">'</span></span>, n_jobs=<span class="integer">1</span>, penalty=<span class="string"><span class="delimiter">'</span><span class="content">l2</span><span class="delimiter">'</span></span>, random_state=<span class="predefined-constant">None</span>,
            solver=<span class="string"><span class="delimiter">'</span><span class="content">liblinear</span><span class="delimiter">'</span></span>, tol=<span class="float">0.0001</span>, verbose=<span class="integer">0</span>, warm_start=<span class="predefined-constant">False</span>)

In [<span class="integer">12</span>]: prediction = lm.predict(hrs)  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">13</span>]: plt.plot(hours, success, <span class="string"><span class="delimiter">'</span><span class="content">ro</span><span class="delimiter">'</span></span>, label=<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>)
         plt.plot(hours, prediction, <span class="string"><span class="delimiter">'</span><span class="content">b</span><span class="delimiter">'</span></span>, label=<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>)
         plt.legend(loc=<span class="integer">0</span>)
         plt.ylim(-<span class="float">0.2</span>, <span class="float">1.2</span>)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Instantiates the logistic regression model.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Reshapes the one-dimensional <code>ndarray</code> object to a two-dimensional one; required by <code>scikit-learn</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Implements the fitting step.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Implements the prediction step given the fitted model.</td>
</tr>
</tbody></table>
</div>
<div id="ml_plot_3" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ml_plot_3.png" alt="ml plot 3">
</div>
<div class="title">Figure 31. Logistic regression applied to classification problem</div>
</div>
<div class="paragraph">
<p>However, as <a href="#ml_plot_3">Logistic regression applied to classification problem</a>
 shows there is no guarantee that 2.25 hours and more lead to success. 
It is just “more probable” to succeed from that many hours on than to 
fail. This probabilistic reasoning can be analyzed and visualized as 
well based on the same model instance as the code that follows 
illustrates. The dashed line in <a href="#ml_plot_4">Probabilities for succeeding and failing, respectively, based on logistic regression</a> shows the probability for succeeding. The dash-dotted line shows it for failing.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">14</span>]: prob = lm.predict_proba(hrs)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">15</span>]: plt.plot(hours, success, <span class="string"><span class="delimiter">'</span><span class="content">ro</span><span class="delimiter">'</span></span>)
         plt.plot(hours, prediction, <span class="string"><span class="delimiter">'</span><span class="content">b</span><span class="delimiter">'</span></span>)
         plt.plot(hours, prob.T[<span class="integer">0</span>], <span class="string"><span class="delimiter">'</span><span class="content">m--</span><span class="delimiter">'</span></span>, label=<span class="string"><span class="delimiter">'</span><span class="content">$p(h)$ for zero</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>
         plt.plot(hours, prob.T[<span class="integer">1</span>], <span class="string"><span class="delimiter">'</span><span class="content">g-.</span><span class="delimiter">'</span></span>, label=<span class="string"><span class="delimiter">'</span><span class="content">$p(h)$ for one</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="3"></i><b>(3)</b>
         plt.ylim(-<span class="float">0.2</span>, <span class="float">1.2</span>)
         plt.legend(loc=<span class="integer">0</span>)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Predicts probabilities for succeeding and failing, respectively.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Plots the probabilities for failing.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Plots the probabilities for succeeding.</td>
</tr>
</tbody></table>
</div>
<div id="ml_plot_4" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ml_plot_4.png" alt="ml plot 4">
</div>
<div class="title">Figure 32. Probabilities for succeeding and failing, respectively, based on logistic regression</div>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p><code>scikit-learn</code> does a great job in providing access to a 
great variety of machine learning models in a unified way. The examples 
show that the API for applying logistic regression does not differ from 
the one for linear regression. <code>scikit-learn</code> therefore is 
well suited to test a number of appropriate machine learning models in a
 certain application scenario without altering the Python code that 
much.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Equipped with the basics, the next step is to apply logistic regression to the problem of predicting market direction.</p>
</div>
</div>
<div class="sect3">
<h4 id="_using_logistic_regression_to_predict_market_direction">5.3.3. Using Logistic Regression to Predict Market Direction</h4>
<div class="paragraph">
<p>In machine learning, one generally speaks of <em>features</em> instead of <em>independent or explanatory variables</em>
 as in a regression context. The simple classification example has a 
single feature only: the number of hours studied. In practice, one often
 has more than one feature that can be used for classification. Given 
the prediction approach introduced in this chapter, one can identify a <em>feature</em> by a <em>lag</em>.
 Therefore, working with three lags from the time series data means that
 there are three features. As possible outcomes or categories, there are
 only +1 and -1 for an upwards and a downwards movement, respectively. 
Although the wording changes, the formalism stays the same, in 
particular with regard to deriving the matrix, now called the <em>feature matrix</em>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

In [<span class="integer">2</span>]: h5 = pd.HDFStore(<span class="string"><span class="delimiter">'</span><span class="content">../data/equities.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>)
        data = pd.DataFrame(h5[<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>])
        h5.close()

In [<span class="integer">3</span>]: data = data[(data.index &gt; <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>) &amp; (data.index &lt; <span class="string"><span class="delimiter">'</span><span class="content">2016-11-1</span><span class="delimiter">'</span></span>)]

In [<span class="integer">4</span>]: data = pd.DataFrame(data)

In [<span class="integer">5</span>]: data.rename(columns={<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>}, inplace=<span class="predefined-constant">True</span>)

In [<span class="integer">6</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>] / data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>))

In [<span class="integer">7</span>]: data.dropna(inplace=<span class="predefined-constant">True</span>)

In [<span class="integer">8</span>]: lags = <span class="integer">3</span>

In [<span class="integer">9</span>]: m = np.zeros((lags + <span class="integer">1</span>, <span class="predefined">len</span>(data) - lags))

In [<span class="integer">10</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(lags + <span class="integer">1</span>):
            <span class="keyword">if</span> i == lags:
                m[i] = data.returns.values[i:]
            <span class="keyword">else</span>:
                m[i] = data.returns.values[i:i - lags]</code></pre>
</div>
</div>
<div class="paragraph">
<p>Having the feature matrix available, the three step procedure again 
applies. Logistic regression improves the hit ratio compared to linear 
regression by almost a percentage point to close to 54%. <a href="#ml_plot_5">Cumulative returns of S&amp;P 500 and logistic regression-based strategy (3 lags)</a>
 shows the performance of the strategy based on logistic 
regression-based predictions. Although the hit ratio is higher, the 
performance is worse than with linear regression.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">11</span>]: <span class="keyword">from</span> <span class="include">sklearn</span> <span class="keyword">import</span> <span class="include">linear_model</span>

In [<span class="integer">12</span>]: lm = linear_model.LogisticRegression(C=<span class="float">1e3</span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">13</span>]: lm.fit(m[:lags].T, np.sign(m[lags]))  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">13</span>]: LogisticRegression(C=<span class="float">1000000.0</span>, class_weight=<span class="predefined-constant">None</span>, dual=<span class="predefined-constant">False</span>,
          fit_intercept=<span class="predefined-constant">True</span>, intercept_scaling=<span class="integer">1</span>, max_iter=<span class="integer">100</span>,
          multi_class=<span class="string"><span class="delimiter">'</span><span class="content">ovr</span><span class="delimiter">'</span></span>, n_jobs=<span class="integer">1</span>, penalty=<span class="string"><span class="delimiter">'</span><span class="content">l2</span><span class="delimiter">'</span></span>, random_state=<span class="predefined-constant">None</span>,
          solver=<span class="string"><span class="delimiter">'</span><span class="content">liblinear</span><span class="delimiter">'</span></span>, tol=<span class="float">0.0001</span>, verbose=<span class="integer">0</span>, warm_start=<span class="predefined-constant">False</span>)

In [<span class="integer">14</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] = <span class="float">0.0</span>  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">15</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>].ix[lags:] = lm.predict(m[:lags].T)  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">16</span>]: hits = np.sign(data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].ix[lags:] *
                        data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>].ix[lags:]).value_counts()  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">17</span>]: hits
Out[<span class="integer">17</span>]:  <span class="float">1.0</span>    <span class="integer">926</span>
         -<span class="float">1.0</span>    <span class="integer">790</span>
         dtype: int64

In [<span class="integer">18</span>]: hits.values[<span class="integer">0</span>] / <span class="predefined">sum</span>(hits)  <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">18</span>]: <span class="float">0.53962703962703962</span>

In [<span class="integer">19</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] * data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] <i class="conum" data-value="7"></i><b>(7)</b>

In [<span class="integer">19</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].ix[lags:].cumsum(
                    ).apply(np.exp).plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="8"></i><b>(8)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Instantiates the model object using a <code>C</code> value that gives less weight to the regularization term (cf. <a href="http://scikit-learn.org/stable/modules/linear_model.html#logistic-regression" target="_blank">Generalized Linear Models page</a>).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Fits the model based on the sign of the returns to be predicted.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Generates a new column in the <code>DataFrame</code> object …​</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>…​ and writes the prediction values to it.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Calculates the number of correct and wrong predictions.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The hit ratio is close to 54% in this case.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>However, the cumulative performance of the strategy …​</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>…​ is really similar and close to the market.</td>
</tr>
</tbody></table>
</div>
<div id="ml_plot_5" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ml_plot_5.png" alt="ml plot 5">
</div>
<div class="title">Figure 33. Cumulative returns of S&amp;P 500 and logistic regression-based strategy (3 lags)</div>
</div>
<div class="paragraph">
<p>Increasing the number of lags used to 15 improves — somewhat contrary
 to the experience with linear regression — both the hit ratio and the 
performance of the strategy considerably. <a href="#ml_plot_6">Cumulative returns of S&amp;P 500 and logistic regression-based strategy (15 lags)</a> shows the resulting performance.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">20</span>]: lags = <span class="integer">15</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">21</span>]: m = np.zeros((lags + <span class="integer">1</span>, <span class="predefined">len</span>(data) - lags))

In [<span class="integer">22</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(lags + <span class="integer">1</span>):
            <span class="keyword">if</span> i == lags:
                m[i] = data.returns.values[i:]
            <span class="keyword">else</span>:
                m[i] = data.returns.values[i:i - lags]

In [<span class="integer">23</span>]: lm.fit(m[:lags].T, np.sign(m[lags]))  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">23</span>]: LogisticRegression(C=<span class="float">1000000.0</span>, class_weight=<span class="predefined-constant">None</span>, dual=<span class="predefined-constant">False</span>,
          fit_intercept=<span class="predefined-constant">True</span>, intercept_scaling=<span class="integer">1</span>, max_iter=<span class="integer">100</span>,
          multi_class=<span class="string"><span class="delimiter">'</span><span class="content">ovr</span><span class="delimiter">'</span></span>, n_jobs=<span class="integer">1</span>, penalty=<span class="string"><span class="delimiter">'</span><span class="content">l2</span><span class="delimiter">'</span></span>, random_state=<span class="predefined-constant">None</span>,
          solver=<span class="string"><span class="delimiter">'</span><span class="content">liblinear</span><span class="delimiter">'</span></span>, tol=<span class="float">0.0001</span>, verbose=<span class="integer">0</span>, warm_start=<span class="predefined-constant">False</span>)

In [<span class="integer">24</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] = <span class="float">0.0</span>  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">25</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>].ix[lags:] = lm.predict(m[:lags].T)

In [<span class="integer">26</span>]: hits = np.sign(data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].ix[lags:] *
                        data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>].ix[lags:]).value_counts()

In [<span class="integer">27</span>]: hits
Out[<span class="integer">27</span>]:  <span class="float">1.0</span>    <span class="integer">938</span>
         -<span class="float">1.0</span>    <span class="integer">766</span>
         dtype: int64

In [<span class="integer">28</span>]: hits.values[<span class="integer">0</span>] / <span class="predefined">sum</span>(hits)  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">28</span>]: <span class="float">0.55046948356807512</span>

In [<span class="integer">29</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] * data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">30</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].ix[lags:].cumsum(
                    ).apply(np.exp).plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Increases the number of lags to 15.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Fits the model based on 15 lags.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Overwrites the previous prediction values.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The hit ratio increases to 55%.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The cumulative performance also increases significantly.</td>
</tr>
</tbody></table>
</div>
<div id="ml_plot_6" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ml_plot_6.png" alt="ml plot 6">
</div>
<div class="title">Figure 34. Cumulative returns of S&amp;P 500 and logistic regression-based strategy (15 lags)</div>
</div>
<div class="paragraph">
<p>One has to be careful with not falling into the overfitting trap 
here. A more realistic picture is obtained by an approach that uses <em>training data</em> (= in-sample data) for the <em>fitting</em> of the model and <em>test data</em> (= out-of-sample data) for the <em>evaluation</em> of the strategy performance. This is done below when the approach is generalized again in the form of a Python class.</p>
</div>
</div>
<div class="sect3">
<h4 id="_generalizing_the_approach_5">5.3.4. Generalizing the Approach</h4>
<div class="paragraph">
<p><a href="#sci_vector_backtester">Module with a class for vectorized backtesting of machine learning-based strategies</a> presents a Python module with a class for the vectorized backtesting of strategies based on linear models from <code>scikit-learn</code>. Although only linear and logistic regression are implemented, the number of models is easily enhanced. In principle, the <code>ScikitVectorBacktester</code> class could inherit selected methods from the <code>LRVectorBacktester</code>,
 the class is nevertheless presented in a self-contained fashion. This 
makes it easier to enhance and re-use this class for practical 
applications.</p>
</div>
<div class="paragraph">
<p>Based on the <code>ScikitBacktesterClass</code>, an out-of-sample 
evaluation of the logistic regression-based strategy is possible. The 
(stellar) performance seen before for 15 lags then translates into a 
performance that can be best described as mixed over time. <a href="#ml_plot_7">Cumulative returns of S&amp;P 500 and out-of-sample logistic regression-based strategy (15 lags, no transaction costs)</a>
 illustrates that the strategy underperforms the S&amp;P 500 in the 
beginning of the out-of-sample period (ranging from 2014 to October 
2016) to finish with a slightly better performance — this, however, 
without considering transaction costs.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">ScikitVectorBacktester</span> <span class="keyword">as</span> SCI

In [<span class="integer">2</span>]: scibt = SCI.ScikitVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                                           <span class="integer">10000</span>, <span class="float">0.0</span>, <span class="string"><span class="delimiter">'</span><span class="content">logistic</span><span class="delimiter">'</span></span>)

In [<span class="integer">3</span>]: scibt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                           <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, lags=<span class="integer">15</span>)
Out[<span class="integer">3</span>]: (<span class="float">34599.669999999998</span>, <span class="float">15833.84</span>)

In [<span class="integer">4</span>]: scibt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2013-12-31</span><span class="delimiter">'</span></span>,
                           <span class="string"><span class="delimiter">'</span><span class="content">2014-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, lags=<span class="integer">15</span>)
Out[<span class="integer">4</span>]: (<span class="float">12120.16</span>, <span class="float">617.25999999999999</span>)

In [<span class="integer">5</span>]: scibt.plot_results()</code></pre>
</div>
</div>
<div id="ml_plot_7" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ml_plot_7.png" alt="ml plot 7">
</div>
<div class="title">Figure 35. Cumulative returns of S&amp;P 500 and 
out-of-sample logistic regression-based strategy (15 lags, no 
transaction costs)</div>
</div>
<div class="paragraph">
<p>Adding transaction costs to the mix lets the strategy underperform the market over the complete evaluation period as <a href="#ml_plot_8">Cumulative returns of S&amp;P 500 and out-of-sample logistic regression-based strategy (15 lags, with transaction costs)</a> shows.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">5</span>]: scibt = SCI.ScikitVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                                           <span class="integer">10000</span>, <span class="float">0.001</span>, <span class="string"><span class="delimiter">'</span><span class="content">logistic</span><span class="delimiter">'</span></span>)

In [<span class="integer">6</span>]: scibt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2013-12-31</span><span class="delimiter">'</span></span>,
                           <span class="string"><span class="delimiter">'</span><span class="content">2014-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, lags=<span class="integer">15</span>)
Out[<span class="integer">6</span>]: (<span class="float">11032.77</span>, -<span class="float">470.12</span>)

In [<span class="integer">7</span>]: scibt.plot_results()</code></pre>
</div>
</div>
<div id="ml_plot_8" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ml_plot_8.png" alt="ml plot 8">
</div>
<div class="title">Figure 36. Cumulative returns of S&amp;P 500 and 
out-of-sample logistic regression-based strategy (15 lags, with 
transaction costs)</div>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Applying sophisticated machine learning techniques to stock market 
prediction often yield promising results early on. In one example, the 
strategy outperforms the market by about 150% percentage points over 
some seven years. Quite often, such stellar performances are due to a 
mix of simplifying assumptions and also of an overfitting of the 
prediction model. For example, testing such the same strategy 
out-of-sample and adding transaction costs — as two ways of getting to a
 more realistic picture — shows that the performance of the same 
strategy “suddenly” lags behind the market.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="deep_learning">5.4. Using Deep Learning for Market Movement Prediction</h3>
<div class="paragraph">
<p>Right from the open sourcing and publication by Google, the deep learning library <a href="http://tensorflow.org/" target="_blank"><code>tensorflow</code></a> has attracted much interest and wide-spread application. This section applies <code>tensorflow</code> in the same way as the previous one <code>scikit-learn</code> to the prediction of stock market movements modeled as a classification problem. The library is installed via <code>pip install tensorflow</code>.</p>
</div>
<div class="paragraph">
<p>For more background information on deep learning and <code>tensorflow</code> see the papers by Abadi et al. (2016) as well as Lin and Tegmark (2016).</p>
</div>
<div class="sect3">
<h4 id="_the_simple_classification_problem_revisited">5.4.1. The Simple Classification Problem Revisited</h4>
<div class="paragraph">
<p>To illustrate the basic approach of applying <code>tensorflow</code>, the simple classification problem introduced in the previous section proves again useful.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

In [<span class="integer">2</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

In [<span class="integer">3</span>]: hours = np.array([<span class="float">0.5</span>, <span class="float">0.75</span>, <span class="float">1.</span>, <span class="float">1.25</span>, <span class="float">1.5</span>, <span class="float">1.75</span>, <span class="float">1.75</span>, <span class="float">2.</span>,
                          <span class="float">2.25</span>, <span class="float">2.5</span>, <span class="float">2.75</span>, <span class="float">3.</span>, <span class="float">3.25</span>, <span class="float">3.5</span>, <span class="float">4.</span>, <span class="float">4.25</span>,
                          <span class="float">4.5</span>, <span class="float">4.75</span>, <span class="float">5.</span>, <span class="float">5.5</span>])

In [<span class="integer">4</span>]: success = np.array([<span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">1</span>, <span class="integer">0</span>, <span class="integer">1</span>, <span class="integer">0</span>, <span class="integer">1</span>, <span class="integer">0</span>, <span class="integer">1</span>,
                            <span class="integer">0</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>])
In [<span class="integer">5</span>]: data = pd.DataFrame({<span class="string"><span class="delimiter">'</span><span class="content">hours</span><span class="delimiter">'</span></span>: hours, <span class="string"><span class="delimiter">'</span><span class="content">success</span><span class="delimiter">'</span></span>: success}) <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">6</span>]: data.info()  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">6</span>]: &lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
        RangeIndex: <span class="integer">20</span> entries, <span class="integer">0</span> to <span class="integer">19</span>
        Data columns (total <span class="integer">2</span> columns):
        hours      <span class="integer">20</span> non-null float64
        success    <span class="integer">20</span> non-null int64
        dtypes: float64(<span class="integer">1</span>), int64(<span class="integer">1</span>)
        memory usage: <span class="float">400.0</span> <span class="predefined">bytes</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Stores the two data sub-sets in a <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Prints out the meta information for the <code>DataFrame</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>With these preparations, <code>tensorflow</code> can be imported and straightforwardly applied.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">7</span>]: <span class="keyword">import</span> <span class="include">tensorflow</span> <span class="keyword">as</span> tf  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">8</span>]: tf.logging.set_verbosity(tf.logging.ERROR)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">9</span>]: fc = [tf.contrib.layers.real_valued_column(<span class="string"><span class="delimiter">'</span><span class="content">hours</span><span class="delimiter">'</span></span>, dimension=<span class="integer">1</span>)]  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">10</span>]: model = tf.contrib.learn.DNNClassifier(feature_columns=fc,
                                n_classes=<span class="integer">2</span>, hidden_units=[<span class="integer">100</span>])  <i class="conum" data-value="4"></i><b>(4)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the <code>tensorflow</code> package.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Sets the logging level to <code>ERROR</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Defines the single, real-valued feature column (<code>hours</code>).</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Defines the model based on a deep neural network (DNN) classifier given the single feature column.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The code below defines a function to return the data in the form of 
the feature columns data and the data for the labels, i.e. the <code>success</code> data sub-set. It implements the fitting step and plots the results as shown in <a href="#dl_plot_1">Base data and prediction results with <code>tensorflow</code> for the simple classification example</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">11</span>]: <span class="keyword">def</span> <span class="function">get_data</span>():
             feature_cols = {<span class="string"><span class="delimiter">'</span><span class="content">hours</span><span class="delimiter">'</span></span>: tf.constant(data[<span class="string"><span class="delimiter">'</span><span class="content">hours</span><span class="delimiter">'</span></span>].values)}  <i class="conum" data-value="1"></i><b>(1)</b>
             labels = tf.constant(data[<span class="string"><span class="delimiter">'</span><span class="content">success</span><span class="delimiter">'</span></span>].values,
                                  shape=[data[<span class="string"><span class="delimiter">'</span><span class="content">success</span><span class="delimiter">'</span></span>].size, <span class="integer">1</span>])  <i class="conum" data-value="2"></i><b>(2)</b>
             <span class="keyword">return</span> feature_cols, labels  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">12</span>]: model.fit(input_fn=get_data, steps=<span class="integer">100</span>)  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">12</span>]: Estimator(params={<span class="string"><span class="delimiter">'</span><span class="content">dropout</span><span class="delimiter">'</span></span>: <span class="predefined-constant">None</span>, <span class="string"><span class="delimiter">'</span><span class="content">gradient_clip_norm</span><span class="delimiter">'</span></span>: <span class="predefined-constant">None</span>,
         <span class="string"><span class="delimiter">'</span><span class="content">hidden_units</span><span class="delimiter">'</span></span>: [<span class="integer">100</span>], <span class="string"><span class="delimiter">'</span><span class="content">num_ps_replicas</span><span class="delimiter">'</span></span>: <span class="integer">0</span>, <span class="string"><span class="delimiter">'</span><span class="content">optimizer</span><span class="delimiter">'</span></span>:
         <span class="string"><span class="delimiter">'</span><span class="content">Adagrad</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">n_classes</span><span class="delimiter">'</span></span>: <span class="integer">2</span>, <span class="string"><span class="delimiter">'</span><span class="content">weight_column_name</span><span class="delimiter">'</span></span>: <span class="predefined-constant">None</span>,
         <span class="string"><span class="delimiter">'</span><span class="content">feature_columns</span><span class="delimiter">'</span></span>: [_RealValuedColumn(column_name=<span class="string"><span class="delimiter">'</span><span class="content">hours</span><span class="delimiter">'</span></span>,
         dimension=<span class="integer">1</span>, default_value=<span class="predefined-constant">None</span>, dtype=tf.float32,
         normalizer=<span class="predefined-constant">None</span>)], <span class="string"><span class="delimiter">'</span><span class="content">enable_centered_bias</span><span class="delimiter">'</span></span>: <span class="predefined-constant">True</span>,
         <span class="string"><span class="delimiter">'</span><span class="content">activation_fn</span><span class="delimiter">'</span></span>: &lt;function relu at <span class="hex">0x1240851e0</span>&gt;})

In [<span class="integer">13</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] = np.array(<span class="predefined">list</span>(model.predict(input_fn=get_data)))  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">14</span>]: data.plot(x=<span class="string"><span class="delimiter">'</span><span class="content">hours</span><span class="delimiter">'</span></span>, y=[<span class="string"><span class="delimiter">'</span><span class="content">success</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>],
                   style=[<span class="string"><span class="delimiter">'</span><span class="content">ro</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">b-</span><span class="delimiter">'</span></span>], ylim=[-<span class="float">.1</span>, <span class="float">1.1</span>])  <i class="conum" data-value="6"></i><b>(6)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Defines a dictionary with <code>hours</code> as the only key and the <code>hours</code> data sub-set as the only value.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Defines the <code>labels</code> to be the <code>success</code> data sub-set and provides the shape for it.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Returns the features and labels data sub-sets.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Implements the fitting step for the classifier.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Stores the prediction results as a new column in the <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Plots the base data and the prediction results.</td>
</tr>
</tbody></table>
</div>
<div id="dl_plot_1" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/dl_plot_1.png" alt="dl plot 1">
</div>
<div class="title">Figure 37. Base data and prediction results with <code>tensorflow</code> for the simple classification example</div>
</div>
<div class="paragraph">
<p>The simple example shows that the application of the deep learning approach is similar to the approach with <code>scikit-learn</code> and logistic regression although the API is obviously a bit different.</p>
</div>
</div>
<div class="sect3">
<h4 id="_using_deep_neural_networks_to_predict_market_direction">5.4.2. Using Deep Neural Networks to Predict Market Direction</h4>
<div class="paragraph">
<p>The next step is to apply the approach to stock market data in the 
form of log returns from a financial time series. First, the data needs 
to be retrieved and prepared.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">15</span>]: h5 = pd.HDFStore(<span class="string"><span class="delimiter">'</span><span class="content">../data/equities.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>)
         data = pd.DataFrame(h5[<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>])
         h5.close() <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">16</span>]: data = data[(data.index &gt; <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>) &amp; (data.index &lt; <span class="string"><span class="delimiter">'</span><span class="content">2016-11-1</span><span class="delimiter">'</span></span>)] <span class="comment">#  </span><i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">17</span>]: data = pd.DataFrame(data)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">18</span>]: data.rename(columns={<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>}, inplace=<span class="predefined-constant">True</span>)  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">19</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(data / data.shift(<span class="integer">1</span>))  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">20</span>]: lags = <span class="predefined">range</span>(<span class="integer">1</span>, <span class="integer">6</span>)  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">21</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> lags:
             data[<span class="string"><span class="delimiter">'</span><span class="content">return_%s</span><span class="delimiter">'</span></span> % i] = np.sign(data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].shift(i))  <i class="conum" data-value="7"></i><b>(7)</b>

In [<span class="integer">22</span>]: data.dropna(inplace=<span class="predefined-constant">True</span>)  <i class="conum" data-value="8"></i><b>(8)</b>

In [<span class="integer">23</span>]: data.round(<span class="integer">4</span>).tail()  <i class="conum" data-value="9"></i><b>(9)</b>
Out[<span class="integer">23</span>]:             price     returns ret_1 ret_2 ret_3 ret_4 ret_5
         Date
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">25</span>  <span class="float">2143.1599</span> -<span class="float">0.0038</span>  <span class="float">1.0</span>  -<span class="float">1.0</span>  -<span class="float">1.0</span>   <span class="float">1.0</span>   <span class="float">1.0</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">26</span>  <span class="float">2139.4299</span> -<span class="float">0.0017</span> -<span class="float">1.0</span>   <span class="float">1.0</span>  -<span class="float">1.0</span>  -<span class="float">1.0</span>   <span class="float">1.0</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">27</span>  <span class="float">2133.0400</span> -<span class="float">0.0030</span> -<span class="float">1.0</span>  -<span class="float">1.0</span>   <span class="float">1.0</span>  -<span class="float">1.0</span>  -<span class="float">1.0</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span>  <span class="float">2126.4099</span> -<span class="float">0.0031</span> -<span class="float">1.0</span>  -<span class="float">1.0</span>  -<span class="float">1.0</span>   <span class="float">1.0</span>  -<span class="float">1.0</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">31</span>  <span class="float">2126.1499</span> -<span class="float">0.0001</span> -<span class="float">1.0</span>  -<span class="float">1.0</span>  -<span class="float">1.0</span>  -<span class="float">1.0</span>   <span class="float">1.0</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Reads the data from the database file.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Selects a fixed time interval.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Transforms the <code>Series</code> object to the <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Renames the only column to <code>price</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Calculates the log returns.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Defines a <code>list</code> object with the number of lags.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Creates new <code>DataFrame</code> columns with the log returns 
shifted by respective the number of lags; note that only the sign of the
 values is taken and not the absolute value of the log return; this 
could be done in a more sophisticated fashion by, for example, defining 
more classes for every feature (e.g. -2, -1, 0, 1, 2).</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Deletes rows containing <code>NaN</code> values.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>Prints out the final five rows indicating the “patterns” emerging in the five feature columns.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The code below defines training and test data sub-sets, defines the feature columns and labels and fits the classifier.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">24</span>]: cutoff = <span class="string"><span class="delimiter">'</span><span class="content">2015-1-1</span><span class="delimiter">'</span></span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">25</span>]: training_data = data[data.index &lt; cutoff].copy()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">26</span>]: test_data = data[data.index &gt;= cutoff].copy()  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">28</span>]: fc = [tf.contrib.layers.real_valued_column(<span class="string"><span class="delimiter">'</span><span class="content">ret_%s</span><span class="delimiter">'</span></span> % i, dimension=<span class="integer">1</span>)
                   <span class="keyword">for</span> i <span class="keyword">in</span> lags]  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">29</span>]: model = tf.contrib.learn.DNNClassifier(feature_columns=fc,
                   n_classes=<span class="integer">2</span>, hidden_units=[<span class="integer">100</span>, <span class="integer">100</span>]) <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">31</span>]: idata = training_data  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">27</span>]: <span class="keyword">def</span> <span class="function">get_data</span>():
             feature_cols = {<span class="string"><span class="delimiter">'</span><span class="content">ret_%s</span><span class="delimiter">'</span></span> % i: tf.constant(idata[<span class="string"><span class="delimiter">'</span><span class="content">ret_%s</span><span class="delimiter">'</span></span> %
                              i].values) <span class="keyword">for</span> i <span class="keyword">in</span> lags}  <i class="conum" data-value="7"></i><b>(7)</b>
             labels = tf.constant((idata[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] &gt; <span class="integer">0</span>).astype(<span class="predefined">int</span>).values,
                         shape=[idata[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].size, <span class="integer">1</span>])  <i class="conum" data-value="8"></i><b>(8)</b>
             <span class="keyword">return</span> feature_cols, labels

In [<span class="integer">32</span>]: model.fit(input_fn=get_data, steps=<span class="integer">500</span>)  <i class="conum" data-value="9"></i><b>(9)</b>
Out[<span class="integer">32</span>]: Estimator(params={<span class="string"><span class="delimiter">'</span><span class="content">dropout</span><span class="delimiter">'</span></span>: <span class="predefined-constant">None</span>, <span class="string"><span class="delimiter">'</span><span class="content">gradient_clip_norm</span><span class="delimiter">'</span></span>: <span class="predefined-constant">None</span>,
         <span class="string"><span class="delimiter">'</span><span class="content">hidden_units</span><span class="delimiter">'</span></span>: [<span class="integer">100</span>, <span class="integer">100</span>], <span class="string"><span class="delimiter">'</span><span class="content">num_ps_replicas</span><span class="delimiter">'</span></span>: <span class="integer">0</span>, <span class="string"><span class="delimiter">'</span><span class="content">optimizer</span><span class="delimiter">'</span></span>:
         <span class="string"><span class="delimiter">'</span><span class="content">Adagrad</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">n_classes</span><span class="delimiter">'</span></span>: <span class="integer">2</span>, <span class="string"><span class="delimiter">'</span><span class="content">weight_column_name</span><span class="delimiter">'</span></span>: <span class="predefined-constant">None</span>,
         <span class="string"><span class="delimiter">'</span><span class="content">feature_columns</span><span class="delimiter">'</span></span>: [_RealValuedColumn (column_name=<span class="string"><span class="delimiter">'</span><span class="content">ret_1</span><span class="delimiter">'</span></span>,
         dimension=<span class="integer">1</span>, default_value=<span class="predefined-constant">None</span>, dtype=tf.float32, normalizer=<span class="predefined-constant">None</span>),
         _RealValuedColumn(column_name=<span class="string"><span class="delimiter">'</span><span class="content">ret_2</span><span class="delimiter">'</span></span>, dimension=<span class="integer">1</span>, default_value=<span class="predefined-constant">None</span>,
         dtype=tf.float32, normalizer=<span class="predefined-constant">None</span>), _RealValuedColumn(
         column_name=<span class="string"><span class="delimiter">'</span><span class="content">ret_3</span><span class="delimiter">'</span></span>, dimension=<span class="integer">1</span>, default_value=<span class="predefined-constant">None</span>, dtype=tf.float32,
         normalizer=<span class="predefined-constant">None</span>), _RealValuedColumn(column_name=<span class="string"><span class="delimiter">'</span><span class="content">ret_4</span><span class="delimiter">'</span></span>, dimension=<span class="integer">1</span>,
         default_value=<span class="predefined-constant">None</span>, dtype=tf.float32, normalizer=<span class="predefined-constant">None</span>),
         _RealValuedColumn(column_name=<span class="string"><span class="delimiter">'</span><span class="content">ret_5</span><span class="delimiter">'</span></span>, dimension=<span class="integer">1</span>, default_value=<span class="predefined-constant">None</span>,
         dtype=tf.float32, normalizer=<span class="predefined-constant">None</span>)], <span class="string"><span class="delimiter">'</span><span class="content">enable_centered_bias</span><span class="delimiter">'</span></span>: <span class="predefined-constant">True</span>,
         <span class="string"><span class="delimiter">'</span><span class="content">activation_fn</span><span class="delimiter">'</span></span>: &lt;function relu at <span class="hex">0x1240851e0</span>&gt;})</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Defines the data according to which to cut the data set in training and test data sub-sets.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Generates the training data sub-set …​</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>…​ and the test data sub-set.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The feature columns are defined according to the naming of the respective columns in the <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>This defines the classifier based on the feature columns definitions.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The training data sub-set is defined to be the relevant one (<code>idata</code>).</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>The dictionary with all feature columns is created.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>The labels are defined as a vector of zeros (negative return values) and ones (positive return values) only.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>This fits the model given the training data sub-set.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Equipped with the fitted classifier, the quality of the model can be evaluated to see how accurate the predictions are. <a href="#dl_plot_2">Cumulative market performance compared to cumulative, deep learning-based strategy performance (training data set)</a> shows the market performance compared to the strategy performance.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">33</span>]: model.evaluate(input_fn=get_data, steps=<span class="integer">1</span>)  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">33</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">accuracy</span><span class="delimiter">'</span></span>: <span class="float">0.57188499</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">auc</span><span class="delimiter">'</span></span>: <span class="float">0.58003944</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">global_step</span><span class="delimiter">'</span></span>: <span class="integer">500</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">loss</span><span class="delimiter">'</span></span>: <span class="float">0.67657608</span>}

In [<span class="integer">34</span>]: pred = np.array(<span class="predefined">list</span>(model.predict(input_fn=get_data)))  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">35</span>]: pred[:<span class="integer">30</span>]  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">35</span>]: array([<span class="integer">0</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">0</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">0</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">1</span>])

In [<span class="integer">36</span>]: training_data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] = np.where(pred &gt; <span class="integer">0</span>, <span class="integer">1</span>, -<span class="integer">1</span>)  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">37</span>]: training_data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = training_data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] * \
                                     training_data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">38</span>]: training_data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].cumsum(
                      ).apply(np.exp).plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="6"></i><b>(6)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The model accuracy is evaluated to be at a level of 57%.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The prediction values are generated.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>This prints the first 30 predicted values.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>This defines a new column <code>prediction</code> based on the prediction values but with the zeros changed to -1 to indicate a short position.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The strategy returns are derived from the transformed prediction values and the market returns.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>This generates a plot comparing cumulative market performance vs. the strategy performance.</td>
</tr>
</tbody></table>
</div>
<div id="dl_plot_2" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/dl_plot_2.png" alt="dl plot 2">
</div>
<div class="title">Figure 38. Cumulative market performance compared to cumulative, deep learning-based strategy performance (training data set)</div>
</div>
<div class="paragraph">
<p>The strategy seems to perform slightly better than the market on the 
training data set, i.e. in-sample (without transaction costs). However, 
the more interesting question is how it performs on the test data set, 
i.e. out-of-sample. In that case, the strategy still performs slightly 
better as <a href="#dl_plot_3">Cumulative market performance compared to cumulative, deep learning-based strategy performance (test data set)</a> illustrates.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">39</span>]: idata = test_data  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">40</span>]: model.evaluate(input_fn=get_data, steps=<span class="integer">1</span>)  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">40</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">accuracy</span><span class="delimiter">'</span></span>: <span class="float">0.49783549</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">auc</span><span class="delimiter">'</span></span>: <span class="float">0.55103564</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">global_step</span><span class="delimiter">'</span></span>: <span class="integer">500</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">loss</span><span class="delimiter">'</span></span>: <span class="float">0.69712317</span>}

In [<span class="integer">41</span>]: pred = np.array(<span class="predefined">list</span>(model.predict(input_fn=get_data)))

In [<span class="integer">42</span>]: test_data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] = np.where(pred &gt; <span class="integer">0</span>, <span class="integer">1</span>, -<span class="integer">1</span>)

In [<span class="integer">43</span>]: test_data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = test_data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] * \
                                 test_data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]

In [<span class="integer">44</span>]: test_data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].cumsum(
                  ).apply(np.exp).plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This shifts the relevant data set (<code>idata</code>) to be the test data set.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The accuracy of the model drops to slightly below 50%.</td>
</tr>
</tbody></table>
</div>
<div id="dl_plot_3" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/dl_plot_3.png" alt="dl plot 3">
</div>
<div class="title">Figure 39. Cumulative market performance compared to cumulative, deep learning-based strategy performance (test data set)</div>
</div>
</div>
<div class="sect3">
<h4 id="_adding_different_types_of_features">5.4.3. Adding Different Types of Features</h4>
<div class="paragraph">
<p>So far, the analysis mainly focused on the log returns directly or 
their transforms to two classes (+1 and -1 and +1 and 0, respectively). 
It is, of course, possible to add other types of features to the mix, 
like, for example, ones based on momentum. The code below first 
calculates the momentum and then applies the <code>transform</code> function to generate a feature with four different classes.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">45</span>]: <span class="keyword">def</span> <span class="function">transform</span>(x):
             <span class="keyword">if</span> x &lt; -<span class="float">0.0015</span>: <span class="keyword">return</span> -<span class="integer">2</span>  <span class="comment">#  </span><i class="conum" data-value="1"></i><b>(1)</b>
             <span class="keyword">elif</span> x &lt; <span class="integer">0</span>: <span class="keyword">return</span> -<span class="integer">1</span>  <i class="conum" data-value="2"></i><b>(2)</b>
             <span class="keyword">elif</span> x &gt; <span class="float">0.0015</span>: <span class="keyword">return</span> <span class="integer">2</span>  <i class="conum" data-value="3"></i><b>(3)</b>
             <span class="keyword">else</span>: <span class="keyword">return</span> <span class="integer">1</span>  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">46</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].rolling(<span class="integer">3</span>).mean().shift(<span class="integer">1</span>)  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">47</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>].apply(transform)  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">48</span>]: data.round(<span class="integer">4</span>).tail()  <i class="conum" data-value="7"></i><b>(7)</b>
Out[<span class="integer">48</span>]:             price     returns ret_1 ret_2 ret_3 ret_4 ret_5 momentum
         Date
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">25</span>  <span class="float">2143.1599</span> -<span class="float">0.0038</span>  <span class="float">1.0</span>  -<span class="float">1.0</span>  -<span class="float">1.0</span>   <span class="float">1.0</span>   <span class="float">1.0</span>   <span class="integer">1</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">26</span>  <span class="float">2139.4299</span> -<span class="float">0.0017</span> -<span class="float">1.0</span>   <span class="float">1.0</span>  -<span class="float">1.0</span>  -<span class="float">1.0</span>   <span class="float">1.0</span>   <span class="integer">1</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">27</span>  <span class="float">2133.0400</span> -<span class="float">0.0030</span> -<span class="float">1.0</span>  -<span class="float">1.0</span>   <span class="float">1.0</span>  -<span class="float">1.0</span>  -<span class="float">1.0</span>  -<span class="integer">1</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">28</span>  <span class="float">2126.4099</span> -<span class="float">0.0031</span> -<span class="float">1.0</span>  -<span class="float">1.0</span>  -<span class="float">1.0</span>   <span class="float">1.0</span>  -<span class="float">1.0</span>  -<span class="integer">2</span>
         <span class="integer">2016</span>-<span class="integer">10</span>-<span class="integer">31</span>  <span class="float">2126.1499</span> -<span class="float">0.0001</span> -<span class="float">1.0</span>  -<span class="float">1.0</span>  -<span class="float">1.0</span>  -<span class="float">1.0</span>   <span class="float">1.0</span>  -<span class="integer">2</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>If the value is “rather low”, assign -2.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>If it is “just negative”, assign -1.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>It it is "`rather high", assign +2.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>In all other cases, assign +1.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The momentum based on three log returns is calculated and shifted by one day to avoid (perfect) foresight.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The values in the <code>momentum</code> columns are transformed by the <code>transform</code> function.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>The new feature column now contains four different values (classes).</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The next step is to adjust the feature columns definition and the classifier instance.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">49</span>]: fc = [tf.contrib.layers.real_valued_column(<span class="string"><span class="delimiter">'</span><span class="content">ret_%s</span><span class="delimiter">'</span></span> % i, dimension=<span class="integer">1</span>)
                   <span class="keyword">for</span> i <span class="keyword">in</span> lags]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">50</span>]: fc.append(tf.contrib.layers.real_valued_column(<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>,
                                                        dimension=<span class="integer">1</span>))  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">51</span>]: <span class="keyword">def</span> <span class="function">get_data</span>():
             feature_cols = {<span class="string"><span class="delimiter">'</span><span class="content">ret_%s</span><span class="delimiter">'</span></span> % i: tf.constant(
                  idata[<span class="string"><span class="delimiter">'</span><span class="content">ret_%s</span><span class="delimiter">'</span></span> % i].values) <span class="keyword">for</span> i <span class="keyword">in</span> lags}
             feature_cols[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>] = tf.constant(idata[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>].values)  <i class="conum" data-value="3"></i><b>(3)</b>
             labels = tf.constant((idata[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] &gt; <span class="integer">0</span>).astype(<span class="predefined">int</span>).values,
                                  shape=[idata[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].size, <span class="integer">1</span>])
             <span class="keyword">return</span> feature_cols, labels

In [<span class="integer">52</span>]: model = tf.contrib.learn.DNNClassifier(feature_columns=fc,
                    n_classes=<span class="integer">2</span>, hidden_units=[<span class="integer">100</span>, <span class="integer">100</span>])  <i class="conum" data-value="4"></i><b>(4)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>These feature columns remain the same as before.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The new feature column based on <code>momentum</code> is added.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Here, the data from the <code>momentum</code> column is added.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>This instantiates a new classifier instance.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Based on the enriched feature set, the classifier can be trained. The
 accuracy is improved as desired and the in-sample performance of the 
strategy is much better as illustrated in <a href="#dl_plot_4">Market performance compared to deep learning-based strategy performance (with momentum feature, training data set)</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">54</span>]: training_data = data[data.index &lt; cutoff].copy()  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">55</span>]: test_data = data[data.index &gt;= cutoff].copy()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">56</span>]: idata = training_data

In [<span class="integer">57</span>]: model.fit(input_fn=get_data, steps=<span class="integer">500</span>)
Out[<span class="integer">57</span>]: Estimator( ... )

In [<span class="integer">58</span>]: model.evaluate(input_fn=get_data, steps=<span class="integer">1</span>)  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">58</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">accuracy</span><span class="delimiter">'</span></span>: <span class="float">0.58466452</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">auc</span><span class="delimiter">'</span></span>: <span class="float">0.60886127</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">global_step</span><span class="delimiter">'</span></span>: <span class="integer">500</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">loss</span><span class="delimiter">'</span></span>: <span class="float">0.66891718</span>}

In [<span class="integer">59</span>]: pred = np.array(<span class="predefined">list</span>(model.predict(input_fn=get_data)))

In [<span class="integer">59</span>]: training_data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] = np.where(pred &gt; <span class="integer">0</span>, <span class="integer">1</span>, -<span class="integer">1</span>)

In [<span class="integer">59</span>]: training_data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = training_data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] * \
                                     training_data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]

In [<span class="integer">60</span>]: training_data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].cumsum(
                  ).apply(np.exp).plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="4"></i><b>(4)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>New training data and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>…​ test data sub-sets are generated (with the <code>momentum</code> column).</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The accuracy in-sample increases to about 58.5%.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The in-sample strategy performance is now much better than before.</td>
</tr>
</tbody></table>
</div>
<div id="dl_plot_4" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/dl_plot_4.png" alt="dl plot 4">
</div>
<div class="title">Figure 40. Market performance compared to deep learning-based strategy performance (with momentum feature, training data set)</div>
</div>
<div class="paragraph">
<p>The final step is the evaluation of the classifier and the derivation
 of the strategy performance out-of-sample. Both the accuracy of the 
classifier as well as the strategy performance improve taking into 
account the new momentum-based feature.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">61</span>]: idata = test_data  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">62</span>]: model.evaluate(input_fn=get_data, steps=<span class="integer">1</span>)  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">62</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">accuracy</span><span class="delimiter">'</span></span>: <span class="float">0.5</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">auc</span><span class="delimiter">'</span></span>: <span class="float">0.54733336</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">global_step</span><span class="delimiter">'</span></span>: <span class="integer">500</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">loss</span><span class="delimiter">'</span></span>: <span class="float">0.70188963</span>}

In [<span class="integer">63</span>]: pred = np.array(<span class="predefined">list</span>(model.predict(input_fn=get_data)))

In [<span class="integer">64</span>]: test_data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] = np.where(pred &gt; <span class="integer">0</span>, <span class="integer">1</span>, -<span class="integer">1</span>)

In [<span class="integer">65</span>]: test_data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = test_data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] * \
                                 test_data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]

In [<span class="integer">66</span>]: test_data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].cumsum(
                  ).apply(np.exp).plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This shifts the relevant data set (<code>idata</code>) again to the test data set.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The accuracy of the model slightly increases to about 50%.</td>
</tr>
</tbody></table>
</div>
<div id="dl_plot_5" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/dl_plot_5.png" alt="dl plot 5">
</div>
<div class="title">Figure 41. Market performance compared to deep learning-based strategy performance (with momentum feature, test data set)</div>
</div>
<div class="paragraph">
<p>The <code>tensorflow</code> library allows to make use of the most 
recent advances in deep learning for algorithmic trading. The 
application is as straightforward as applying other machine learning 
models with <code>scikit-learn</code>. The approach illustrated in this section allows for an easy enhancement with regard to the (different types of) features used.</p>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>As an exercise, it is worthwhile to code a Python class (in the spirit of <a href="#lr_vector_backtester">Module with a class for vectorized backtesting of linear regression-based strategies</a> and <a href="#sci_vector_backtester">Module with a class for vectorized backtesting of machine learning-based strategies</a>) that allows for a more systematic and realistic usage of the <code>tensorflow</code> library for stock market prediction and the backtesting of respective trading strategies.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_conclusions_5">5.5. Conclusions</h3>
<div class="paragraph">
<p>Predicting future market movements is the holy grail in finance. It means to find <em>the</em>
 Truth. If one can do it with a considerable edge, then stellar 
investment returns are the consequence. This chapter introduces 
statistical techniques — from the fields of traditional statistics, 
machine learning and deep learning — to predict the future market 
direction based on past returns. Some first in-sample results are 
promising, both for linear as well as logistic regression. However, a 
more reliable impression is gained when evaluating such strategies 
out-of-sample and also when factoring in transaction costs.</p>
</div>
<div class="paragraph">
<p>This chapter does not claim to have found the holy grail. It rather 
offers a glimpse on techniques that could prove useful in the search for
 it. The unified API of <code>scikit-learn</code> also makes it easy to replace, for example, one linear model by another one. In that sense, the <code>ScikitBacktesterClass</code> can be used as a starting point to explore more machine learning models and to apply them to financial time series prediction.</p>
</div>
<div class="paragraph">
<p>The quote at the beginning of the chapter from the Terminator 2 movie
 from 1991 is rather optimistic with regard to how fast and what exactly
 computers might be able to learn and acquire (consciousness). No matter
 if you believe that computers will replace human beings in most areas 
of life or not or if they one day become indeed self-aware, they have 
proven useful to human beings as supporting devices in almost any area 
of life. And algorithms like those used in machine learning, deep 
learning or artificial intelligence hold at least the promise to let 
them even better algorithmic traders in the near future.</p>
</div>
</div>
<div class="sect2">
<h3 id="_further_resources_5">5.6. Further Resources</h3>
<div class="paragraph">
<p>The books by Guido and Müller (2016) and VanderPlas (2016) provide practical introductions to machine learning with Python and <code>scikit-learn</code>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Guido, Sarah and Andreas Müller (2016): <em>Introduction to Machine Learning with Python</em>. O’Reilly, Hoboken et al.</p>
</li>
<li>
<p>VanderPlas, Jake (2016): <em>Python Data Science Handbook</em>. O’Reilly, Hoboken et al.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The books by Hastie et al. (2008) and James et al. (2013) provide a 
more thorough, i.e. more mathematical, overview of machine learning 
techniques themselves.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Hastie, Trevor, Robert Tibshirani and Jerome Friedman (2008): <em>The Elements of Statistical Learning</em>.  2nd ed., Springer, New York et al.</p>
</li>
<li>
<p>James, Gareth James, Daniela Witten, Trevor Hastie and Robert Tibshirani (2013): <em>Introduction to Statistical Learning</em>. Springer, New York et al.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For more background information on deep learning and <code>tensorflow</code>, refer to these papers:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Abadi, Martín et al. (2016): “TensorFlow: A System for Large-Scale Machine Learning.” <em>12th USENIX Symposium on Operating Systems Design
and Implementation</em>.</p>
</li>
<li>
<p>Lin, Henry and Max Tegmark (2016): “Why Does Deep and Cheap Learning Work so Well?” <em>Working Paper</em>, <a href="https://arxiv.org/pdf/1608.08225v2.pdf" target="_blank" class="bare">https://arxiv.org/pdf/1608.08225v2.pdf</a>.</p>
</li>
<li>
<p>Schmidhuber, Jürgen (2014): “Deep Learning in Neural Networks: An Overview.” <em>Working Paper</em>, <a href="https://arxiv.org/pdf/1404.7828v4.pdf" target="_blank" class="bare">https://arxiv.org/pdf/1404.7828v4.pdf</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_python_scripts_3">5.7. Python Scripts</h3>
<div id="lr_vector_backtester" class="exampleblock">
<div class="title">Example 10. Module with a class for vectorized backtesting of linear regression-based strategies</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Module with Class</span>
<span class="comment"># for Vectorized Backtesting</span>
<span class="comment"># of Linear Regression-based Strategies</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np
<span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd
<span class="keyword">from</span> <span class="include">pandas_datareader</span> <span class="keyword">import</span> <span class="include">data</span> <span class="keyword">as</span> web

h5 = pd.HDFStore(<span class="string"><span class="delimiter">'</span><span class="content">../data/equities.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>)
data = h5[<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>]
h5.close()

<span class="keyword">class</span> <span class="class">LRVectorBacktester</span>(<span class="predefined">object</span>):
    <span class="docstring"><span class="delimiter">'''</span><span class="content"> Class for the vectorized backtesting of</span><span class="content">
</span><span class="content">    Linear Regression-based trading strategies.</span><span class="content">
</span><span class="content">
</span><span class="content">    Attributes</span><span class="content">
</span><span class="content">    ==========</span><span class="content">
</span><span class="content">    symbol: str</span><span class="content">
</span><span class="content">        Google Finance symbol with which to work</span><span class="content">
</span><span class="content">    start: str</span><span class="content">
</span><span class="content">        start date for data retrieval</span><span class="content">
</span><span class="content">    end: str</span><span class="content">
</span><span class="content">        end date for data retrieval</span><span class="content">
</span><span class="content">    amount: int, float</span><span class="content">
</span><span class="content">        amount to be invested at the beginning</span><span class="content">
</span><span class="content">    tc: float</span><span class="content">
</span><span class="content">        proportional transaction costs (e.g. 0.5% = 0.005) per trade</span><span class="content">
</span><span class="content">
</span><span class="content">    Methods</span><span class="content">
</span><span class="content">    =======</span><span class="content">
</span><span class="content">    get_data:</span><span class="content">
</span><span class="content">        retrieves and prepares the base data set</span><span class="content">
</span><span class="content">    select_data:</span><span class="content">
</span><span class="content">        selects a sub-set of the data</span><span class="content">
</span><span class="content">    prepare_matrix:</span><span class="content">
</span><span class="content">        prepares the matrix for the regression</span><span class="content">
</span><span class="content">    fit_model:</span><span class="content">
</span><span class="content">        implements the regression step</span><span class="content">
</span><span class="content">    run_strategy:</span><span class="content">
</span><span class="content">        runs the backtest for the regression-based strategy</span><span class="content">
</span><span class="content">    plot_results:</span><span class="content">
</span><span class="content">        plots the performance of the strategy compared to the symbol</span><span class="content">
</span><span class="content">    </span><span class="delimiter">'''</span></span>

    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, symbol, start, end, amount, tc):
        <span class="predefined-constant">self</span>.symbol = symbol
        <span class="predefined-constant">self</span>.start = start
        <span class="predefined-constant">self</span>.end = end
        <span class="predefined-constant">self</span>.amount = amount
        <span class="predefined-constant">self</span>.tc = tc
        <span class="predefined-constant">self</span>.results = <span class="predefined-constant">None</span>
        <span class="predefined-constant">self</span>.get_data()

    <span class="keyword">def</span> <span class="function">get_data</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Retrieves and prepares the data.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">try</span>:
            raw = web.DataReader(<span class="predefined-constant">self</span>.symbol, data_source=<span class="string"><span class="delimiter">'</span><span class="content">google</span><span class="delimiter">'</span></span>,
                             start=<span class="predefined-constant">self</span>.start, end=<span class="predefined-constant">self</span>.end)[<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>]
            raw = pd.DataFrame(raw)
            raw.rename(columns={<span class="string"><span class="delimiter">'</span><span class="content">Adj Close</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>}, inplace=<span class="predefined-constant">True</span>)
        <span class="keyword">except</span>:
            raw = data[<span class="predefined-constant">self</span>.symbol]
            raw = raw[(raw.index &gt; <span class="predefined-constant">self</span>.start) &amp; (raw.index &lt; <span class="predefined-constant">self</span>.end)]
            raw = pd.DataFrame(raw)
            raw.rename(columns={<span class="predefined-constant">self</span>.symbol: <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>}, inplace=<span class="predefined-constant">True</span>)

        raw[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(raw / raw.shift(<span class="integer">1</span>))
        <span class="predefined-constant">self</span>.data = raw.dropna()

    <span class="keyword">def</span> <span class="function">select_data</span>(<span class="predefined-constant">self</span>, start, end):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Selects sub-sets of the financial data.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        data = <span class="predefined-constant">self</span>.data[(<span class="predefined-constant">self</span>.data.index &gt;= start) &amp;
                         (<span class="predefined-constant">self</span>.data.index &lt;= end)].copy()
        <span class="keyword">return</span> data

    <span class="keyword">def</span> <span class="function">prepare_matrix</span>(<span class="predefined-constant">self</span>, start, end):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Prepares the matrix for the regression and prediction steps.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        data = <span class="predefined-constant">self</span>.select_data(start, end)
        matrix = np.zeros((<span class="predefined-constant">self</span>.lags + <span class="integer">1</span>, <span class="predefined">len</span>(data) - <span class="predefined-constant">self</span>.lags))
        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined-constant">self</span>.lags + <span class="integer">1</span>):
            <span class="keyword">if</span> i == <span class="predefined-constant">self</span>.lags:
                matrix[i] = data.returns.values[i:]
            <span class="keyword">else</span>:
                matrix[i] = data.returns.values[i:i - <span class="predefined-constant">self</span>.lags]
        <span class="predefined-constant">self</span>.matrix = matrix

    <span class="keyword">def</span> <span class="function">fit_model</span>(<span class="predefined-constant">self</span>, start, end):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Implements the regression step.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.prepare_matrix(start, end)
        reg = np.linalg.lstsq(<span class="predefined-constant">self</span>.matrix[:<span class="predefined-constant">self</span>.lags].T,
                              np.sign(<span class="predefined-constant">self</span>.matrix[<span class="predefined-constant">self</span>.lags]))[<span class="integer">0</span>]
        <span class="predefined-constant">self</span>.reg = reg

    <span class="keyword">def</span> <span class="function">run_strategy</span>(<span class="predefined-constant">self</span>, start_in, end_in, start_out, end_out, lags=<span class="integer">3</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Backtests the trading strategy.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.lags = lags
        <span class="predefined-constant">self</span>.fit_model(start_in, end_in)
        data = <span class="predefined-constant">self</span>.select_data(start_out, end_out)
        <span class="predefined-constant">self</span>.prepare_matrix(start_out, end_out)
        prediction = np.sign(np.dot(<span class="predefined-constant">self</span>.matrix[:<span class="predefined-constant">self</span>.lags].T, <span class="predefined-constant">self</span>.reg))
        data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] = <span class="float">0.0</span>
        data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>].ix[<span class="predefined-constant">self</span>.lags:] = prediction
        data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] * data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]
        <span class="comment"># determine when a trade takes place</span>
        trades = data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>].diff().fillna(<span class="integer">0</span>) != <span class="integer">0</span>
        <span class="comment"># subtract transaction costs from return when trade takes place</span>
        data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>][trades] -= <span class="predefined-constant">self</span>.tc
        data[<span class="string"><span class="delimiter">'</span><span class="content">creturns</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.amount * data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].cumsum().apply(np.exp)
        data[<span class="string"><span class="delimiter">'</span><span class="content">cstrategy</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.amount * \
            data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>].cumsum().apply(np.exp)
        <span class="predefined-constant">self</span>.results = data.ix[<span class="predefined-constant">self</span>.lags:]
        <span class="comment"># absolute performance of the strategy</span>
        aperf = <span class="predefined-constant">self</span>.results[<span class="string"><span class="delimiter">'</span><span class="content">cstrategy</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>]
        <span class="comment"># out-/underperformance of strategy</span>
        operf = aperf - <span class="predefined-constant">self</span>.results[<span class="string"><span class="delimiter">'</span><span class="content">creturns</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>]
        <span class="keyword">return</span> <span class="predefined">round</span>(aperf, <span class="integer">2</span>), <span class="predefined">round</span>(operf, <span class="integer">2</span>)

    <span class="keyword">def</span> <span class="function">plot_results</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Plots the cumulative performance of the trading strategy</span><span class="content">
</span><span class="content">        compared to the symbol.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.results <span class="keyword">is</span> <span class="predefined-constant">None</span>:
            print(<span class="string"><span class="delimiter">'</span><span class="content">No results to plot yet. Run a strategy.</span><span class="delimiter">'</span></span>)
        title = <span class="string"><span class="delimiter">'</span><span class="content">%s | TC = %.4f</span><span class="delimiter">'</span></span> % (<span class="predefined-constant">self</span>.symbol, <span class="predefined-constant">self</span>.tc)
        <span class="predefined-constant">self</span>.results[[<span class="string"><span class="delimiter">'</span><span class="content">creturns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">cstrategy</span><span class="delimiter">'</span></span>]].plot(title=title,
                                                     figsize=(<span class="integer">10</span>, <span class="integer">6</span>))


<span class="keyword">if</span> __name__ == <span class="string"><span class="delimiter">'</span><span class="content">__main__</span><span class="delimiter">'</span></span>:
    lrbt = LRVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, <span class="integer">10000</span>, <span class="float">0.0</span>)
    print(lrbt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                            <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>))
    print(lrbt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2014-12-31</span><span class="delimiter">'</span></span>,
                            <span class="string"><span class="delimiter">'</span><span class="content">2015-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>))
    lrbt = LRVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">^GDAXI</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, <span class="integer">10000</span>, <span class="float">0.001</span>)
    print(lrbt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                            <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>))
    print(lrbt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2014-12-31</span><span class="delimiter">'</span></span>,
                            <span class="string"><span class="delimiter">'</span><span class="content">2015-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>))</code></pre>
</div>
</div>
</div>
</div>
<div id="sci_vector_backtester" class="exampleblock">
<div class="title">Example 11. Module with a class for vectorized backtesting of machine learning-based strategies</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Module with Class</span>
<span class="comment"># for Vectorized Backtesting</span>
<span class="comment"># of Machine Learning-based Strategies</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np
<span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd
<span class="keyword">from</span> <span class="include">pandas_datareader</span> <span class="keyword">import</span> <span class="include">data</span> <span class="keyword">as</span> web
<span class="keyword">from</span> <span class="include">sklearn</span> <span class="keyword">import</span> <span class="include">linear_model</span>

h5 = pd.HDFStore(<span class="string"><span class="delimiter">'</span><span class="content">../data/equities.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>)
data = h5[<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>]
h5.close()


<span class="keyword">class</span> <span class="class">ScikitVectorBacktester</span>(<span class="predefined">object</span>):
    <span class="docstring"><span class="delimiter">'''</span><span class="content"> Class for the vectorized backtesting of</span><span class="content">
</span><span class="content">    Machine Learning-based trading strategies.</span><span class="content">
</span><span class="content">
</span><span class="content">    Attributes</span><span class="content">
</span><span class="content">    ==========</span><span class="content">
</span><span class="content">    symbol: str</span><span class="content">
</span><span class="content">        Google Finance symbol with which to work</span><span class="content">
</span><span class="content">    start: str</span><span class="content">
</span><span class="content">        start date for data retrieval</span><span class="content">
</span><span class="content">    end: str</span><span class="content">
</span><span class="content">        end date for data retrieval</span><span class="content">
</span><span class="content">    amount: int, float</span><span class="content">
</span><span class="content">        amount to be invested at the beginning</span><span class="content">
</span><span class="content">    tc: float</span><span class="content">
</span><span class="content">        proportional transaction costs (e.g. 0.5% = 0.005) per trade</span><span class="content">
</span><span class="content">    model: str</span><span class="content">
</span><span class="content">        either 'regression' or 'logistic'</span><span class="content">
</span><span class="content">
</span><span class="content">    Methods</span><span class="content">
</span><span class="content">    =======</span><span class="content">
</span><span class="content">    get_data:</span><span class="content">
</span><span class="content">        retrieves and prepares the base data set</span><span class="content">
</span><span class="content">    select_data:</span><span class="content">
</span><span class="content">        selects a sub-set of the data</span><span class="content">
</span><span class="content">    prepare_matrix:</span><span class="content">
</span><span class="content">        prepares the matrix for the model fitting</span><span class="content">
</span><span class="content">    fit_model:</span><span class="content">
</span><span class="content">        implements the fitting step</span><span class="content">
</span><span class="content">    run_strategy:</span><span class="content">
</span><span class="content">        runs the backtest for the regression-based strategy</span><span class="content">
</span><span class="content">    plot_results:</span><span class="content">
</span><span class="content">        plots the performance of the strategy compared to the symbol</span><span class="content">
</span><span class="content">    </span><span class="delimiter">'''</span></span>

    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, symbol, start, end, amount, tc, model):
        <span class="predefined-constant">self</span>.symbol = symbol
        <span class="predefined-constant">self</span>.start = start
        <span class="predefined-constant">self</span>.end = end
        <span class="predefined-constant">self</span>.amount = amount
        <span class="predefined-constant">self</span>.tc = tc
        <span class="predefined-constant">self</span>.results = <span class="predefined-constant">None</span>
        <span class="keyword">if</span> model == <span class="string"><span class="delimiter">'</span><span class="content">regression</span><span class="delimiter">'</span></span>:
            <span class="predefined-constant">self</span>.model = linear_model.LinearRegression()
        <span class="keyword">elif</span> model == <span class="string"><span class="delimiter">'</span><span class="content">logistic</span><span class="delimiter">'</span></span>:
            <span class="predefined-constant">self</span>.model = linear_model.LogisticRegression(C=<span class="float">1e6</span>)
        <span class="keyword">else</span>:
            <span class="keyword">raise</span> <span class="exception">ValueError</span>(<span class="string"><span class="delimiter">'</span><span class="content">Model not known or not yet implemented.</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.get_data()

    <span class="keyword">def</span> <span class="function">get_data</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Retrieves and prepares the data.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">try</span>:
            raw = web.DataReader(<span class="predefined-constant">self</span>.symbol, data_source=<span class="string"><span class="delimiter">'</span><span class="content">google</span><span class="delimiter">'</span></span>,
                             start=<span class="predefined-constant">self</span>.start, end=<span class="predefined-constant">self</span>.end)[<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>]
            raw = pd.DataFrame(raw)
            raw.rename(columns={<span class="string"><span class="delimiter">'</span><span class="content">Adj Close</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>}, inplace=<span class="predefined-constant">True</span>)
        <span class="keyword">except</span>:
            raw = data[<span class="predefined-constant">self</span>.symbol]
            raw = raw[(raw.index &gt; <span class="predefined-constant">self</span>.start) &amp; (raw.index &lt; <span class="predefined-constant">self</span>.end)]
            raw = pd.DataFrame(raw)
            raw.rename(columns={<span class="predefined-constant">self</span>.symbol: <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>}, inplace=<span class="predefined-constant">True</span>)

        raw[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(raw / raw.shift(<span class="integer">1</span>))
        <span class="predefined-constant">self</span>.data = raw.dropna()

    <span class="keyword">def</span> <span class="function">select_data</span>(<span class="predefined-constant">self</span>, start, end):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Selects sub-sets of the financial data.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        data = <span class="predefined-constant">self</span>.data[(<span class="predefined-constant">self</span>.data.index &gt;= start) &amp;
                         (<span class="predefined-constant">self</span>.data.index &lt;= end)].copy()
        <span class="keyword">return</span> data

    <span class="keyword">def</span> <span class="function">prepare_matrix</span>(<span class="predefined-constant">self</span>, start, end):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Prepares the matrix for the regression and prediction steps.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        data = <span class="predefined-constant">self</span>.select_data(start, end)
        matrix = np.zeros((<span class="predefined-constant">self</span>.lags + <span class="integer">1</span>, <span class="predefined">len</span>(data) - <span class="predefined-constant">self</span>.lags))
        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined-constant">self</span>.lags + <span class="integer">1</span>):
            <span class="keyword">if</span> i == <span class="predefined-constant">self</span>.lags:
                matrix[i] = data.returns.values[i:]
            <span class="keyword">else</span>:
                matrix[i] = data.returns.values[i:i - <span class="predefined-constant">self</span>.lags]
        <span class="predefined-constant">self</span>.matrix = matrix

    <span class="keyword">def</span> <span class="function">fit_model</span>(<span class="predefined-constant">self</span>, start, end):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Implements the fitting step.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.prepare_matrix(start, end)
        <span class="predefined-constant">self</span>.model.fit(<span class="predefined-constant">self</span>.matrix[:<span class="predefined-constant">self</span>.lags].T,
                       np.sign(<span class="predefined-constant">self</span>.matrix[<span class="predefined-constant">self</span>.lags]))

    <span class="keyword">def</span> <span class="function">run_strategy</span>(<span class="predefined-constant">self</span>, start_in, end_in, start_out, end_out, lags=<span class="integer">3</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Backtests the trading strategy.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.lags = lags
        <span class="predefined-constant">self</span>.fit_model(start_in, end_in)
        data = <span class="predefined-constant">self</span>.select_data(start_out, end_out)
        <span class="predefined-constant">self</span>.prepare_matrix(start_out, end_out)
        prediction = <span class="predefined-constant">self</span>.model.predict(<span class="predefined-constant">self</span>.matrix[:<span class="predefined-constant">self</span>.lags].T)
        data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] = <span class="float">0.0</span>
        data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>].ix[<span class="predefined-constant">self</span>.lags:] = prediction
        data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>] * data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]
        <span class="comment"># determine when a trade takes place</span>
        trades = data[<span class="string"><span class="delimiter">'</span><span class="content">prediction</span><span class="delimiter">'</span></span>].diff().fillna(<span class="integer">0</span>) != <span class="integer">0</span>
        <span class="comment"># subtract transaction costs from return when trade takes place</span>
        data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>][trades] -= <span class="predefined-constant">self</span>.tc
        data[<span class="string"><span class="delimiter">'</span><span class="content">creturns</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.amount * data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].cumsum().apply(np.exp)
        data[<span class="string"><span class="delimiter">'</span><span class="content">cstrategy</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.amount * \
            data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>].cumsum().apply(np.exp)
        <span class="predefined-constant">self</span>.results = data.ix[<span class="predefined-constant">self</span>.lags:]
        <span class="comment"># absolute performance of the strategy</span>
        aperf = <span class="predefined-constant">self</span>.results[<span class="string"><span class="delimiter">'</span><span class="content">cstrategy</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>]
        <span class="comment"># out-/underperformance of strategy</span>
        operf = aperf - <span class="predefined-constant">self</span>.results[<span class="string"><span class="delimiter">'</span><span class="content">creturns</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>]
        <span class="keyword">return</span> <span class="predefined">round</span>(aperf, <span class="integer">2</span>), <span class="predefined">round</span>(operf, <span class="integer">2</span>)

    <span class="keyword">def</span> <span class="function">plot_results</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Plots the cumulative performance of the trading strategy</span><span class="content">
</span><span class="content">        compared to the symbol.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.results <span class="keyword">is</span> <span class="predefined-constant">None</span>:
            print(<span class="string"><span class="delimiter">'</span><span class="content">No results to plot yet. Run a strategy.</span><span class="delimiter">'</span></span>)
        title = <span class="string"><span class="delimiter">'</span><span class="content">%s | TC = %.4f</span><span class="delimiter">'</span></span> % (<span class="predefined-constant">self</span>.symbol, <span class="predefined-constant">self</span>.tc)
        <span class="predefined-constant">self</span>.results[[<span class="string"><span class="delimiter">'</span><span class="content">creturns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">cstrategy</span><span class="delimiter">'</span></span>]].plot(title=title,
                                                     figsize=(<span class="integer">10</span>, <span class="integer">6</span>))


<span class="keyword">if</span> __name__ == <span class="string"><span class="delimiter">'</span><span class="content">__main__</span><span class="delimiter">'</span></span>:
    scibt = ScikitVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                                   <span class="integer">10000</span>, <span class="float">0.0</span>, <span class="string"><span class="delimiter">'</span><span class="content">regression</span><span class="delimiter">'</span></span>)
    print(scibt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                             <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>))
    print(scibt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2014-12-31</span><span class="delimiter">'</span></span>,
                             <span class="string"><span class="delimiter">'</span><span class="content">2015-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>))
    scibt = ScikitVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                                   <span class="integer">10000</span>, <span class="float">0.0</span>, <span class="string"><span class="delimiter">'</span><span class="content">logistic</span><span class="delimiter">'</span></span>)
    print(scibt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                             <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>))
    print(scibt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2014-12-31</span><span class="delimiter">'</span></span>,
                             <span class="string"><span class="delimiter">'</span><span class="content">2015-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>))
    scibt = ScikitVectorBacktester(<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                                   <span class="integer">10000</span>, <span class="float">0.001</span>, <span class="string"><span class="delimiter">'</span><span class="content">logistic</span><span class="delimiter">'</span></span>)
    print(scibt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                             <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, lags=<span class="integer">15</span>))
    print(scibt.run_strategy(<span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2014-12-31</span><span class="delimiter">'</span></span>,
                             <span class="string"><span class="delimiter">'</span><span class="content">2015-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, lags=<span class="integer">15</span>))</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="event_based_backtesting">6. Building Classes for Event-based Backtesting</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph align_me_right">
<p>The actual tragedies of life bear no relation to one’s preconceived 
ideas. In the event, one is always bewildered by their simplicity, their
 grandeur of design, and by that element of the bizarre which seems 
inherent in them.</p>
</div>
</blockquote>
<div class="attribution">
— Jean Cocteau
</div>
</div>
<div class="sect2">
<h3 id="_introduction_6">6.1. Introduction</h3>
<div class="paragraph">
<p>On the one hand, <em>vectorized backtesting</em> with <code>NumPy</code> and <code>pandas</code>
 is generally convenient to implement, due to the concise code, and also
 fast to execute, due to these packages being optimized for such 
operations. However, the approach cannot cope with all types of trading 
strategies nor with all phenomena that the trading reality presents an 
algorithmic trader with. When it comes to vectorized backtesting, 
potential shortcomings of the approach are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>look-ahead bias</strong>: vectorized backtesting is based on 
the complete data set available and does not take into account that new 
data arrives incrementally</p>
</li>
<li>
<p><strong>simplification</strong>: for example, fixed transaction costs
 cannot be modeled by vectorization which is mainly based on relative 
returns; also fixed amounts per trade cannot be modeled easily</p>
</li>
<li>
<p><strong>non-recursiveness</strong>: trading strategies might take 
recurse to state variables over time, like profit and loss up to a 
certain point in time or similar path-dependent statistics; 
vectorization cannot cope with such features</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>On the other hand, <em>event-based backtesting</em> allows to address these issues by a more realistic approach to model trading realities. On a basic level, an <em>event</em>
 is characterized by the arrival of new data. Backtesting a trading 
strategy for Apple, Inc. stocks based on end-of-day data, an event would
 be a new closing price for the Apple stock. It can also be a change in 
an interest rate. Advantages of the event-based backtesting approach 
generally are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>incremental approach</strong>: as in the trading reality, backtesting takes place on the premise that new data arrives incrementally</p>
</li>
<li>
<p><strong>realistic modeling</strong>: one has complete freedom to model those processes that are triggered by a new event</p>
</li>
<li>
<p><strong>path dependency</strong>: it is straightforward to keep track of conditional, recursive or otherwise path-dependent statistics</p>
</li>
<li>
<p><strong>re-usability</strong>: backtesting different types of trading
 strategies requires a similar base functionality that can be integrated
 and unified through object-oriented programming</p>
</li>
<li>
<p><strong>close to trading</strong>: certain elements of an event-based
 backtesting system can sometimes also be used for the automated 
implementation of the trading strategy</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In what follows, a new event is generally identified by a <em>bar</em> which represents one unit of new data. For example, events can be <em>one-minute bars</em> for an intraday trading strategy or <em>one-day bars</em> for a trading strategy based on daily closing prices.</p>
</div>
<div class="paragraph">
<p>The chapter is organized as follows. <a href="#base_class">Backtesting Base Class</a> presents a base class for the event-based backtesting of trading strategies. <a href="#long_only">Long Only Backtesting Class</a> and <a href="#long_short">Long Short Backtesting Class</a> make use of the base class to implement long only and long-short backtesting classes, respectively.</p>
</div>
<div class="paragraph">
<p>The goals of this chapter are to understand event-based modeling, to 
create classes that allow a more realistic backtesting and to have a 
foundational backtesting infrastructure available as a starting point 
for further enhancements and refinements.</p>
</div>
</div>
<div class="sect2">
<h3 id="base_class">6.2. Backtesting Base Class</h3>
<div class="paragraph">
<p>When it gets to building the infrastructure — in the form of a Python
 class — for event-based backtesting, a couple of requirements must be 
met:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>retrieving and preparing data</strong>: the base class shall 
take care of the data retrieval and possibly the preparation for the 
backtesting itself; to keep the discussion focused, end-of-day data from
 Google Finance is the type of data the base class shall allow for</p>
</li>
<li>
<p><strong>helper and convenience functions</strong>: it shall provide a
 couple of helper and convenience functions that make backtesting 
easier; examples are plotting data, printing out state variables or 
returning date and price information for a given bar</p>
</li>
<li>
<p><strong>placing orders</strong>: the base class shall cover the 
placing of basic buy and sell orders; for simplicity, only market buy 
and sell orders are modeled</p>
</li>
<li>
<p><strong>closing out positions</strong>: at the end of any 
backtesting, market positions (if any) need to be closed out; the base 
class shall take care of this final trade</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If the base class meets these requirements, respective classes to 
backtest strategies based on simple moving averages (SMAs), momentum or 
mean-reversion (cf. <a href="#vectorized_backtesting">Mastering Vectorized Backtesting</a>) as well as on machine learning-based prediction (cf. <a href="#machine_learning">Predicting Market Movements with Machine Learning</a>) can be built upon it. <a href="#py_base_class">Module with a base class for event-based backtesting</a> presents an implementation of such a base class called <code>BacktestBase</code>. The following is a walk through the single methods of this class to get an overview of its design.</p>
</div>
<div class="paragraph">
<p>With regard to the special method <code>__init__</code> there only a few things noteworthy. First, the amount is stored twice, both in a private attribute <code>_amount</code> that is kept constant and in a regular attribute <code>amount</code> that represents the running balance. The default assumption is that there are no transaction costs.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, symbol, start, end, amount, ftc=<span class="float">0.0</span>, ptc=<span class="float">0.0</span>):
        <span class="predefined-constant">self</span>.symbol = symbol
        <span class="predefined-constant">self</span>.start = start
        <span class="predefined-constant">self</span>.end = end
        <span class="predefined-constant">self</span>._amount = amount  <i class="conum" data-value="1"></i><b>(1)</b>
        <span class="predefined-constant">self</span>.amount = amount  <i class="conum" data-value="2"></i><b>(2)</b>
        <span class="predefined-constant">self</span>.ftc = ftc  <i class="conum" data-value="3"></i><b>(3)</b>
        <span class="predefined-constant">self</span>.ptc = ptc  <i class="conum" data-value="4"></i><b>(4)</b>
        <span class="predefined-constant">self</span>.units = <span class="integer">0</span>  <i class="conum" data-value="5"></i><b>(5)</b>
        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>  <i class="conum" data-value="6"></i><b>(6)</b>
        <span class="predefined-constant">self</span>.trades = <span class="integer">0</span>  <i class="conum" data-value="7"></i><b>(7)</b>
        <span class="predefined-constant">self</span>.verbose = <span class="predefined-constant">True</span>  <i class="conum" data-value="8"></i><b>(8)</b>
        <span class="predefined-constant">self</span>.get_data()</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Stores the initial amount in a private attribute.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Sets the starting current cash balance value.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Defines fixed transaction costs per trade.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Defines proportional transaction costs per trade.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Units of the instrument (number of shares) in the portfolio initially.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Sets the initial position to market neutral.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Sets the initial number of trades to zero.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Sets <code>self.verbose</code> to <code>True</code> to get full output.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>During initialization, the <code>get_data</code> method is called 
which retrieves (close) data from Google Finance for the provided symbol
 and the given time interval. It also calculates the log returns. The 
code below has been used already extensively in <a href="#vectorized_backtesting">Mastering Vectorized Backtesting</a> and <a href="#machine_learning">Predicting Market Movements with Machine Learning</a> — it is therefore not explained in detail here.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">get_data</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Retrieves and prepares the data.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        raw = web.DataReader(<span class="predefined-constant">self</span>.symbol, data_source=<span class="string"><span class="delimiter">'</span><span class="content">google</span><span class="delimiter">'</span></span>,
                             start=<span class="predefined-constant">self</span>.start, end=<span class="predefined-constant">self</span>.end)[<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>]
        raw = pd.DataFrame(raw)
        raw.rename(columns={<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>}, inplace=<span class="predefined-constant">True</span>)
        raw[<span class="string"><span class="delimiter">'</span><span class="content">return</span><span class="delimiter">'</span></span>] = np.log(raw / raw.shift(<span class="integer">1</span>))
        <span class="predefined-constant">self</span>.data = raw.dropna()</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>plot_data</code> method is just a simple helper method to plot the (adjusted close) values for the provided symbol.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">plot_data</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Plots the (adjusted) closing prices for symbol.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>), title=<span class="predefined-constant">self</span>.symbol)</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>balance_info</code> prints out the current cash balance given a certain date.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">print_balance</span>(<span class="predefined-constant">self</span>, date=<span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Print out current cash balance info.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        print(<span class="string"><span class="delimiter">'</span><span class="content">%s | current cash balance %8d</span><span class="delimiter">'</span></span> % (date[:<span class="integer">10</span>], <span class="predefined-constant">self</span>.amount))</code></pre>
</div>
</div>
<div class="paragraph">
<p>A method that gets frequently called is <code>get_date_price</code>. For a given <code>bar</code> it returns the date and price information.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">get_date_price</span>(<span class="predefined-constant">self</span>, bar):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Return date and price for bar.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        date = <span class="predefined">str</span>(<span class="predefined-constant">self</span>.data.index[bar])
        price = <span class="predefined-constant">self</span>.data.price.ix[bar]
        <span class="keyword">return</span> date, price</code></pre>
</div>
</div>
<div class="paragraph">
<p>Two core methods are <code>place_buy_order</code> and <code>place_sell_order</code>. They allow the (simulated) buying and selling of stocks, respectively. First, the <code>place_buy_order</code> method which is commented in detail.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">place_buy_order</span>(<span class="predefined-constant">self</span>, bar, units=<span class="predefined-constant">None</span>, amount=<span class="predefined-constant">None</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Place a buy order.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        date, price = <span class="predefined-constant">self</span>.get_date_price(bar)  <i class="conum" data-value="1"></i><b>(1)</b>
        <span class="keyword">if</span> units <span class="keyword">is</span> <span class="predefined-constant">None</span>:  <i class="conum" data-value="2"></i><b>(2)</b>
            units = math.floor(amount / price)  <i class="conum" data-value="3"></i><b>(3)</b>
        <span class="predefined-constant">self</span>.amount -= (units * price) * (<span class="integer">1</span> + <span class="predefined-constant">self</span>.ptc) + <span class="predefined-constant">self</span>.ftc  <i class="conum" data-value="4"></i><b>(4)</b>
        <span class="predefined-constant">self</span>.units += units  <i class="conum" data-value="5"></i><b>(5)</b>
        <span class="predefined-constant">self</span>.trades += <span class="integer">1</span>  <i class="conum" data-value="6"></i><b>(6)</b>
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.verbose:  <i class="conum" data-value="7"></i><b>(7)</b>
            print(<span class="string"><span class="delimiter">'</span><span class="content">%s | buying  %4d units at %7.2f</span><span class="delimiter">'</span></span> %
                  (date[:<span class="integer">10</span>], units, price))  <i class="conum" data-value="8"></i><b>(8)</b>
            <span class="predefined-constant">self</span>.print_balance(date)  <i class="conum" data-value="9"></i><b>(9)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The date and price information for the given <code>bar</code> is retrieved.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>If no value for <code>units</code> is given …​</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>…​ the number of <code>units</code> is calculated given the value for <code>amount</code> (note that one needs to be given).</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The current cash balance is reduced by the cash outlays for the 
units of the instrument to be bought as well as by the proportional and 
fixed transaction costs (note that it is not checked whether there is 
enough liquidity available).</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The value of <code>self.units</code> is increased by the number of units bought.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>This increases the counter for the number of trades by one.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>If <code>self.verbose</code> is <code>True</code> …​</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>…​ print out information about trade execution …​</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>…​ and the current cash balance.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Second, the <code>place_sell_order</code> method which has only two minor adjustments compared to the <code>place_buy_order</code> method.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">place_sell_order</span>(<span class="predefined-constant">self</span>, bar, units=<span class="predefined-constant">None</span>, amount=<span class="predefined-constant">None</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Place a sell order.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        date, price = <span class="predefined-constant">self</span>.get_date_price(bar)
        <span class="keyword">if</span> units <span class="keyword">is</span> <span class="predefined-constant">None</span>:
            units = math.floor(amount / price)
        <span class="predefined-constant">self</span>.amount += (units * price) * (<span class="integer">1</span> - <span class="predefined-constant">self</span>.ptc) - <span class="predefined-constant">self</span>.ftc  <i class="conum" data-value="1"></i><b>(1)</b>
        <span class="predefined-constant">self</span>.units -= units  <i class="conum" data-value="2"></i><b>(2)</b>
        <span class="predefined-constant">self</span>.trades += <span class="integer">1</span>
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.verbose:
            print(<span class="string"><span class="delimiter">'</span><span class="content">%s | selling %4d units at %7.2f</span><span class="delimiter">'</span></span> %
                  (date[:<span class="integer">10</span>], units, price))
            <span class="predefined-constant">self</span>.print_balance(date)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The current cash balance is increased by the proceeds of the sale <em>minus</em> transactions costs.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The value of <code>self.units</code> is decreased by the number of units sold.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>No matter what kind of trading strategy is backtested, the position 
at the end of the backtesting period needs to be closed out. The code in
 the <code>BacktestBase</code> class assumes that the position is not 
liquidated but rather accounted for with its asset value to calculate 
and print the performance figures.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">close_out</span>(<span class="predefined-constant">self</span>, bar):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Closing out a long or short position.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        date, price = <span class="predefined-constant">self</span>.get_date_price(bar)
        <span class="predefined-constant">self</span>.amount += <span class="predefined-constant">self</span>.units * price  <i class="conum" data-value="1"></i><b>(1)</b>
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.verbose:
            print(<span class="string"><span class="delimiter">'</span><span class="content">%s | inventory %d units at %.2f</span><span class="delimiter">'</span></span> % (date[:<span class="integer">10</span>],
                                                       <span class="predefined-constant">self</span>.units, price))
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.verbose:
            print(<span class="string"><span class="delimiter">'</span><span class="content">=</span><span class="delimiter">'</span></span> * <span class="integer">55</span>)
        print(<span class="string"><span class="delimiter">'</span><span class="content">Final balance   [$] %13.2f</span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.amount)  <i class="conum" data-value="2"></i><b>(2)</b>
        print(<span class="string"><span class="delimiter">'</span><span class="content">Net Performance [%%] %13.2f</span><span class="delimiter">'</span></span> % ((<span class="predefined-constant">self</span>.amount - <span class="predefined-constant">self</span>._amount) /
                                               <span class="predefined-constant">self</span>._amount * <span class="integer">100</span>))  <i class="conum" data-value="3"></i><b>(3)</b>
        print(<span class="string"><span class="delimiter">'</span><span class="content">=</span><span class="delimiter">'</span></span> * <span class="integer">55</span>)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>No transaction costs are subtracted at the end.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The final balance consists of the current cash balance plus the value of the trading position.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>This calculates the net performance in percent.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The final part of the Python script is the <code>__main__</code> section which gets executed when the file is run as a script.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="keyword">if</span> __name__ == <span class="string"><span class="delimiter">'</span><span class="content">__main__</span><span class="delimiter">'</span></span>:
    bb = BacktestBase(<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, <span class="integer">10000</span>)
    print(bb.data.info())
    print(bb.data.tail())
    bb.plot_data()</code></pre>
</div>
</div>
<div class="paragraph">
<p>It instantiates an object based on the <code>BacktestBase</code> class. This leads automatically to the data retrieval for the symbol provided. <a href="#bt_plot_1">Plot of data as retrieved for <code>symbol</code> by the <code>BacktestBase</code> class</a> shows the resulting plot, the output below the meta information for the respective <code>DataFrame</code> object and the five most recent data rows.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 1719 entries, 2010-01-05 to 2016-10-31
Data columns (total 2 columns):
price     1719 non-null float64
return    1719 non-null float64
dtypes: float64(2)
memory usage: 40.3 KB
None
                 price    return
Date
2016-10-25  117.645979  0.005087
2016-10-26  114.999563 -0.022752
2016-10-27  113.895240 -0.009649
2016-10-28  113.139120 -0.006661
2016-10-31  112.960039 -0.001584</pre>
</div>
</div>
<div id="bt_plot_1" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/backtestbaseplot.png" alt="backtestbaseplot">
</div>
<div class="title">Figure 42. Plot of data as retrieved for <code>symbol</code> by the <code>BacktestBase</code> class</div>
</div>
<div class="paragraph">
<p>The two subsequent sections present classes to backtest long only and
 long short trading strategies. Since these classes rely on the base 
class presented in this section, the implementation of the backtesting 
routines themselves is rather concise.</p>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Using object-oriented programming allows to build a basic backtesting
 infrastructure in the form of a Python class. Standard functionality 
needed during the backtesting of different kinds of algorithmic trading 
strategies is made available by such a class in a non-redundant, 
easy-to-maintain fashion. It is also straightforward to enhance the base
 class to provide more features by default that might benefit a 
multitude of other classes built on top of it.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="long_only">6.3. Long Only Backtesting Class</h3>
<div class="paragraph">
<p>Certain investor preferences or regulations might prohibit short 
selling as part of a trading strategy. As a consequence, a trader or 
portfolio manager is only allowed to enter long positions or to park 
capital in the form of cash or similar low risk assets, like money 
market accounts. <a href="#py_long_only">Module with class for backtesting long only strategies</a> shows the code of a backtesting class for long only strategies called <code>BacktestLongOnly</code>. Since it relies on and inherits from the <code>BacktestBase</code> class, the code to implement the three strategies based on SMAs, momentum and mean reversion is rather concise.</p>
</div>
<div class="paragraph">
<p>The method <code>run_mean_reversion_strategy</code> implements the 
backtesting procedure for the mean-reversion-based strategy. This method
 is commented in detail since it might be a bit trickier from an 
implementation stand point. The basic insights, however, carry easily 
over to the methods implementing the other two strategies.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">run_mean_reversion_strategy</span>(<span class="predefined-constant">self</span>, SMA, threshold):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Backtesting a mean reversion-based strategy.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters</span><span class="content">
</span><span class="content">        ==========</span><span class="content">
</span><span class="content">        SMA: int</span><span class="content">
</span><span class="content">            simple moving average in days</span><span class="content">
</span><span class="content">        threshold: float</span><span class="content">
</span><span class="content">            absolute value for deviation-based signal relative to SMA</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        msg = <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="char">\n</span><span class="content">Running mean reversion strategy | SMA %d &amp; thr %d</span><span class="delimiter">'</span></span> \
            % (SMA, threshold)
        msg += <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="content">fixed costs %.2f | </span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.ftc
        msg += <span class="string"><span class="delimiter">'</span><span class="content">proportional costs %.4f</span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.ptc
        print(msg)  <i class="conum" data-value="1"></i><b>(1)</b>
        print(<span class="string"><span class="delimiter">'</span><span class="content">=</span><span class="delimiter">'</span></span> * <span class="integer">55</span>)
        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>  <i class="conum" data-value="2"></i><b>(2)</b>
        <span class="predefined-constant">self</span>.amount = <span class="predefined-constant">self</span>._amount  <i class="conum" data-value="3"></i><b>(3)</b>

        <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].rolling(SMA).mean()  <i class="conum" data-value="4"></i><b>(4)</b>

        <span class="keyword">for</span> bar <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined">len</span>(<span class="predefined-constant">self</span>.data)):
            <span class="keyword">if</span> bar &gt;= SMA:  <i class="conum" data-value="5"></i><b>(5)</b>
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">0</span>:  <i class="conum" data-value="6"></i><b>(6)</b>
                    <span class="keyword">if</span> (<span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].ix[bar] &lt;
                            <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>].ix[bar] - threshold):  <i class="conum" data-value="7"></i><b>(7)</b>
                        <span class="predefined-constant">self</span>.place_buy_order(bar, amount=<span class="predefined-constant">self</span>.amount)  <i class="conum" data-value="8"></i><b>(8)</b>
                        <span class="predefined-constant">self</span>.position = <span class="integer">1</span>  <i class="conum" data-value="9"></i><b>(9)</b>
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:  <i class="conum" data-value="10"></i><b>(10)</b>
                    <span class="keyword">if</span> <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].ix[bar] &gt;= <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>].ix[bar]:  <i class="conum" data-value="11"></i><b>(11)</b>
                        <span class="predefined-constant">self</span>.place_sell_order(bar, units=<span class="predefined-constant">self</span>.units)  <i class="conum" data-value="12"></i><b>(12)</b>
                        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>  <i class="conum" data-value="13"></i><b>(13)</b>
        <span class="predefined-constant">self</span>.close_out(bar)  <i class="conum" data-value="14"></i><b>(14)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>At the beginning, this method prints out an overview of the major parameters for the backtesting.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The position is set to market neutral, which is done here for more clarity and should be the case anyways.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The current cash balance is reset to the initial amount in case another backtest run has overwritten the value.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>This calculates the SMA values needed for the strategy implementation.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>This condition ensures that there are SMA values available to start implementing the strategy.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The condition checks whether the position is market neutral.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>If the position is market neutral, it is checked whether the current
 price is low enough relative to the SMA to trigger a buy order, i.e. to
 go long.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>This executes the buy order in the amount of the current cash balance.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>The market position is set to long.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>The condition checks whether the position is long the market.</td>
</tr>
<tr>
<td><i class="conum" data-value="11"></i><b>11</b></td>
<td>It that is the case, it is checked whether the current price has returned to the SMA level or above.</td>
</tr>
<tr>
<td><i class="conum" data-value="12"></i><b>12</b></td>
<td>In such a case, a sell order is placed for all units of the stock/financial instrument.</td>
</tr>
<tr>
<td><i class="conum" data-value="13"></i><b>13</b></td>
<td>The market position is set to neutral again.</td>
</tr>
<tr>
<td><i class="conum" data-value="14"></i><b>14</b></td>
<td>At the end of the backtesting period, any (potential) market position gets closed out.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Executing the Python script in <a href="#py_long_only">Module with class for backtesting long only strategies</a>
 yields backtesting results as shown below. The examples illustrate the 
influence of fixed and proportional transaction costs. First, they eat 
into the performance in general. Taking into account transaction costs 
in any case reduces the performance. Second, they bring to light the 
importance of the number of trades a certain strategy triggers over 
time. <em>Without</em> transaction costs, the momentum strategy significantly outperforms the SMA-based strategy. <em>With</em> transaction costs, the SMA-based strategy outperforms the momentum strategy since it relies on much fewer trades.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>Running SMA strategy | SMA1 = 42 &amp; SMA2 = 252
Fixed costs 0.00 | proportional costs 0.0000
=======================================================
Final balance   [$]      28595.08
Net Performance [%]        185.95
=======================================================


Running momentum strategy | 60 days
Fixed costs 0.00 | proportional costs 0.0000
=======================================================
Final balance   [$]      36220.94
Net Performance [%]        262.21
=======================================================


Running mean reversion strategy | SMA 50 &amp; thr 5
Fixed costs 0.00 | proportional costs 0.0000
=======================================================
Final balance   [$]      10571.15
Net Performance [%]          5.71
=======================================================


Running SMA strategy | SMA1 = 42 &amp; SMA2 = 252
Fixed costs 10.00 | proportional costs 0.0050
=======================================================
Final balance   [$]      27950.11
Net Performance [%]        179.50
=======================================================


Running momentum strategy | 60 days
Fixed costs 10.00 | proportional costs 0.0050
=======================================================
Final balance   [$]      22612.09
Net Performance [%]        126.12
=======================================================


Running mean reversion strategy | SMA 50 &amp; thr 5
Fixed costs 10.00 | proportional costs 0.0050
=======================================================
Final balance   [$]       9247.51
Net Performance [%]         -7.52
=======================================================</pre>
</div>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p><a href="#machine_learning">Predicting Market Movements with Machine Learning</a>
 emphasizes that there are two sides of the performance coin: the hit 
ratio for the correct prediction of the market direction and the market 
timing, i.e. when exactly the prediction is correct. The results shown 
here illustrate that there is even a "third side": the number of trades 
triggered by a strategy. A strategy that demands a higher frequency of 
trades has to bear higher transaction costs that easily eat up an 
alleged outperformance over another strategy without transaction costs.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="long_short">6.4. Long Short Backtesting Class</h3>
<div class="paragraph">
<p><a href="#py_long_short">Module with class for backtesting long-short strategies</a> presents the <code>BacktestLongShort</code> class which also inherits from the <code>BacktestBase</code>
 class. In addition to implementing the respective methods for the 
backtesting of the different strategies, it also implements two 
additional methods to go long and short, respectively. Only the <code>go_long</code> method is commented in detail since the <code>go_short</code> method does exactly the same in the opposite direction.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">go_long</span>(<span class="predefined-constant">self</span>, bar, units=<span class="predefined-constant">None</span>, amount=<span class="predefined-constant">None</span>):  <i class="conum" data-value="1"></i><b>(1)</b>
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == -<span class="integer">1</span>:  <i class="conum" data-value="2"></i><b>(2)</b>
            <span class="predefined-constant">self</span>.place_buy_order(bar, units=<span class="predefined-constant">self</span>.units)  <i class="conum" data-value="3"></i><b>(3)</b>
        <span class="keyword">if</span> units:  <i class="conum" data-value="4"></i><b>(4)</b>
            <span class="predefined-constant">self</span>.place_buy_order(bar, units=units)  <i class="conum" data-value="5"></i><b>(5)</b>
        <span class="keyword">elif</span> amount:  <i class="conum" data-value="6"></i><b>(6)</b>
            <span class="keyword">if</span> amount == <span class="string"><span class="delimiter">'</span><span class="content">all</span><span class="delimiter">'</span></span>:  <i class="conum" data-value="7"></i><b>(7)</b>
                amount = <span class="predefined-constant">self</span>.amount  <i class="conum" data-value="8"></i><b>(8)</b>
            <span class="predefined-constant">self</span>.place_buy_order(bar, amount=amount)  <i class="conum" data-value="9"></i><b>(9)</b>

    <span class="keyword">def</span> <span class="function">go_short</span>(<span class="predefined-constant">self</span>, bar, units=<span class="predefined-constant">None</span>, amount=<span class="predefined-constant">None</span>):
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:
            <span class="predefined-constant">self</span>.place_sell_order(bar, units=<span class="predefined-constant">self</span>.units)
        <span class="keyword">if</span> units:
            <span class="predefined-constant">self</span>.place_sell_order(bar, units=units)
        <span class="keyword">elif</span> amount:
            <span class="keyword">if</span> amount == <span class="string"><span class="delimiter">'</span><span class="content">all</span><span class="delimiter">'</span></span>:
                amount = <span class="predefined-constant">self</span>.amount
            <span class="predefined-constant">self</span>.place_sell_order(bar, amount=amount)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>In addition to <code>bar</code>, the methods expect either a number for the units of the traded instrument or an currency amount.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>In the <code>go_long</code> case, it is first checked whether there is a short position.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>If so, this short position gets closed first.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>It is then checked whether <code>units</code> is given …​</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>…​ which triggers a buy order accordingly.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>If <code>amount</code> is given, there can be two cases.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>First, the value is <code>all</code> which translates into …​</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>…​ all the available cash in the current cash balance.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>Second, the value is a number that is then simply taken to place the
 respective buy order. Note that it is not checked, for instance, 
whether there is enough liquidity.</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>To keep the implementation concise throughout there are many 
simplifications in the Python classes that transfer responsibility to 
the user. For example, the classes do not take care whether there is 
enough liquidity or not to execute a trade. This is an economic 
simplification since in theory one could assume unlimited credit. As 
another example, certain methods expect that at least one of two 
parameters (i.e. <code>units</code> or <code>amount</code>) is specified. There is no code that catches the case where both are not set. This is a technical simplification.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The following presents the core loop from the <code>run_mean_reversion_strategy</code> method of the <code>BacktestLongShort</code>
 class. Again, the mean reversion strategy is picked since the 
implementation is a bit more involved. For instance, it is the only 
strategy the also leads to intermediate market neutral positions. This 
necessitates more checks compared to the other two strategies as seen in
 <a href="#py_long_short">Module with class for backtesting long-short strategies</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">        <span class="keyword">for</span> bar <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined">len</span>(<span class="predefined-constant">self</span>.data)):
            <span class="keyword">if</span> bar &gt;= SMA:
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">0</span>:  <i class="conum" data-value="1"></i><b>(1)</b>
                    <span class="keyword">if</span> (<span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].ix[bar] &lt;
                            <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>].ix[bar] - threshold):  <i class="conum" data-value="2"></i><b>(2)</b>
                        <span class="predefined-constant">self</span>.go_long(bar, amount=<span class="predefined-constant">self</span>._amount)  <i class="conum" data-value="3"></i><b>(3)</b>
                        <span class="predefined-constant">self</span>.position = <span class="integer">1</span>  <i class="conum" data-value="4"></i><b>(4)</b>
                    <span class="keyword">elif</span> (<span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].ix[bar] &gt;
                            <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>].ix[bar] + threshold):  <i class="conum" data-value="5"></i><b>(5)</b>
                        <span class="predefined-constant">self</span>.go_short(bar, amount=<span class="predefined-constant">self</span>._amount)
                        <span class="predefined-constant">self</span>.position = -<span class="integer">1</span>  <i class="conum" data-value="6"></i><b>(6)</b>
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:  <i class="conum" data-value="7"></i><b>(7)</b>
                    <span class="keyword">if</span> <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].ix[bar] &gt;= <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>].ix[bar]:  <i class="conum" data-value="8"></i><b>(8)</b>
                        <span class="predefined-constant">self</span>.place_sell_order(bar, units=<span class="predefined-constant">self</span>.units)  <i class="conum" data-value="9"></i><b>(9)</b>
                        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>  <i class="conum" data-value="10"></i><b>(10)</b>
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == -<span class="integer">1</span>:  <i class="conum" data-value="11"></i><b>(11)</b>
                    <span class="keyword">if</span> <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].ix[bar] &lt;= <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>].ix[bar]:  <i class="conum" data-value="12"></i><b>(12)</b>
                        <span class="predefined-constant">self</span>.place_buy_order(bar, units=-<span class="predefined-constant">self</span>.units)  <i class="conum" data-value="13"></i><b>(13)</b>
                        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>  <i class="conum" data-value="14"></i><b>(14)</b>
        <span class="predefined-constant">self</span>.close_out(bar)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The first top level condition checks whether the position is market neutral.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>If this is true, it is then checked whether the current price is low enough relative to the SMA.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>In such a case, the <code>go_long</code> method is called …​</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>…​ and the market position is set to long.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>If the current price is high enough relative to the SMA, the <code>go_short</code> method is called …​</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>…​ and the market position is set to short.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>The second top level condition checks for a long market position.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>In such a case, it is further checked whether the current price is at or above the SMA level again.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>If so, the long position gets closed out by selling all units in the portfolio.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>The market position is reset to neutral.</td>
</tr>
<tr>
<td><i class="conum" data-value="11"></i><b>11</b></td>
<td>Finally, the third top level condition checks for a short position.</td>
</tr>
<tr>
<td><i class="conum" data-value="12"></i><b>12</b></td>
<td>If the current price is at or below the SMA …​</td>
</tr>
<tr>
<td><i class="conum" data-value="13"></i><b>13</b></td>
<td>…​ a buy order for all units short is triggered to close out the short position.</td>
</tr>
<tr>
<td><i class="conum" data-value="14"></i><b>14</b></td>
<td>The market position is then reset to neutral.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Executing the Python script in <a href="#py_long_short">Module with class for backtesting long-short strategies</a>
 yields performance results that shed further light on strategy 
characteristics. One might be inclined to assume that adding the 
flexibility to short the market yields better results. However, reality 
shows that this is not necessarily true. The SMA-based strategy (with 
and without transaction costs) performs better in this scenario. By 
contrast, the momentum and mean-reversion strategies both perform worse 
compared to the long only case. Although these are specific results 
only, they illustrate that it is risky in such a context to jump to 
conclusions too early.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>Running SMA strategy | SMA1 = 42 &amp; SMA2 = 252
Fixed costs 0.00 | proportional costs 0.0000
=======================================================
Final balance   [$]      31133.37
Net Performance [%]        211.33
=======================================================


Running momentum strategy | 60 days
Fixed costs 0.00 | proportional costs 0.0000
=======================================================
Final balance   [$]      32534.66
Net Performance [%]        225.35
=======================================================


Running mean reversion strategy | SMA 50 &amp; thr 5
Fixed costs 0.00 | proportional costs 0.0000
=======================================================
Final balance   [$]       9417.57
Net Performance [%]         -5.82
=======================================================


Running SMA strategy | SMA1 = 42 &amp; SMA2 = 252
Fixed costs 10.00 | proportional costs 0.0050
=======================================================
Final balance   [$]      29961.91
Net Performance [%]        199.62
=======================================================


Running momentum strategy | 60 days
Fixed costs 10.00 | proportional costs 0.0050
=======================================================
Final balance   [$]      12294.11
Net Performance [%]         22.94
=======================================================


Running mean reversion strategy | SMA 50 &amp; thr 5
Fixed costs 10.00 | proportional costs 0.0050
=======================================================
Final balance   [$]       6110.05
Net Performance [%]        -38.90
=======================================================</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_conclusions_6">6.5. Conclusions</h3>
<div class="paragraph">
<p>This chapter presents classes for the event-based backtesting of 
trading strategies. Compared to vectorized backtesting, event-based 
backtesting makes intentional and heavy use of loops and iterations to 
be able to tackle every single new event (in general the arrival of new 
data) individually. This allows for a more flexible approach that can, 
among others, easily cope with fixed transaction costs or more complex 
strategies (and variations thereof).</p>
</div>
<div class="paragraph">
<p><a href="#base_class">Backtesting Base Class</a> presents a base class with certain methods useful for the backtesting of a variety of trading strategies. <a href="#long_only">Long Only Backtesting Class</a> and <a href="#long_short">Long Short Backtesting Class</a>
 build on this infrastructure to implement classes that allow the 
backtesting of long only and long short trading strategies. Mainly for 
comparison reasons, the implementations include all three strategies 
formally introduced in <a href="#vectorized_backtesting">Mastering Vectorized Backtesting</a>. Taking the classes of this chapter as a starting point, enhancements and refinements are easily achieved.</p>
</div>
</div>
<div class="sect2">
<h3 id="_further_resources_6">6.6. Further Resources</h3>
<div class="paragraph">
<p>Previous chapters introduce the basic ideas and concepts with regard 
to the three trading strategies covered in this chapter. This chapter 
for the first time makes a more systemic use of Python classes and 
object-oriented programming. A good introduction to OOP with Python and 
Python’s data model is found in Ramalho (2016).</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Ramalho, Luciano (2016): <em>Fluent Python</em>. O’Reilly, Bejing et al.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The Python ecosystem provides a number of optional packages that 
allow the backtesting of algorithmic trading strategies. Three of them 
are the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://pmorissette.github.io/bt/" target="_blank">bt</a></p>
</li>
<li>
<p><a href="http://gbeced.github.io/pyalgotrade/" target="_blank">PyAlgoTrade</a></p>
</li>
<li>
<p><a href="https://github.com/quantopian/zipline" target="_blank">Zipline</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p><code>Zipline</code>, for example, powers the popular <a href="http://quantopian.com/" target="_blank">Quantopian</a> platform for the backtesting of algorithmic trading strategies but can also be used locally.</p>
</div>
</div>
<div class="sect2">
<h3 id="_python_scripts_4">6.7. Python Scripts</h3>
<div id="py_base_class" class="exampleblock">
<div class="title">Example 12. Module with a base class for event-based backtesting</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Script with Base Class</span>
<span class="comment"># for Event-based Backtesting</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">math</span>
<span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np
<span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd
<span class="keyword">from</span> <span class="include">pandas_datareader</span> <span class="keyword">import</span> <span class="include">data</span> <span class="keyword">as</span> web
<span class="keyword">import</span> <span class="include">matplotlib.pyplot</span> <span class="keyword">as</span> plt
plt.style.use(<span class="string"><span class="delimiter">'</span><span class="content">seaborn</span><span class="delimiter">'</span></span>)


<span class="keyword">class</span> <span class="class">BacktestBase</span>(<span class="predefined">object</span>):
    <span class="docstring"><span class="delimiter">'''</span><span class="content"> Base class for event-based backtesting of trading strategies.</span><span class="content">
</span><span class="content">
</span><span class="content">    Attributes</span><span class="content">
</span><span class="content">    ==========</span><span class="content">
</span><span class="content">    symbol: str</span><span class="content">
</span><span class="content">        symbol on which to implement the backtesting</span><span class="content">
</span><span class="content">    amount: float</span><span class="content">
</span><span class="content">        amount to be invested either once or per trade</span><span class="content">
</span><span class="content">    ftc: float</span><span class="content">
</span><span class="content">        fixed transaction costs per trade (buy or sell)</span><span class="content">
</span><span class="content">    ptc: float</span><span class="content">
</span><span class="content">        proportional transaction costs per trade (buy or sell)</span><span class="content">
</span><span class="content">
</span><span class="content">    Methods</span><span class="content">
</span><span class="content">    =======</span><span class="content">
</span><span class="content">    get_data:</span><span class="content">
</span><span class="content">        retrieves and prepares the base data set</span><span class="content">
</span><span class="content">    plot_data:</span><span class="content">
</span><span class="content">        plots the closing price for the symbol</span><span class="content">
</span><span class="content">    print_balance:</span><span class="content">
</span><span class="content">        prints out the current (cash) balance</span><span class="content">
</span><span class="content">    get_date_price:</span><span class="content">
</span><span class="content">        returns the date and price for the given bar</span><span class="content">
</span><span class="content">    place_buy_order:</span><span class="content">
</span><span class="content">        places a buy order</span><span class="content">
</span><span class="content">    place_sell_order:</span><span class="content">
</span><span class="content">        places a sell order</span><span class="content">
</span><span class="content">    close_out:</span><span class="content">
</span><span class="content">        closes out a long or short position</span><span class="content">
</span><span class="content">    </span><span class="delimiter">'''</span></span>

    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, symbol, start, end, amount, ftc=<span class="float">0.0</span>, ptc=<span class="float">0.0</span>):
        <span class="predefined-constant">self</span>.symbol = symbol
        <span class="predefined-constant">self</span>.start = start
        <span class="predefined-constant">self</span>.end = end
        <span class="predefined-constant">self</span>._amount = amount
        <span class="predefined-constant">self</span>.amount = amount
        <span class="predefined-constant">self</span>.ftc = ftc
        <span class="predefined-constant">self</span>.ptc = ptc
        <span class="predefined-constant">self</span>.units = <span class="integer">0</span>
        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>
        <span class="predefined-constant">self</span>.trades = <span class="integer">0</span>
        <span class="predefined-constant">self</span>.verbose = <span class="predefined-constant">True</span>
        <span class="predefined-constant">self</span>.get_data()

    <span class="keyword">def</span> <span class="function">get_data</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Retrieves and prepares the data.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        raw = web.DataReader(<span class="predefined-constant">self</span>.symbol, data_source=<span class="string"><span class="delimiter">'</span><span class="content">google</span><span class="delimiter">'</span></span>,
                             start=<span class="predefined-constant">self</span>.start, end=<span class="predefined-constant">self</span>.end)[<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>]
        raw = pd.DataFrame(raw)
        raw.rename(columns={<span class="string"><span class="delimiter">'</span><span class="content">Close</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>}, inplace=<span class="predefined-constant">True</span>)
        raw[<span class="string"><span class="delimiter">'</span><span class="content">return</span><span class="delimiter">'</span></span>] = np.log(raw / raw.shift(<span class="integer">1</span>))
        <span class="predefined-constant">self</span>.data = raw.dropna()

    <span class="keyword">def</span> <span class="function">plot_data</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Plots the (adjusted) closing prices for symbol.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>), title=<span class="predefined-constant">self</span>.symbol)

    <span class="keyword">def</span> <span class="function">print_balance</span>(<span class="predefined-constant">self</span>, date=<span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Print out current cash balance info.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        print(<span class="string"><span class="delimiter">'</span><span class="content">%s | current cash balance %8d</span><span class="delimiter">'</span></span> % (date[:<span class="integer">10</span>], <span class="predefined-constant">self</span>.amount))

    <span class="keyword">def</span> <span class="function">get_date_price</span>(<span class="predefined-constant">self</span>, bar):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Return date and price for bar.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        date = <span class="predefined">str</span>(<span class="predefined-constant">self</span>.data.index[bar])
        price = <span class="predefined-constant">self</span>.data.price.ix[bar]
        <span class="keyword">return</span> date, price

    <span class="keyword">def</span> <span class="function">place_buy_order</span>(<span class="predefined-constant">self</span>, bar, units=<span class="predefined-constant">None</span>, amount=<span class="predefined-constant">None</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Place a buy order.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        date, price = <span class="predefined-constant">self</span>.get_date_price(bar)
        <span class="keyword">if</span> units <span class="keyword">is</span> <span class="predefined-constant">None</span>:
            units = math.floor(amount / price)
        <span class="predefined-constant">self</span>.amount -= (units * price) * (<span class="integer">1</span> + <span class="predefined-constant">self</span>.ptc) + <span class="predefined-constant">self</span>.ftc
        <span class="predefined-constant">self</span>.units += units
        <span class="predefined-constant">self</span>.trades += <span class="integer">1</span>
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.verbose:
            print(<span class="string"><span class="delimiter">'</span><span class="content">%s | buying  %4d units at %7.2f</span><span class="delimiter">'</span></span> %
                  (date[:<span class="integer">10</span>], units, price))
            <span class="predefined-constant">self</span>.print_balance(date)

    <span class="keyword">def</span> <span class="function">place_sell_order</span>(<span class="predefined-constant">self</span>, bar, units=<span class="predefined-constant">None</span>, amount=<span class="predefined-constant">None</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Place a sell order.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        date, price = <span class="predefined-constant">self</span>.get_date_price(bar)
        <span class="keyword">if</span> units <span class="keyword">is</span> <span class="predefined-constant">None</span>:
            units = math.floor(amount / price)
        <span class="predefined-constant">self</span>.amount += (units * price) * (<span class="integer">1</span> - <span class="predefined-constant">self</span>.ptc) - <span class="predefined-constant">self</span>.ftc
        <span class="predefined-constant">self</span>.units -= units
        <span class="predefined-constant">self</span>.trades += <span class="integer">1</span>
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.verbose:
            print(<span class="string"><span class="delimiter">'</span><span class="content">%s | selling %4d units at %7.2f</span><span class="delimiter">'</span></span> %
                  (date[:<span class="integer">10</span>], units, price))
            <span class="predefined-constant">self</span>.print_balance(date)

    <span class="keyword">def</span> <span class="function">close_out</span>(<span class="predefined-constant">self</span>, bar):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Closing out a long or short position.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        date, price = <span class="predefined-constant">self</span>.get_date_price(bar)
        <span class="predefined-constant">self</span>.amount += <span class="predefined-constant">self</span>.units * price
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.verbose:
            print(<span class="string"><span class="delimiter">'</span><span class="content">%s | inventory %d units at %.2f</span><span class="delimiter">'</span></span> % (date[:<span class="integer">10</span>],
                                                       <span class="predefined-constant">self</span>.units, price))
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.verbose:
            print(<span class="string"><span class="delimiter">'</span><span class="content">=</span><span class="delimiter">'</span></span> * <span class="integer">55</span>)
        print(<span class="string"><span class="delimiter">'</span><span class="content">Final balance   [$] %13.2f</span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.amount)
        print(<span class="string"><span class="delimiter">'</span><span class="content">Net Performance [%%] %13.2f</span><span class="delimiter">'</span></span> % ((<span class="predefined-constant">self</span>.amount - <span class="predefined-constant">self</span>._amount) /
                                               <span class="predefined-constant">self</span>._amount * <span class="integer">100</span>))
        print(<span class="string"><span class="delimiter">'</span><span class="content">=</span><span class="delimiter">'</span></span> * <span class="integer">55</span>)

<span class="keyword">if</span> __name__ == <span class="string"><span class="delimiter">'</span><span class="content">__main__</span><span class="delimiter">'</span></span>:
    bb = BacktestBase(<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, <span class="integer">10000</span>)
    print(bb.data.info())
    print(bb.data.tail())
    bb.plot_data()
    plt.savefig(<span class="string"><span class="delimiter">'</span><span class="content">../images/ch06/backtestbaseplot.pdf</span><span class="delimiter">'</span></span>)</code></pre>
</div>
</div>
</div>
</div>
<div id="py_long_only" class="exampleblock">
<div class="title">Example 13. Module with class for backtesting long only strategies</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Script with Long Only Class</span>
<span class="comment"># for Event-based Backtesting</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">from</span> <span class="include">BacktestBase</span> <span class="keyword">import</span> <span class="include">*</span>


<span class="keyword">class</span> <span class="class">BacktestLongOnly</span>(BacktestBase):

    <span class="keyword">def</span> <span class="function">run_sma_strategy</span>(<span class="predefined-constant">self</span>, SMA1, SMA2):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Backtesting a SMA-based strategy.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters</span><span class="content">
</span><span class="content">        ==========</span><span class="content">
</span><span class="content">        SMA1, SMA2: int</span><span class="content">
</span><span class="content">            shorter and longer term simple moving average (in days)</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        msg = <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="char">\n</span><span class="content">Running SMA strategy | SMA1 = %d &amp; SMA2 = %d</span><span class="delimiter">'</span></span> % (SMA1, SMA2)
        msg += <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="content">fixed costs %.2f | </span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.ftc
        msg += <span class="string"><span class="delimiter">'</span><span class="content">proportional costs %.4f</span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.ptc
        print(msg)
        print(<span class="string"><span class="delimiter">'</span><span class="content">=</span><span class="delimiter">'</span></span> * <span class="integer">55</span>)
        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>  <span class="comment"># initial neutral position</span>
        <span class="predefined-constant">self</span>.amount = <span class="predefined-constant">self</span>._amount  <span class="comment"># reset initial capital</span>
        <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].rolling(SMA1).mean()
        <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].rolling(SMA2).mean()

        <span class="keyword">for</span> bar <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined">len</span>(<span class="predefined-constant">self</span>.data)):
            <span class="keyword">if</span> bar &gt;= SMA2:
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">0</span>:
                    <span class="keyword">if</span> <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>].ix[bar] &gt; <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>].ix[bar]:
                        <span class="predefined-constant">self</span>.place_buy_order(bar, amount=<span class="predefined-constant">self</span>.amount)
                        <span class="predefined-constant">self</span>.position = <span class="integer">1</span>  <span class="comment"># long position</span>
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:
                    <span class="keyword">if</span> <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>].ix[bar] &lt; <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>].ix[bar]:
                        <span class="predefined-constant">self</span>.place_sell_order(bar, units=<span class="predefined-constant">self</span>.units)
                        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>  <span class="comment"># market neutral</span>
        <span class="predefined-constant">self</span>.close_out(bar)

    <span class="keyword">def</span> <span class="function">run_momentum_strategy</span>(<span class="predefined-constant">self</span>, momentum):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Backtesting a momentum-based strategy.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters</span><span class="content">
</span><span class="content">        ==========</span><span class="content">
</span><span class="content">        momentum: int</span><span class="content">
</span><span class="content">            number of days for mean return calculation</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        msg = <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="char">\n</span><span class="content">Running momentum strategy | %d days</span><span class="delimiter">'</span></span> % momentum
        msg += <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="content">fixed costs %.2f | </span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.ftc
        msg += <span class="string"><span class="delimiter">'</span><span class="content">proportional costs %.4f</span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.ptc
        print(msg)
        print(<span class="string"><span class="delimiter">'</span><span class="content">=</span><span class="delimiter">'</span></span> * <span class="integer">55</span>)
        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>  <span class="comment"># initial neutral position</span>
        <span class="predefined-constant">self</span>.amount = <span class="predefined-constant">self</span>._amount  <span class="comment"># reset initial capital</span>

        <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">return</span><span class="delimiter">'</span></span>].rolling(momentum).mean()

        <span class="keyword">for</span> bar <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined">len</span>(<span class="predefined-constant">self</span>.data)):
            <span class="keyword">if</span> bar &gt;= momentum:
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">0</span>:
                    <span class="keyword">if</span> <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>].ix[bar] &gt; <span class="integer">0</span>:
                        <span class="predefined-constant">self</span>.place_buy_order(bar, amount=<span class="predefined-constant">self</span>.amount)
                        <span class="predefined-constant">self</span>.position = <span class="integer">1</span>  <span class="comment"># long position</span>
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:
                    <span class="keyword">if</span> <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>].ix[bar] &lt;= <span class="integer">0</span>:
                        <span class="predefined-constant">self</span>.place_sell_order(bar, units=<span class="predefined-constant">self</span>.units)
                        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>  <span class="comment"># market neutral</span>
        <span class="predefined-constant">self</span>.close_out(bar)

    <span class="keyword">def</span> <span class="function">run_mean_reversion_strategy</span>(<span class="predefined-constant">self</span>, SMA, threshold):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Backtesting a mean reversion-based strategy.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters</span><span class="content">
</span><span class="content">        ==========</span><span class="content">
</span><span class="content">        SMA: int</span><span class="content">
</span><span class="content">            simple moving average in days</span><span class="content">
</span><span class="content">        threshold: float</span><span class="content">
</span><span class="content">            absolute value for deviation-based signal relative to SMA</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        msg = <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="char">\n</span><span class="content">Running mean reversion strategy | SMA %d &amp; thr %d</span><span class="delimiter">'</span></span> \
            % (SMA, threshold)
        msg += <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="content">fixed costs %.2f | </span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.ftc
        msg += <span class="string"><span class="delimiter">'</span><span class="content">proportional costs %.4f</span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.ptc
        print(msg)
        print(<span class="string"><span class="delimiter">'</span><span class="content">=</span><span class="delimiter">'</span></span> * <span class="integer">55</span>)
        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>
        <span class="predefined-constant">self</span>.amount = <span class="predefined-constant">self</span>._amount

        <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].rolling(SMA).mean()

        <span class="keyword">for</span> bar <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined">len</span>(<span class="predefined-constant">self</span>.data)):
            <span class="keyword">if</span> bar &gt;= SMA:
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">0</span>:
                    <span class="keyword">if</span> (<span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].ix[bar] &lt;
                            <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>].ix[bar] - threshold):
                        <span class="predefined-constant">self</span>.place_buy_order(bar, amount=<span class="predefined-constant">self</span>.amount)
                        <span class="predefined-constant">self</span>.position = <span class="integer">1</span>
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:
                    <span class="keyword">if</span> <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].ix[bar] &gt;= <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>].ix[bar]:
                        <span class="predefined-constant">self</span>.place_sell_order(bar, units=<span class="predefined-constant">self</span>.units)
                        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>
        <span class="predefined-constant">self</span>.close_out(bar)


<span class="keyword">if</span> __name__ == <span class="string"><span class="delimiter">'</span><span class="content">__main__</span><span class="delimiter">'</span></span>:
    <span class="keyword">def</span> <span class="function">run_strategies</span>():
        lobt.run_sma_strategy(<span class="integer">42</span>, <span class="integer">252</span>)
        lobt.run_momentum_strategy(<span class="integer">60</span>)
        lobt.run_mean_reversion_strategy(<span class="integer">50</span>, <span class="integer">5</span>)
    lobt = BacktestLongOnly(<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, <span class="integer">10000</span>)
    lobt.verbose = <span class="predefined-constant">True</span>
    run_strategies()
    lobt = BacktestLongOnly(<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                            <span class="integer">10000</span>, <span class="float">10.0</span>, <span class="float">0.005</span>)  <span class="comment"># 10 USD fix, 0.5% variable</span>
    lobt.verbose = <span class="predefined-constant">False</span>
    run_strategies()</code></pre>
</div>
</div>
</div>
</div>
<div id="py_long_short" class="exampleblock">
<div class="title">Example 14. Module with class for backtesting long-short strategies</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Script with Long Short Class</span>
<span class="comment"># for Event-based Backtesting</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">from</span> <span class="include">BacktestBase</span> <span class="keyword">import</span> <span class="include">*</span>


<span class="keyword">class</span> <span class="class">BacktestLongShort</span>(BacktestBase):

    <span class="keyword">def</span> <span class="function">go_long</span>(<span class="predefined-constant">self</span>, bar, units=<span class="predefined-constant">None</span>, amount=<span class="predefined-constant">None</span>):
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == -<span class="integer">1</span>:
            <span class="predefined-constant">self</span>.place_buy_order(bar, units=<span class="predefined-constant">self</span>.units)
        <span class="keyword">if</span> units:
            <span class="predefined-constant">self</span>.place_buy_order(bar, units=units)
        <span class="keyword">elif</span> amount:
            <span class="keyword">if</span> amount == <span class="string"><span class="delimiter">'</span><span class="content">all</span><span class="delimiter">'</span></span>:
                amount = <span class="predefined-constant">self</span>.amount
            <span class="predefined-constant">self</span>.place_buy_order(bar, amount=amount)

    <span class="keyword">def</span> <span class="function">go_short</span>(<span class="predefined-constant">self</span>, bar, units=<span class="predefined-constant">None</span>, amount=<span class="predefined-constant">None</span>):
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:
            <span class="predefined-constant">self</span>.place_sell_order(bar, units=<span class="predefined-constant">self</span>.units)
        <span class="keyword">if</span> units:
            <span class="predefined-constant">self</span>.place_sell_order(bar, units=units)
        <span class="keyword">elif</span> amount:
            <span class="keyword">if</span> amount == <span class="string"><span class="delimiter">'</span><span class="content">all</span><span class="delimiter">'</span></span>:
                amount = <span class="predefined-constant">self</span>.amount
            <span class="predefined-constant">self</span>.place_sell_order(bar, amount=amount)

    <span class="keyword">def</span> <span class="function">run_sma_strategy</span>(<span class="predefined-constant">self</span>, SMA1, SMA2):
        msg = <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="char">\n</span><span class="content">Running SMA strategy | SMA1 = %d &amp; SMA2 = %d</span><span class="delimiter">'</span></span> % (SMA1, SMA2)
        msg += <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="content">Fixed costs %.2f | </span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.ftc
        msg += <span class="string"><span class="delimiter">'</span><span class="content">proportional costs %.4f</span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.ptc
        print(msg)
        print(<span class="string"><span class="delimiter">'</span><span class="content">=</span><span class="delimiter">'</span></span> * <span class="integer">55</span>)
        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>  <span class="comment"># initial neutral position</span>
        <span class="predefined-constant">self</span>.amount = <span class="predefined-constant">self</span>._amount  <span class="comment"># reset initial capital</span>
        <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].rolling(SMA1).mean()
        <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].rolling(SMA2).mean()

        <span class="keyword">for</span> bar <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined">len</span>(<span class="predefined-constant">self</span>.data)):
            <span class="keyword">if</span> bar &gt;= SMA2:
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position <span class="keyword">in</span> [<span class="integer">0</span>, -<span class="integer">1</span>]:
                    <span class="keyword">if</span> <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>].ix[bar] &gt; <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>].ix[bar]:
                        <span class="predefined-constant">self</span>.go_long(bar, amount=<span class="string"><span class="delimiter">'</span><span class="content">all</span><span class="delimiter">'</span></span>)
                        <span class="predefined-constant">self</span>.position = <span class="integer">1</span>  <span class="comment"># long position</span>
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position <span class="keyword">in</span> [<span class="integer">0</span>, <span class="integer">1</span>]:
                    <span class="keyword">if</span> <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>].ix[bar] &lt; <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>].ix[bar]:
                        <span class="predefined-constant">self</span>.go_short(bar, amount=<span class="string"><span class="delimiter">'</span><span class="content">all</span><span class="delimiter">'</span></span>)
                        <span class="predefined-constant">self</span>.position = -<span class="integer">1</span>  <span class="comment"># short position</span>
        <span class="predefined-constant">self</span>.close_out(bar)

    <span class="keyword">def</span> <span class="function">run_momentum_strategy</span>(<span class="predefined-constant">self</span>, momentum):
        msg = <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="char">\n</span><span class="content">Running momentum strategy | %d days</span><span class="delimiter">'</span></span> % momentum
        msg += <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="content">Fixed costs %.2f | </span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.ftc
        msg += <span class="string"><span class="delimiter">'</span><span class="content">proportional costs %.4f</span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.ptc
        print(msg)
        print(<span class="string"><span class="delimiter">'</span><span class="content">=</span><span class="delimiter">'</span></span> * <span class="integer">55</span>)
        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>  <span class="comment"># initial neutral position</span>
        <span class="predefined-constant">self</span>.amount = <span class="predefined-constant">self</span>._amount  <span class="comment"># reset initial capital</span>

        <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">return</span><span class="delimiter">'</span></span>].rolling(momentum).mean()

        <span class="keyword">for</span> bar <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined">len</span>(<span class="predefined-constant">self</span>.data)):
            <span class="keyword">if</span> bar &gt;= momentum:
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position <span class="keyword">in</span> [<span class="integer">0</span>, -<span class="integer">1</span>]:
                    <span class="keyword">if</span> <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>].ix[bar] &gt; <span class="integer">0</span>:
                        <span class="predefined-constant">self</span>.go_long(bar, amount=<span class="string"><span class="delimiter">'</span><span class="content">all</span><span class="delimiter">'</span></span>)
                        <span class="predefined-constant">self</span>.position = <span class="integer">1</span>  <span class="comment"># long position</span>
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position <span class="keyword">in</span> [<span class="integer">0</span>, <span class="integer">1</span>]:
                    <span class="keyword">if</span> <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>].ix[bar] &lt;= <span class="integer">0</span>:
                        <span class="predefined-constant">self</span>.go_short(bar, amount=<span class="string"><span class="delimiter">'</span><span class="content">all</span><span class="delimiter">'</span></span>)
                        <span class="predefined-constant">self</span>.position = -<span class="integer">1</span>  <span class="comment"># long position</span>
        <span class="predefined-constant">self</span>.close_out(bar)

    <span class="keyword">def</span> <span class="function">run_mean_reversion_strategy</span>(<span class="predefined-constant">self</span>, SMA, threshold):
        msg = <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="char">\n</span><span class="content">Running mean reversion strategy | SMA %d &amp; thr %d</span><span class="delimiter">'</span></span> \
            % (SMA, threshold)
        msg += <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="content">Fixed costs %.2f | </span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.ftc
        msg += <span class="string"><span class="delimiter">'</span><span class="content">proportional costs %.4f</span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.ptc
        print(msg)
        print(<span class="string"><span class="delimiter">'</span><span class="content">=</span><span class="delimiter">'</span></span> * <span class="integer">55</span>)
        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>  <span class="comment"># initial neutral position</span>
        <span class="predefined-constant">self</span>.amount = <span class="predefined-constant">self</span>._amount  <span class="comment"># reset initial capital</span>

        <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].rolling(SMA).mean()

        <span class="keyword">for</span> bar <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined">len</span>(<span class="predefined-constant">self</span>.data)):
            <span class="keyword">if</span> bar &gt;= SMA:
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">0</span>:
                    <span class="keyword">if</span> (<span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].ix[bar] &lt;
                            <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>].ix[bar] - threshold):
                        <span class="predefined-constant">self</span>.go_long(bar, amount=<span class="predefined-constant">self</span>._amount)
                        <span class="predefined-constant">self</span>.position = <span class="integer">1</span>
                    <span class="keyword">elif</span> (<span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].ix[bar] &gt;
                            <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>].ix[bar] + threshold):
                        <span class="predefined-constant">self</span>.go_short(bar, amount=<span class="predefined-constant">self</span>._amount)
                        <span class="predefined-constant">self</span>.position = -<span class="integer">1</span>
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:
                    <span class="keyword">if</span> <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].ix[bar] &gt;= <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>].ix[bar]:
                        <span class="predefined-constant">self</span>.place_sell_order(bar, units=<span class="predefined-constant">self</span>.units)
                        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == -<span class="integer">1</span>:
                    <span class="keyword">if</span> <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].ix[bar] &lt;= <span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>].ix[bar]:
                        <span class="predefined-constant">self</span>.place_buy_order(bar, units=-<span class="predefined-constant">self</span>.units)
                        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>
        <span class="predefined-constant">self</span>.close_out(bar)


<span class="keyword">if</span> __name__ == <span class="string"><span class="delimiter">'</span><span class="content">__main__</span><span class="delimiter">'</span></span>:
    <span class="keyword">def</span> <span class="function">run_strategies</span>():
        lobt.run_sma_strategy(<span class="integer">42</span>, <span class="integer">252</span>)
        lobt.run_momentum_strategy(<span class="integer">60</span>)
        lobt.run_mean_reversion_strategy(<span class="integer">50</span>, <span class="integer">5</span>)
    lobt = BacktestLongShort(<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>, <span class="integer">10000</span>)
    lobt.verbose = <span class="predefined-constant">True</span>
    run_strategies()
    lobt = BacktestLongShort(<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2016-10-31</span><span class="delimiter">'</span></span>,
                             <span class="integer">10000</span>, <span class="float">10.0</span>, <span class="float">0.005</span>)  <span class="comment"># 10 USD fix, 0.5% variable</span>
    lobt.verbose = <span class="predefined-constant">False</span>
    run_strategies()</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="realtime_sockets">7. Working with Real-Time Data and Sockets</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph align_me_right">
<p>If you want to find the secrets of the universe, think in terms of energy, frequency and vibration.</p>
</div>
</blockquote>
<div class="attribution">
— Nikola Tesla
</div>
</div>
<div class="sect2">
<h3 id="_introduction_7">7.1. Introduction</h3>
<div class="paragraph">
<p>Developing trading ideas and backtesting them is a rather 
asynchronous and non-critical process during which there are multiple 
steps that might or might not be repeated, during which no capital is at
 stake and during which performance and speed are not the most important
 requirements. Turning to the markets to implement a trading strategy 
changes the rules considerably. Data arrives in real-time and usually in
 massive amounts, making a real-time processing of the data and the 
decision making based on the data a necessity. This chapter is about 
working with real-time data for which <em>sockets</em> are in general the technological tool of choice.</p>
</div>
<div class="paragraph">
<p>In this context, a few words on central technical terms.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">network socket</dt>
<dd>
<p>endpoint of a connection in a computer network; simply <em>socket</em> for short</p>
</dd>
<dt class="hdlist1">socket address</dt>
<dd>
<p>combination of an Internet Protocol (IP) address and a port number</p>
</dd>
<dt class="hdlist1">socket protocol</dt>
<dd>
<p>a protocol defining and handling the socket communication, like the Transfer Control Protocol (TCP)</p>
</dd>
<dt class="hdlist1">socket pair</dt>
<dd>
<p>combination of a local and a remote socket that communicate with each other</p>
</dd>
<dt class="hdlist1">socket API</dt>
<dd>
<p>the application programming interface allowing for the controlling of sockets and their communication</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>This chapter focuses on the use of <a href="http://zeromq.org/" target="_blank">`ZeroMQ</a>
 as a light weight, fast and scalable socket programming library. It is 
available on multiple platforms with wrappers for the most important 
programming languages. ZeroMQ supports different patterns for socket 
communication. One of the most important patterns is the so-called <em>publisher-subscriber</em>
 (PUB-SUB) pattern where a single socket publishes data and multiple 
sockets simultaneously retrieve the data. This is similar to a radio 
station that broadcasts its program that is in turn simultaneously 
received by thousands of people via radio devices.</p>
</div>
<div class="paragraph">
<p>Given the PUB-SUB pattern, a fundamental application scenario in 
algorithmic trading is the retrieval of real-time financial data from an
 exchange, a trading platform or a data service provider. Suppose you 
have developed an intraday trading idea based on the Apple, Inc. stock 
and have backtested it thoroughly. When implementing it, you need to be 
able to receive and process the stock price data in real-time. This fits
 exactly such a PUB-SUB pattern: a central instance broadcasts the new 
tick data as it becomes available and you as well as probably thousands 
of others receive and process it at the same time.<sup class="footnote">[<a id="_footnoteref_26" class="footnote" href="#_footnote_26" title="View footnote.">26</a>]</sup></p>
</div>
<div class="paragraph">
<p>This chapter is organized as follows. <a href="#tick_server">Running a Simple Tick Data Server</a> describes how to implement and run a tick data server for sample financial data. <a href="#tick_client">Connecting a Simple Tick Data Client</a> implements a tick data client to connect to the tick data server. <a href="#signal_generation">Signal Generation in Real-Time</a> shows how to generate trading signals in real-time based on data from the tick data server. Finally, <a href="#stream_plotting">Visualizing Streaming Data with Plotly</a> introduces Plotly as an efficient way to plot streaming data in real-time.</p>
</div>
<div class="paragraph">
<p>The goal of this chapter is to have a tool set and approaches 
available to be able to work with streaming data in the context of 
algorithmic trading.</p>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The code in this chapter makes heavy use of some ports over which 
socket communication takes place. It is recommended to execute the codes
 in this chapter locally and not on a shared infrastructure (like the 
Quant Platform) to avoid conflicts. It is also recommended to execute 
the <code>ZeroMQ</code> examples from the shell and not Jupyter Notebook, for instance.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="tick_server">7.2. Running a Simple Tick Data Server</h3>
<div class="paragraph">
<p>This section shows how to run a simple tick data server based on 
simulated stock prices. The model used for the data generation is the 
geometric Brownian motion (without dividends) for which an exact Euler 
discretization is available as shown in <a href="#euler_disc">Euler discretization of geometric Brownian motion</a>. Here, <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-84"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-85">S</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-13-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-13">S</script> is the stock price, <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-86"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-87">r</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-14-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-14">r</script> the constant short rate, <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-88"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-89">σ</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-15-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-15">\sigma</script> the constant volatility factor and <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-90"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-91">z</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-16-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-16">z</script> a standard normal random variable. <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-92"><span class="MJXp-mi" id="MJXp-Span-93">Δ</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-94">t</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-17-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-17">\Delta t</script> is the interval between two discrete observations of the stock price.</p>
</div>
<div id="euler_disc" class="stemblock">
<div class="title">Euler discretization of geometric Brownian motion</div>
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-95"><span class="MJXp-msubsup" id="MJXp-Span-96"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-97" style="margin-right: 0.05em;">S</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-98" style="vertical-align: -0.4em;">t</span></span><span class="MJXp-mo" id="MJXp-Span-99" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-msubsup" id="MJXp-Span-100"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-101" style="margin-right: 0.05em;">S</span><span class="MJXp-mrow MJXp-script" id="MJXp-Span-102" style="vertical-align: -0.4em;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-103">t</span><span class="MJXp-mo" id="MJXp-Span-104">−</span><span class="MJXp-mi" id="MJXp-Span-105">Δ</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-106">t</span></span></span><span class="MJXp-mo" id="MJXp-Span-107" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mi" id="MJXp-Span-108">exp</span><span class="MJXp-mo" id="MJXp-Span-109" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mrow" id="MJXp-Span-110"><span class="MJXp-mo" id="MJXp-Span-111" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.678em;"><span style="font-size: 3.711em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">(</span></span><span class="MJXp-mrow" id="MJXp-Span-112"><span class="MJXp-mo" id="MJXp-Span-113" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.678em;"><span style="font-size: 3.711em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">(</span></span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-114">r</span><span class="MJXp-mo" id="MJXp-Span-115" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mfrac" id="MJXp-Span-116" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-msubsup" id="MJXp-Span-117"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-118" style="margin-right: 0.05em;">σ</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-119" style="vertical-align: 0.5em;">2</span></span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mn" id="MJXp-Span-120">2</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-121" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.678em;"><span style="font-size: 3.711em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">)</span></span></span><span class="MJXp-mi" id="MJXp-Span-122">Δ</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-123">t</span><span class="MJXp-mo" id="MJXp-Span-124" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-125">σ</span><span class="MJXp-msqrt" id="MJXp-Span-126"><span class="MJXp-surd"><span style="font-size: 134%; margin-top: 0.104em;">√</span></span><span class="MJXp-root"><span class="MJXp-rule" style="border-top: 0.08em solid;"></span><span class="MJXp-box"><span class="MJXp-mi" id="MJXp-Span-127">Δ</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-128">t</span></span></span></span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-129">z</span><span class="MJXp-mo" id="MJXp-Span-130" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.678em;"><span style="font-size: 3.711em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">)</span></span></span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-18-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-18">\begin{equation}
S_t = S_{t - \Delta t} \cdot \exp \left(\left(r - \frac{\sigma^2}{2} \right) \Delta t + \sigma \sqrt{\Delta t} z\right)
\end{equation}</script>
</div>
</div>
<div class="paragraph">
<p>Making use of this model, <a href="#py_tick_server">Script that runs a sample tick data server based on ZeroMQ</a> presents a Python script that implements a tick data server using ZeroMQ and a class — called <code>StockPrice</code> 
— to publish new, simulated tick data in a randomized fashion. The 
publishing is randomized in two ways. First, the stock price value 
itself is based on a Monte Carlo simulation. Second, the length of time 
interval between two publishing events it randomized. The remainder of 
this section explains the major parts of the script in detail.</p>
</div>
<div class="paragraph">
<p>The first part of the script as shown below does some imports, among 
others for the Python wrapper of ZeroMQ. It also instantiates the major 
objects needed to open a socket of <code>PUB</code> type.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="keyword">import</span> <span class="include">zmq</span>  <i class="conum" data-value="1"></i><b>(1)</b>
<span class="keyword">import</span> <span class="include">math</span>
<span class="keyword">import</span> <span class="include">time</span>
<span class="keyword">import</span> <span class="include">random</span>

context = zmq.Context()  <i class="conum" data-value="2"></i><b>(2)</b>
socket = context.socket(zmq.PUB)  <i class="conum" data-value="3"></i><b>(3)</b>
socket.bind(<span class="string"><span class="delimiter">'</span><span class="content">tcp://0.0.0.0:5555</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="4"></i><b>(4)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This imports the Python wrapper for the ZeroMQ library.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>A <code>Context</code> object is instantiated; it is the central object for the socket communication.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The socket itself is defined based on the <code>PUB</code> socket type.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The socket gets bound to the local IP address (<code>0.0.0.0</code> on Linux and Mac OS, <code>127.0.0.1</code> on Windows) and the port number 5555.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The class <code>StockPrice</code> is for the simulation of stock 
price values over time. As attributes there are the major parameters for
 the geometric Brownian motion in addition to the stock symbol and the 
time at which an instance is created. The only method <code>simulate_value</code> generates new values for the stock price given the time passed since it has been called the last time and a random factor.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="keyword">class</span> <span class="class">StockPrice</span>(<span class="predefined">object</span>):
    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>):
        <span class="predefined-constant">self</span>.symbol = <span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>
        <span class="predefined-constant">self</span>.t = time.time()  <i class="conum" data-value="1"></i><b>(1)</b>
        <span class="predefined-constant">self</span>.value = <span class="float">100.</span>
        <span class="predefined-constant">self</span>.sigma = <span class="float">0.4</span>
        <span class="predefined-constant">self</span>.r = <span class="float">0.05</span>

    <span class="keyword">def</span> <span class="function">simulate_value</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Generates a new, random stock price.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        t = time.time()  <i class="conum" data-value="2"></i><b>(2)</b>
        dt = (t - <span class="predefined-constant">self</span>.t) / (<span class="integer">252</span> * <span class="integer">8</span> * <span class="integer">60</span> * <span class="integer">60</span>)  <i class="conum" data-value="3"></i><b>(3)</b>
        dt *= <span class="integer">100</span>  <i class="conum" data-value="4"></i><b>(4)</b>
        <span class="predefined-constant">self</span>.t = t  <i class="conum" data-value="5"></i><b>(5)</b>
        <span class="predefined-constant">self</span>.value *= math.exp((<span class="predefined-constant">self</span>.r - <span class="float">0.5</span> * <span class="predefined-constant">self</span>.sigma ** <span class="integer">2</span>) * dt +
                        <span class="predefined-constant">self</span>.sigma * math.sqrt(dt) * random.gauss(<span class="integer">0</span>, <span class="integer">1</span>))  <i class="conum" data-value="6"></i><b>(6)</b>
        <span class="keyword">return</span> <span class="predefined-constant">self</span>.value</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The attribute <code>t</code> stores the time of the initialization.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>When the <code>new_value</code> method is called, the current time is recorded.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td><code>dt</code> represent the time interval between the current time and the one stored in <code>self.t</code> in (trading) year fractions.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>To have larger stock price movements, this line of code scales the <code>dt</code> variable (by an arbitrary factor).</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The attribute <code>t</code> is updated with the current time which represents the reference point for the next call of the method.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Based on an Euler scheme for the geometric Brownian motion, a new stock price value is simulated.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The main part of the script consists of the instantiation of an object of type <code>StockPrice</code> and an infinite <code>while</code> loop. During the <code>while</code>
 loop, a new stock price value gets simulated, a message is created and 
then printed as well as sent via the socket. Finally, the execution 
pauses for a random amount of time.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">sp = StockPrice()  <i class="conum" data-value="1"></i><b>(1)</b>

<span class="keyword">while</span> <span class="predefined-constant">True</span>:  <i class="conum" data-value="2"></i><b>(2)</b>
    msg = <span class="string"><span class="delimiter">'</span><span class="content">%s %s</span><span class="delimiter">'</span></span> % (sp.symbol, sp.simulate_value())  <i class="conum" data-value="3"></i><b>(3)</b>
    print(msg)  <i class="conum" data-value="4"></i><b>(4)</b>
    socket.send_string(msg)  <i class="conum" data-value="5"></i><b>(5)</b>
    time.sleep(random.random())  <i class="conum" data-value="6"></i><b>(6)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This line instantiates a <code>StockPrice</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>An infinite <code>while</code> loop is started.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The message text gets generated based on the <code>symbol</code> attribute and a newly simulated stock price value.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The message string is printed to the standard out.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>It is also sent to subscribed sockets.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The execution of the loop is paused for a random amount of time, simulating the random arrival of new tick data in the markets.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Executing the script prints out messages as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>macbookpro:~/code$ python TickServer.py
AAPL 100.000111617
AAPL 99.9859003457
AAPL 99.9085597232
AAPL 99.8705830529
AAPL 99.8755485222
AAPL 99.9104977166
AAPL 99.890744253
AAPL 99.84758917
AAPL 99.9482823449
AAPL 100.132108657
AAPL 100.103888647
AAPL 100.242341893
AAPL 100.147029469
AAPL 100.13037628
AAPL 100.252752366
AAPL 100.234990127</pre>
</div>
</div>
<div class="paragraph">
<p>At this point, it cannot yet be verified whether the script is also sending the same message via the socket bound to <code>tcp://0.0.0.0:5555</code> (<code>tcp://127.0.0.1:5555</code> on Windows). To this end, another socket subscribing to the publishing socket is needed to complete the socket pair.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Often, Monte Carlo simulations of prices for financial instruments 
rely on homogeneous time intervals (like “one trading day”). In many 
cases, this is a “good enough” approximation when working with, say, 
end-of-day closing prices over longer horizons. In the context of 
intraday tick data, the random arrival of the data is an important 
characteristic that needs to be taken into account. The Python script 
for the tick data server implements the random arrival times by 
randomized time intervals during which it pauses the execution.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="tick_client">7.3. Connecting a Simple Tick Data Client</h3>
<div class="paragraph">
<p>The code for the tick data server is already quite concise, with the <code>StockPrice</code> simulation class representing the biggest part. The code for a respective tick data client as shown in <a href="#py_tick_client">Script that runs a sample tick data client based on ZeroMQ</a> is even more concise. It is only a few lines of code that instantiate the main <code>Context</code> object, connect to the publishing socket and subscribe to the <code>AAPL</code> channel — which happens to be the only available channel here. In the <code>while</code> loop, the string-based message is received and printed. That makes for a rather short script.</p>
</div>
<div class="paragraph">
<p>The initial part of the script as shown below is almost symmetric to the tick data server script.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="keyword">import</span> <span class="include">zmq</span>  <i class="conum" data-value="1"></i><b>(1)</b>

context = zmq.Context()  <i class="conum" data-value="2"></i><b>(2)</b>
socket = context.socket(zmq.SUB)  <i class="conum" data-value="3"></i><b>(3)</b>
socket.connect(<span class="string"><span class="delimiter">'</span><span class="content">tcp://0.0.0.0:5555</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="4"></i><b>(4)</b>
socket.setsockopt_string(zmq.SUBSCRIBE, <span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="5"></i><b>(5)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This imports the Python wrapper for the ZeroMQ library.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>For the client, the main object also is an instance of <code>zmq.Context</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>From here, the code is different; the socket type is set to <code>SUB</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>This socket <em>connects</em> to the respective IP address and port combination.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>This line of code defines the so-called channel to which the socket 
subscribes; here, there is only one but a specification is nevertheless 
needed; in real world applications, however, you might receive data for a
 multitude of different symbols via a socket connection.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The <code>while</code> loop boils down to the retrieval of the messages sent by the server socket and printing them out.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="keyword">while</span> <span class="predefined-constant">True</span>:  <i class="conum" data-value="1"></i><b>(1)</b>
    data = socket.recv_string()  <i class="conum" data-value="2"></i><b>(2)</b>
    print(data)  <i class="conum" data-value="3"></i><b>(3)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This socket receives data in an infinite loop.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>This is the main line of code where the data (string-based message) is received.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td><code>data</code> is printed to <code>stdout</code>.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The output of the Python script for the socket client is exactly the 
same as the one from the Python script for the socket server:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>macbookpro:~/code$ python TickClient.py
AAPL 100.000111617
AAPL 99.9859003457
AAPL 99.9085597232
AAPL 99.8705830529
AAPL 99.8755485222
AAPL 99.9104977166
AAPL 99.890744253
AAPL 99.84758917
AAPL 99.9482823449
AAPL 100.132108657
AAPL 100.103888647
AAPL 100.242341893
AAPL 100.147029469
AAPL 100.13037628
AAPL 100.252752366
AAPL 100.234990127</pre>
</div>
</div>
<div class="paragraph">
<p>Retrieving data in the form of string-based messages via socket 
communication is only a prerequisite for the very tasks to be 
accomplished based on the data, like generating trading signals in 
real-time or visualizing the data. This is what the two subsequent 
section cover.</p>
</div>
</div>
<div class="sect2">
<h3 id="signal_generation">7.4. Signal Generation in Real-Time</h3>
<div class="paragraph">
<p>An <em>online algorithm</em> is an algorithm based on data that is 
received piece by piece over time. Such an algorithm only knows the 
current states of relevant variables and parameters and nothing about 
the future. This is a realistic setting for financial trading algorithms
 for which any element of (perfect) foresight is to be excluded. By 
contrast, an <em>offline algorithm</em> knows the complete data set from
 the beginning. Many algorithms in computer science fall into the 
category of offline algorithms like, for example, a sorting algorithm 
over a list of numbers.</p>
</div>
<div class="paragraph">
<p>To generate signals in real-time on the basis of an online algorithm,
 data needs to be collected and processed over time. Consider, for 
example, a trading strategy based on the momentum of the last three five
 second intervals. Tick data needs to be collected, resampled and the 
momentum needs to be calculated based on the resampled data set. When 
time passes by, a continuous, incremental updating takes place.</p>
</div>
<div class="paragraph">
<p><a href="#py_online_algorithm">Script that implements a momentum-based trading strategy as an online algorithm</a>
 presents a Python script that implements the momentum strategy as 
described before as an online algorithm. Technically, there are two 
major parts in addition to handling the socket communication. First, the
 retrieval and storage of the tick data:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">df = pd.DataFrame()  <i class="conum" data-value="1"></i><b>(1)</b>

<span class="keyword">while</span> <span class="predefined-constant">True</span>:
    data = socket.recv_string()  <i class="conum" data-value="2"></i><b>(2)</b>
    t = datetime.datetime.now()  <i class="conum" data-value="3"></i><b>(3)</b>
    sym, value = data.split()  <i class="conum" data-value="4"></i><b>(4)</b>
    df = df.append(pd.DataFrame({sym: <span class="predefined">float</span>(value)}, index=[t]))  <i class="conum" data-value="5"></i><b>(5)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This instantiates an empty <code>pandas</code> <code>DataFrame</code> to collect the tick data.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The retrieval of the tick data via the socket connection.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>A timestamp is generated for the data retrieval.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The string-based message is split into the symbol and the numerical value (still a <code>str</code> object here).</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>This line of code first generates a temporary <code>DataFrame</code> object with the new data and then appends it to the existing <code>DataFrame</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Second, the resampling and processing of the data as shown below. 
This happens based on the tick data collected up to a certain point in 
time. During this step, log returns are calculated based on the 
resampled data and the momentum and therewith the positioning are 
derived base on the resampled data.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    dr = df.resample(<span class="string"><span class="delimiter">'</span><span class="content">5s</span><span class="delimiter">'</span></span>).last()  <i class="conum" data-value="1"></i><b>(1)</b>
    dr[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(dr / dr.shift(<span class="integer">1</span>))  <i class="conum" data-value="2"></i><b>(2)</b>
    dr[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>] = np.sign(dr[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].rolling(<span class="integer">3</span>).mean())  <i class="conum" data-value="3"></i><b>(3)</b>
    print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="delimiter">'</span></span> + <span class="string"><span class="delimiter">'</span><span class="content">=</span><span class="delimiter">'</span></span> * <span class="integer">51</span>)
    print(dr.tail())  <i class="conum" data-value="4"></i><b>(4)</b>
    <span class="keyword">if</span> dr[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>] == <span class="float">1.0</span>:  <i class="conum" data-value="5"></i><b>(5)</b>
        print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="content">Long market position.</span><span class="delimiter">'</span></span>)
        <span class="comment"># take some action (e.g. place buy order)</span>
    <span class="keyword">elif</span> dr[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>] == -<span class="float">1.0</span>:  <i class="conum" data-value="6"></i><b>(6)</b>
        print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="content">Short market position.</span><span class="delimiter">'</span></span>)
        <span class="comment"># take some action (e.g. place sell order)</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The tick data is resampled to a five second interval, taking the last available tick value as the relevant one.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>This calculates the log returns over the five second intervals.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The momentum and therewith also the positioning is derived based on the log returns from three resampled time intervals.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>This prints the final five rows of the resampled <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>A momentum value of 1.0 means a long market position; in production,
 the first signal or a change in the signal then triggers certain 
actions, like the buying of stock.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Similarly, a momentum value of -1.0 implies a short market position and potentially certain actions that might be triggered.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>When the script is executed, it takes some time — depending on the 
very parameters chosen — until there is enough (resampled) data 
available to generate the first signal. Here an intermediate example 
output of the online trading algorithm script.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>===================================================
                           AAPL   returns  momentum
2016-12-07 08:22:20  105.361283       NaN       NaN
2016-12-07 08:22:25  104.780780 -0.005525       NaN
2016-12-07 08:22:30  105.031435  0.002389       NaN
2016-12-07 08:22:35  104.155793 -0.008372      -1.0
2016-12-07 08:22:40  104.420872  0.002542      -1.0

Short market position.

===================================================
                           AAPL   returns  momentum
2016-12-07 08:22:25  104.780780 -0.005525       NaN
2016-12-07 08:22:30  105.031435  0.002389       NaN
2016-12-07 08:22:35  104.155793 -0.008372      -1.0
2016-12-07 08:22:40  104.420872  0.002542      -1.0
2016-12-07 08:22:45  104.489068  0.000653      -1.0

Short market position.

===================================================
                           AAPL   returns  momentum
2016-12-07 08:22:25  104.780780 -0.005525       NaN
2016-12-07 08:22:30  105.031435  0.002389       NaN
2016-12-07 08:22:35  104.155793 -0.008372      -1.0
2016-12-07 08:22:40  104.420872  0.002542      -1.0
2016-12-07 08:22:45  104.596518  0.001681      -1.0

Short market position.</pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>It is a good exercise to implement, based on the presented tick 
client script, both an SMA-based strategy as well as a mean-reversion 
strategy as an online algorithm.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="stream_plotting">7.5. Visualizing Streaming Data with Plotly</h3>
<div class="paragraph">
<p>The visualization of streaming data in real-time is a demanding task.
 Fortunately, there are quite a few technologies and Python packages 
available nowadays that significantly simplify such a task. In what 
follows, we will work with <a href="http://plot.ly/" target="_blank">Plotly</a>
 which is both a technology as well as a service to generate nice 
looking, interactive plots — for static as well as for streaming data. 
To follow along, a Plotly account is needed which is free and fast to 
set up. Make sure to also generate streaming API tokens in the 
respective area (in your account go to <code>Settings</code> and then to <code>API KEYS</code>).</p>
</div>
<div class="sect3">
<h4 id="config_pyalgo">7.5.1. configparser Module</h4>
<div class="paragraph">
<p>From here on, the <a href="https://docs.python.org/3/library/configparser.html" target="_blank"><code>configparser</code></a>
 module is used to manage account data. The module expects a text file 
in the following format for the use with a Plotly account:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>[plotly]
user_name = YOUR_USER_NAME
api_key = YOUR_API_KEY
api_tokens = YOUR_API_TOKEN_1,YOUR_API_TOKEN_2,YOUR_API_TOKEN_3</pre>
</div>
</div>
<div class="paragraph">
<p>You need to replace the placeholders with your account information. 
Additional accounts-related data will be added in later chapters. Note 
that the <code>configparser</code> module interprets all information as a <code>str</code> object such that conversions might be necessary. You should store the file under the name <code>pyalgo.cfg</code>.</p>
</div>
<div class="paragraph">
<p>Working with <code>configparser</code> is straightforward. The main <code>ConfigParser</code> object behaves like a dictionary. Note also the transformation of the <code>api_tokens</code> value from a <code>str</code> object to a <code>list</code> object of <code>str</code> objects.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">configparser</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: config = configparser.ConfigParser()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: config.read(<span class="string"><span class="delimiter">'</span><span class="content">pyalgo.cfg</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">3</span>]: [<span class="string"><span class="delimiter">'</span><span class="content">pyalgo.cfg</span><span class="delimiter">'</span></span>]

In [<span class="integer">4</span>]: config.sections()  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">4</span>]: [<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>]

In [<span class="integer">5</span>]: config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">5</span>]: &lt;Section: plotly&gt;

In [<span class="integer">6</span>]: config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">user_name</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">6</span>]: <span class="string"><span class="delimiter">'</span><span class="content">yves</span><span class="delimiter">'</span></span>

In [<span class="integer">7</span>]: config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">api_key</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="7"></i><b>(7)</b>
Out[<span class="integer">7</span>]: <span class="string"><span class="delimiter">'</span><span class="content">vwxyz45678</span><span class="delimiter">'</span></span>

In [<span class="integer">8</span>]: api_tokens = <span class="predefined">list</span>(config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">api_tokens</span><span class="delimiter">'</span></span>].split(<span class="string"><span class="delimiter">'</span><span class="content">,</span><span class="delimiter">'</span></span>))  <i class="conum" data-value="8"></i><b>(8)</b>

In [<span class="integer">9</span>]: api_tokens  <i class="conum" data-value="9"></i><b>(9)</b>
Out[<span class="integer">9</span>]: [<span class="string"><span class="delimiter">'</span><span class="content">vwxyz45679</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">vwxyz45670</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">vwxyz45671</span><span class="delimiter">'</span></span>]

In [<span class="integer">10</span>]: api_tokens[<span class="integer">0</span>]  <i class="conum" data-value="10"></i><b>(10)</b>
Out[<span class="integer">10</span>]: <span class="string"><span class="delimiter">'</span><span class="content">vwxyz45679</span><span class="delimiter">'</span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the <code>configparser</code> module.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Instantiates the main <code>ConfigParser</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Reads the content from the configuration file.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Prints out the section headers of the file (currently only one).</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Selects the <code>plotly</code> section.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Selects the <code>user_name</code> from the <code>plotly</code> section.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Selects the <code>api_key</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Transforms the string with the API tokens to a <code>list</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>Prints out the API token <code>list</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>Accesses the first API token.</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The upside of using the <code>configparser</code> module is that it 
simplifies the storage and management of accounts-related data. In 
algorithmic trading, the number of accounts needed can quickly grow. 
Examples are: cloud instance or server, data service provider, online 
trading platform, plotting platform, etc.</p>
</div>
<div class="paragraph">
<p>The downside is that the account information is stored in the form of
 plain text which represents a huge security risk, in particular, since 
the information about multiple accounts is stored in a single file.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_the_basics">7.5.2. The Basics</h4>
<div class="paragraph">
<p><a href="#py_plotly_stream">Script that plots streaming tick data with Plotly in real-time</a>
 shows a Python script that plots the tick data from the server socket 
in real-time with Plotly. In the initial part of the script shown below,
 several imports are done as well as the configuration for the Plotly 
account.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="keyword">import</span> <span class="include">zmq</span>
<span class="keyword">import</span> <span class="include">datetime</span>
<span class="keyword">import</span> <span class="include">plotly.plotly</span> <span class="keyword">as</span> ply  <i class="conum" data-value="1"></i><b>(1)</b>
<span class="keyword">from</span> <span class="include">plotly.graph_objs</span> <span class="keyword">import</span> <span class="include">*</span>  <i class="conum" data-value="2"></i><b>(2)</b>
<span class="keyword">import</span> <span class="include">configparser</span>  <i class="conum" data-value="3"></i><b>(3)</b>

<span class="comment"># configuration</span>
config = configparser.ConfigParser()  <i class="conum" data-value="4"></i><b>(4)</b>
config.read(<span class="string"><span class="delimiter">'</span><span class="content">../pyalgo.cfg</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="5"></i><b>(5)</b>
ply.sign_in(config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">user_name</span><span class="delimiter">'</span></span>], config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">api_key</span><span class="delimiter">'</span></span>])  <i class="conum" data-value="6"></i><b>(6)</b>
api_tokens = <span class="predefined">list</span>(config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">api_tokens</span><span class="delimiter">'</span></span>].split(<span class="string"><span class="delimiter">'</span><span class="content">,</span><span class="delimiter">'</span></span>))  <i class="conum" data-value="7"></i><b>(7)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This imports the Python wrapper for Plotly.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>In addition, this imports major plotting objects needed for the streaming plot.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The scripts make use of the <code>configparser</code> module as introduced above.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The major <code>configparser</code> object is instantiated.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>This reads the account data from the configuration file.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Here, the login to the Plotly account takes place.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>This reads the streaming API tokens from the configuration file.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>That part of the script that connects to the tick data server socket is the same as before:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment"># socket connection</span>
context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.connect(<span class="string"><span class="delimiter">'</span><span class="content">tcp://0.0.0.0:5555</span><span class="delimiter">'</span></span>)
socket.setsockopt_string(zmq.SUBSCRIBE, <span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>)</code></pre>
</div>
</div>
<div class="paragraph">
<p>To plot the streaming tick data with Plotly, a number of objects need
 to be created as the code that follows illustrates. Based on these 
objects, the plotting is initialized and a streaming connection is 
established. This provides the infrastructure to send incoming data as 
it arrives.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment"># plotly preparation</span>
stream = Stream(maxpoints=<span class="integer">100</span>, token=api_tokens[<span class="integer">0</span>])  <i class="conum" data-value="1"></i><b>(1)</b>
trace = Scatter(x=[], y=[], name=<span class="string"><span class="delimiter">'</span><span class="content">tick data</span><span class="delimiter">'</span></span>,
                mode=<span class="string"><span class="delimiter">'</span><span class="content">lines+markers</span><span class="delimiter">'</span></span>, stream=stream)  <i class="conum" data-value="2"></i><b>(2)</b>
data = Data([trace])  <i class="conum" data-value="3"></i><b>(3)</b>
layout = Layout(title=<span class="string"><span class="delimiter">'</span><span class="content">Apple stock price</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="4"></i><b>(4)</b>
fig = Figure(data=data, layout=layout)  <i class="conum" data-value="5"></i><b>(5)</b>
ply.plot(fig, filename=<span class="string"><span class="delimiter">'</span><span class="content">stream_plot</span><span class="delimiter">'</span></span>, auto_open=<span class="predefined-constant">True</span>)  <i class="conum" data-value="6"></i><b>(6)</b>

s0 = ply.Stream(api_tokens[<span class="integer">0</span>])  <i class="conum" data-value="7"></i><b>(7)</b>
s0.open()  <i class="conum" data-value="8"></i><b>(8)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The <code>Stream</code> object is instantiated that contains the streaming data.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The data is to be plotted as a <code>Scatter</code> object with lines and markers used to visualize the data; during instantiation, there is no data yet — only the <code>Stream</code> object is provided as a parameter to function as the data source later on.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The <code>Data</code> object only contains the single <code>Scatter</code> object; more are possible.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Layout-wise, only the plot title is set; many more options are available.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The final object is the <code>Figure</code> object itself that takes as input the <code>Data</code> and <code>Layout</code> objects.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>This in turn is passed to the <code>plot</code> function to which also a filename is provided; setting <code>auto_open=True</code> makes sure that a browser is opened that shows the streaming plot on the Plotly platform.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>This sets up the streaming connection via which the data is transmitted …​</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>…​ and opens it.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The preparation is what makes up most of the Python script. The main <code>while</code> loop itself — see below — is really concise and mainly needs to take care of the transmission of the new data via the opened <code>ply.Stream</code> object. Under the hood, the communication with the Plotly server is also accomplished via socket connections.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="keyword">while</span> <span class="predefined-constant">True</span>:
    data = socket.recv_string()
    t = datetime.datetime.now()
    print(data)
    sym, value = data.split()
    s0.write({<span class="string"><span class="delimiter">'</span><span class="content">x</span><span class="delimiter">'</span></span>: t, <span class="string"><span class="delimiter">'</span><span class="content">y</span><span class="delimiter">'</span></span>: <span class="predefined">float</span>(value)})  <i class="conum" data-value="1"></i><b>(1)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This line of code writes the timestamp (<code>datetime</code>) object as the <code>x</code> value and the stock price converted to a <code>float</code> object as the <code>y</code> value to the <code>ply.Stream</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Running the script generates a plot as shown in <a href="#plotly_1">Plot of streaming data as retrieved in real-time via socket connection.</a>. Of course, the dynamic, moving nature of the plot cannot be illustrated on the basis of a static snapshot.</p>
</div>
<div id="plotly_1" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/stream_plot.png" alt="stream plot">
</div>
<div class="title">Figure 43. Plot of streaming data as retrieved in real-time via socket connection.</div>
</div>
<div class="paragraph">
<p>Now, that the basics are clear, it is straightforward to add more real-time streams to the mix. The Python script in <a href="#py_plotly_trend">Script that calculates two SMAs based on tick data retrieved and plots the tick data alongside the two SMAs in real-time</a> is an enhancement of the one in <a href="#py_plotly_stream">Script that plots streaming tick data with Plotly in real-time</a> in that it collects the tick data in a <code>pandas</code> <code>DataFrame</code>
 object, calculates two simple moving averages (SMAs) for rolling 
windows of five and ten ticks, respectively, and plots the three streams
 in real-time. <a href="#plotly_2">Plot of streaming tick data and two SMAs calculated in real-time.</a> shows a snapshot of the resulting plot.</p>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Again, it is a good exercise to combine the plotting of streaming 
tick data and two SMAs with the implementation of an online trading 
algorithm based on the two SMAs. In this case, resampling should be 
added to the implementation since such trading algorithms hardly ever 
are based on tick data but rather on bars of fixed length (five seconds,
 one minute, etc.).</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div id="plotly_2" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/trend_plot.png" alt="trend plot">
</div>
<div class="title">Figure 44. Plot of streaming tick data and two SMAs calculated in real-time.</div>
</div>
</div>
<div class="sect3">
<h4 id="_a_wrapper_class">7.5.3. A Wrapper Class</h4>
<div class="paragraph">
<p>Although the Plotly API significantly simplifies the generation of 
streaming plots it is nevertheless still a somewhat involved 
process — in particular, when trying to go beyond the basics. Therefore,
 <a href="#py_plotly_class">Module with wrapper class for the Plotly streaming plot API</a> presents a Python module with a major wrapper class for the Plotly streaming API called <code>plotly_stream</code>
 and a few helper classes. The goal of such a wrapper class is to make 
the quant’s and algorithmic trader’s live even easier when visualizing 
streaming data. This section illustrates the basic usage of the classes 
and shows that even dashboard like plots with multiple real-time streams
 can be efficiently generated.</p>
</div>
<div class="paragraph">
<p>To begin with, some imports:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">PlotlyClass</span> <span class="keyword">as</span> plst

In [<span class="integer">2</span>]: <span class="keyword">import</span> <span class="include">plotly.tools</span> <span class="keyword">as</span> plyt

In [<span class="integer">3</span>]: <span class="keyword">import</span> <span class="include">plotly.plotly</span> <span class="keyword">as</span> ply</code></pre>
</div>
</div>
<div class="paragraph">
<p>The example uses the same ZeroMQ-based tick data server as before. In
 a simple case like this, four lines of code suffice to instantiate the 
main object, define the socket-based data source, add a trace object and
 start the streaming. <a href="#plotly_3">Simple streaming plot generated with Plotly streaming wrapper class.</a> shows the resulting plot from the code below which is pretty much the same in terms of style as <a href="#plotly_1">Plot of streaming data as retrieved in real-time via socket connection.</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">4</span>]: plot = plst.plotly_stream(<span class="string"><span class="delimiter">'</span><span class="content">A first streaming plot</span><span class="delimiter">'</span></span>)

In [<span class="integer">5</span>]: sock = plot.add_data_source(<span class="string"><span class="delimiter">'</span><span class="content">0.0.0.0</span><span class="delimiter">'</span></span>, <span class="integer">5555</span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">6</span>]: plot.add_trace(<span class="string"><span class="delimiter">'</span><span class="content">scatter</span><span class="delimiter">'</span></span>, sock, <span class="string"><span class="delimiter">'</span><span class="content">Tick data raw</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">7</span>]: plot.start_streaming()  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">7</span>]: This <span class="keyword">is</span> the format of your plot grid:
        [ (<span class="integer">1</span>,<span class="integer">1</span>) x1,y1 ]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This defines the data source to be used; here the ZeroMQ tick data server running locally.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>A trace of type <code>scatter</code> is added based on the tick data server.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>This starts the streaming of data to the plotting object and by 
default opens the browser with the streaming plot displayed on the 
Plotly platform.</td>
</tr>
</tbody></table>
</div>
<div id="plotly_3" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/plotly_class_01.png" alt="plotly class 01">
</div>
<div class="title">Figure 45. Simple streaming plot generated with Plotly streaming wrapper class.</div>
</div>
<div class="paragraph">
<p>More sophisticated plots are also straightforward to generate by 
using the wrapper class. The next example generates two sub-plots and 
customizes the layout to some extent. It also introduces custom callback
 functions which allow the customized parsing of streaming data sources.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">8</span>]: plot = plst.plotly_stream(<span class="string"><span class="delimiter">'</span><span class="content">Two subplots</span><span class="delimiter">'</span></span>, subplot_rows=<span class="integer">1</span>,
                                                  subplot_columns=<span class="integer">2</span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">9</span>]: plot.add_trace(<span class="string"><span class="delimiter">'</span><span class="content">scatter</span><span class="delimiter">'</span></span>, sock, <span class="string"><span class="delimiter">'</span><span class="content">Tick data raw</span><span class="delimiter">'</span></span>, row=<span class="integer">1</span>, col=<span class="integer">1</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">10</span>]: <span class="keyword">import</span> <span class="include">datetime</span>

In [<span class="integer">11</span>]: <span class="keyword">def</span> <span class="function">scaled_values</span>(msg):
            <span class="comment"># input has to be of form 'symbol value'</span>
            parts = msg.split()
            t = datetime.datetime.now()
            y = <span class="integer">100</span> - <span class="float">0.5</span> * <span class="predefined">float</span>(parts[<span class="integer">1</span>])  <i class="conum" data-value="3"></i><b>(3)</b>
            <span class="keyword">return</span> t, y

In [<span class="integer">12</span>]: plot.add_trace(<span class="string"><span class="delimiter">'</span><span class="content">scatter</span><span class="delimiter">'</span></span>, sock, <span class="string"><span class="delimiter">'</span><span class="content">Tick data scaled</span><span class="delimiter">'</span></span>, <span class="integer">1</span>, <span class="integer">2</span>,
                       scaled_values)  <i class="conum" data-value="4"></i><b>(4)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>A shape for the plot is defined via the parameters <code>subplot_rows</code> and <code>subplot_columns</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The first trace object is the same as in the initial example; positional arguments are also given.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>This is a simple, arbitrary manipulation of the raw data.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The callback function <code>scaled_values</code> is passed as an additional argument; it defines how the data is parsed when retrieved from the socket connection.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>To illustrate the customization capabilities, sub-plot titles are set and the plot size is defined. <a href="#plotly_4">Streaming plot with two sub-plots generated with Plotly streaming wrapper class.</a> shows the plot resulting from the code above and below which comprises two sub-plots.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">13</span>]: plot.set_subplot_title(<span class="integer">1</span>, <span class="integer">1</span>, <span class="string"><span class="delimiter">'</span><span class="content">Tick data raw</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">14</span>]: plot.set_subplot_title(<span class="integer">1</span>, <span class="integer">2</span>, <span class="string"><span class="delimiter">'</span><span class="content">Tick data scaled</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">15</span>]: plot.add_layout(<span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>, {<span class="string"><span class="delimiter">'</span><span class="content">height</span><span class="delimiter">'</span></span>:<span class="integer">1000</span>, <span class="string"><span class="delimiter">'</span><span class="content">width</span><span class="delimiter">'</span></span>:<span class="integer">600</span>})  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">16</span>]: plot.start_streaming()  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">16</span>]: This <span class="keyword">is</span> the format of your plot grid:
         [ (<span class="integer">1</span>,<span class="integer">1</span>) x1,y1 ]  [ (<span class="integer">1</span>,<span class="integer">2</span>) x2,y2 ]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Sets the title for sub-plot 1.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Sets the title for sub-plot 2.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Defines the size of the plot.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Starts the streaming of the data and the plotting.</td>
</tr>
</tbody></table>
</div>
<div id="plotly_4" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/plotly_class_02.png" alt="plotly class 02">
</div>
<div class="title">Figure 46. Streaming plot with two sub-plots generated with Plotly streaming wrapper class.</div>
</div>
<div class="paragraph">
<p>The final example for Plotly streaming scatter plots creates a dashboard-like plot — see <a href="#plotly_5">Streaming plot with three sub-plots generated with Plotly streaming wrapper class.</a> — comprising <em>four data streams in three sub-plots</em>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">14</span>]: plot = plst.plotly_stream(<span class="string"><span class="delimiter">'</span><span class="content">Streaming several traces in one plot</span><span class="delimiter">'</span></span>,
                                   subplot_rows=<span class="integer">2</span>, subplot_columns=<span class="integer">2</span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">15</span>]: sock1 = plot.add_data_source(<span class="string"><span class="delimiter">'</span><span class="content">0.0.0.0</span><span class="delimiter">'</span></span>, <span class="integer">5555</span>)

In [<span class="integer">16</span>]: sock2 = plot.add_data_source(<span class="string"><span class="delimiter">'</span><span class="content">0.0.0.0</span><span class="delimiter">'</span></span>, <span class="integer">5555</span>)

In [<span class="integer">17</span>]: plot.add_trace(<span class="string"><span class="delimiter">'</span><span class="content">scatter</span><span class="delimiter">'</span></span>, sock1, <span class="string"><span class="delimiter">'</span><span class="content">Tick data raw</span><span class="delimiter">'</span></span>, row=<span class="integer">1</span>, col=<span class="integer">1</span>)

In [<span class="integer">18</span>]: plot.add_trace(<span class="string"><span class="delimiter">'</span><span class="content">scatter</span><span class="delimiter">'</span></span>, sock2, <span class="string"><span class="delimiter">'</span><span class="content">Tick data scaled 1</span><span class="delimiter">'</span></span>, <span class="integer">1</span>, <span class="integer">2</span>,
                        scaled_values)

In [<span class="integer">19</span>]: plot.set_subplot_title(<span class="integer">1</span>, <span class="integer">1</span>, <span class="string"><span class="delimiter">'</span><span class="content">Tick data raw</span><span class="delimiter">'</span></span>)

In [<span class="integer">20</span>]: plot.set_subplot_title(<span class="integer">1</span>, <span class="integer">2</span>, <span class="string"><span class="delimiter">'</span><span class="content">Tick data scaled 1</span><span class="delimiter">'</span></span>)

In [<span class="integer">21</span>]: <span class="keyword">def</span> <span class="function">simple_change</span>(msg):
            <span class="comment"># input has to be of form 'symbol value'</span>
            parts = msg.split()
            t = datetime.datetime.now()
            y = <span class="float">2.5</span> + <span class="predefined">float</span>(parts[<span class="integer">1</span>])  <span class="comment"># just add constant</span>
            <span class="keyword">return</span> t, y

In [<span class="integer">22</span>]: plot.add_trace(<span class="string"><span class="delimiter">'</span><span class="content">scatter</span><span class="delimiter">'</span></span>, sock1, <span class="string"><span class="delimiter">'</span><span class="content">Tick data raw</span><span class="delimiter">'</span></span>, <span class="integer">2</span>, <span class="integer">1</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">23</span>]: plot.add_trace(<span class="string"><span class="delimiter">'</span><span class="content">scatter</span><span class="delimiter">'</span></span>, sock2, <span class="string"><span class="delimiter">'</span><span class="content">Tick data scaled 2</span><span class="delimiter">'</span></span>, <span class="integer">2</span>, <span class="integer">1</span>,
                        simple_change)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">24</span>]: plot.set_subplot_title(<span class="integer">2</span>, <span class="integer">1</span>, <span class="string"><span class="delimiter">'</span><span class="content">Tick data raw &amp; scaled 2</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">25</span>]: plot.set_subplot_specs(<span class="integer">2</span>, <span class="integer">1</span>, {<span class="string"><span class="delimiter">'</span><span class="content">colspan</span><span class="delimiter">'</span></span>: <span class="integer">2</span>})  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">26</span>]: plot.set_subplot_specs(<span class="integer">2</span>, <span class="integer">2</span>, <span class="predefined-constant">None</span>)  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">27</span>]: plot.start_streaming()
Out[<span class="integer">27</span>]: This <span class="keyword">is</span> the format of your plot grid:
         [ (<span class="integer">1</span>,<span class="integer">1</span>) x1,y1 ]  [ (<span class="integer">1</span>,<span class="integer">2</span>) x2,y2 ]
         [ (<span class="integer">2</span>,<span class="integer">1</span>) x3,y3           -      ]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The plot now has shape (2, 2).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The two traces are placed …​</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>…​ in the same sub-plot.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>A single sub-plot title is defined.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Sub-plot (2, 1) spans two columns …​</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>…​ while sub-plot (2, 2) spans no column.</td>
</tr>
</tbody></table>
</div>
<div id="plotly_5" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/plotly_class_03.png" alt="plotly class 03">
</div>
<div class="title">Figure 47. Streaming plot with three sub-plots generated with Plotly streaming wrapper class.</div>
</div>
<div class="paragraph">
<p>In addition to streaming scatter plots (with lines and markers), the 
wrapper class allows the real-time visualization of data to be presented
 as a bar plot. As an example, consider the CPU usage of a remote 
server. At any given point in time, usage for a single thread — think 
Intel CPU with 4 cores and 8 threads in total — is between 0% and 100%. 
This type of streaming data is generally visualized by bars. <a href="#plotly_6">Streaming bar plot for CPU usage of remote server generated with Plotly streaming wrapper class.</a> shows a snapshot of the streaming bar plot as generated by the code below.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">28</span>]: plot = plst.plotly_stream(<span class="string"><span class="delimiter">'</span><span class="content">CPU usage of server</span><span class="delimiter">'</span></span>)

In [<span class="integer">29</span>]: sock = plot.add_data_source(<span class="string"><span class="delimiter">'</span><span class="content">80.82.223.74</span><span class="delimiter">'</span></span>, <span class="integer">6671</span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">30</span>]: <span class="keyword">def</span> <span class="function">callback_for_bars</span>(msg):
            <span class="comment"># input has to be of form 'value1, value2, value3, ...'</span>
            parts = msg.split(<span class="string"><span class="delimiter">'</span><span class="content">,</span><span class="delimiter">'</span></span>)
            y = [<span class="predefined">float</span>(p) + <span class="integer">1</span> <span class="keyword">if</span> <span class="predefined">float</span>(p) == <span class="integer">0</span> <span class="keyword">else</span> <span class="predefined">float</span>(p) <span class="keyword">for</span> p <span class="keyword">in</span> parts]
            x = [<span class="string"><span class="delimiter">'</span><span class="content">cpu %s</span><span class="delimiter">'</span></span> % (i + <span class="integer">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined">len</span>(parts))]
            <span class="keyword">return</span> x, y

In [<span class="integer">31</span>]: plot.add_trace(<span class="string"><span class="delimiter">'</span><span class="content">bars</span><span class="delimiter">'</span></span>, sock, <span class="string"><span class="delimiter">'</span><span class="content">cpu usage</span><span class="delimiter">'</span></span>,
                        parse_data=callback_for_bars)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">32</span>]: plot.add_layout(<span class="string"><span class="delimiter">'</span><span class="content">yaxis1</span><span class="delimiter">'</span></span>, { <span class="string"><span class="delimiter">'</span><span class="content">range</span><span class="delimiter">'</span></span>: [<span class="integer">0</span>, <span class="integer">100</span>]})  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">33</span>]: plot.add_layout(<span class="string"><span class="delimiter">'</span><span class="content">yaxis1</span><span class="delimiter">'</span></span>, {<span class="string"><span class="delimiter">'</span><span class="content">title</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">cpu usage in %</span><span class="delimiter">'</span></span>})  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">34</span>]: plot.start_streaming()
Out[<span class="integer">34</span>]: This <span class="keyword">is</span> the format of your plot grid:
         [ (<span class="integer">1</span>,<span class="integer">1</span>) x1,y1 ]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Connects to a remote socket.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Adds a trace object for bars and provides the callback function.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Defines the range for the <code>y</code> values to be between 0 and 100%.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Adds a label to the <code>y</code> axis.</td>
</tr>
</tbody></table>
</div>
<div id="plotly_6" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/plotly_class_04.png" alt="plotly class 04">
</div>
<div class="title">Figure 48. Streaming bar plot for CPU usage of remote server generated with Plotly streaming wrapper class.</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_conclusions_7">7.6. Conclusions</h3>
<div class="paragraph">
<p>Today, algorithmic trading has to deal with different types of 
streaming, i.e. real-time, data types. The most important type in this 
regard is tick data for financial instruments that is, in principle, 
generated and published around the clock.<sup class="footnote">[<a id="_footnoteref_27" class="footnote" href="#_footnote_27" title="View footnote.">27</a>]</sup>
 Sockets are the technological tool of choice to deal with streaming 
data. A powerful library in this regard is ZeroMQ that is used in this 
chapter to create a simple tick data server that endlessly emits sample 
tick data.</p>
</div>
<div class="paragraph">
<p>Different tick data clients are introduced and explained, among 
others to generate trading signals in real-time based on online 
algorithms and also to visualize the incoming tick data by streaming 
plots using the Plotly platform and the standard Python wrapper package 
for it. The final section of the chapter illustrates the usage of a 
Python wrapper class for the Plotly streaming API that makes the 
creation of dashboard-like streaming plots a rather efficient affair.</p>
</div>
<div class="paragraph">
<p>Based on the topics covered in this chapter and the previous ones, you are now able to work with both <em>historical structured data</em> (e.g. in the context of the backtesting of trading strategies) as well as <em>real-time streaming data</em>
 (e.g. in the context of generating trading signals in real-time). This 
represents a major milestone in the endeavor to build an automated, 
algorithmic trading operation.</p>
</div>
</div>
<div class="sect2">
<h3 id="_further_resources_7">7.7. Further Resources</h3>
<div class="paragraph">
<p>The best starting point for a thorough overview of ZeroMQ is the <a href="http://zeromq.org/" target="_blank">ZeroMQ home page</a>. The <a href="http://learning-0mq-with-pyzmq.readthedocs.io/en/latest/pyzmq/patterns/pubsub.html" target="_blank">Learning ZeroMQ with Python</a> tutorial pages provide an overview of the PUB-SUB pattern based on the Python wrapper for the socket communication library.</p>
</div>
<div class="paragraph">
<p>A good place to start working with Plotly is the <a href="http://plot.ly/" target="_blank">Plotly home page</a> and in particular the <a href="https://plot.ly/python/getting-started/" target="_blank">Getting Started with Python page</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_python_scripts_5">7.8. Python Scripts</h3>
<div id="py_tick_server" class="exampleblock">
<div class="title">Example 15. Script that runs a sample tick data server based on ZeroMQ</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Script</span>
<span class="comment"># with Tick Data Server</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">zmq</span>
<span class="keyword">import</span> <span class="include">math</span>
<span class="keyword">import</span> <span class="include">time</span>
<span class="keyword">import</span> <span class="include">random</span>

context = zmq.Context()
socket = context.socket(zmq.PUB)
socket.bind(<span class="string"><span class="delimiter">'</span><span class="content">tcp://0.0.0.0:5555</span><span class="delimiter">'</span></span>)


<span class="keyword">class</span> <span class="class">StockPrice</span>(<span class="predefined">object</span>):
    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>):
        <span class="predefined-constant">self</span>.symbol = <span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>
        <span class="predefined-constant">self</span>.t = time.time()
        <span class="predefined-constant">self</span>.value = <span class="float">100.</span>
        <span class="predefined-constant">self</span>.sigma = <span class="float">0.4</span>
        <span class="predefined-constant">self</span>.r = <span class="float">0.05</span>

    <span class="keyword">def</span> <span class="function">simulate_value</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Generates a new, random stock price.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        t = time.time()
        dt = (t - <span class="predefined-constant">self</span>.t) / (<span class="integer">252</span> * <span class="integer">8</span> * <span class="integer">60</span> * <span class="integer">60</span>)
        dt *= <span class="integer">100</span>
        <span class="predefined-constant">self</span>.t = t
        <span class="predefined-constant">self</span>.value *= math.exp((<span class="predefined-constant">self</span>.r - <span class="float">0.5</span> * <span class="predefined-constant">self</span>.sigma ** <span class="integer">2</span>) * dt +
                        <span class="predefined-constant">self</span>.sigma * math.sqrt(dt) * random.gauss(<span class="integer">0</span>, <span class="integer">1</span>))
        <span class="keyword">return</span> <span class="predefined-constant">self</span>.value


sp = StockPrice()

<span class="keyword">while</span> <span class="predefined-constant">True</span>:
    msg = <span class="string"><span class="delimiter">'</span><span class="content">%s %s</span><span class="delimiter">'</span></span> % (sp.symbol, sp.simulate_value())
    print(msg)
    socket.send_string(msg)
    time.sleep(random.random())</code></pre>
</div>
</div>
</div>
</div>
<div id="py_tick_client" class="exampleblock">
<div class="title">Example 16. Script that runs a sample tick data client based on ZeroMQ</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Script</span>
<span class="comment"># with Tick Data Client</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">zmq</span>

context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.connect(<span class="string"><span class="delimiter">'</span><span class="content">tcp://0.0.0.0:5555</span><span class="delimiter">'</span></span>)
socket.setsockopt_string(zmq.SUBSCRIBE, <span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>)

<span class="keyword">while</span> <span class="predefined-constant">True</span>:
    data = socket.recv_string()
    print(data)</code></pre>
</div>
</div>
</div>
</div>
<div id="py_online_algorithm" class="exampleblock">
<div class="title">Example 17. Script that implements a momentum-based trading strategy as an online algorithm</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Script</span>
<span class="comment"># with Online Trading Algorithm</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">zmq</span>
<span class="keyword">import</span> <span class="include">datetime</span>
<span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np
<span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.connect(<span class="string"><span class="delimiter">'</span><span class="content">tcp://0.0.0.0:5555</span><span class="delimiter">'</span></span>)
socket.setsockopt_string(zmq.SUBSCRIBE, <span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>)

df = pd.DataFrame()

<span class="keyword">while</span> <span class="predefined-constant">True</span>:
    data = socket.recv_string()
    t = datetime.datetime.now()
    sym, value = data.split()
    df = df.append(pd.DataFrame({sym: <span class="predefined">float</span>(value)}, index=[t]))
    dr = df.resample(<span class="string"><span class="delimiter">'</span><span class="content">5s</span><span class="delimiter">'</span></span>).last()
    dr[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(dr / dr.shift(<span class="integer">1</span>))
    dr[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>] = np.sign(dr[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].rolling(<span class="integer">3</span>).mean())
    print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="delimiter">'</span></span> + <span class="string"><span class="delimiter">'</span><span class="content">=</span><span class="delimiter">'</span></span> * <span class="integer">51</span>)
    print(dr.tail())
    <span class="keyword">if</span> dr[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>] == <span class="float">1.0</span>:
        print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="content">Long market position.</span><span class="delimiter">'</span></span>)
        <span class="comment"># take some action (e.g. place buy order)</span>
    <span class="keyword">elif</span> dr[<span class="string"><span class="delimiter">'</span><span class="content">momentum</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>] == -<span class="float">1.0</span>:
        print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="content">Short market position.</span><span class="delimiter">'</span></span>)
        <span class="comment"># take some action (e.g. place sell order)</span></code></pre>
</div>
</div>
</div>
</div>
<div id="py_plotly_stream" class="exampleblock">
<div class="title">Example 18. Script that plots streaming tick data with Plotly in real-time</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Script</span>
<span class="comment"># to Plot Streaming Data</span>
<span class="comment"># (Single Stream)</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">zmq</span>
<span class="keyword">import</span> <span class="include">datetime</span>
<span class="keyword">import</span> <span class="include">plotly.plotly</span> <span class="keyword">as</span> ply
<span class="keyword">from</span> <span class="include">plotly.graph_objs</span> <span class="keyword">import</span> <span class="include">*</span>
<span class="keyword">import</span> <span class="include">configparser</span>

<span class="comment"># configuration</span>
config = configparser.ConfigParser()
config.read(<span class="string"><span class="delimiter">'</span><span class="content">../pyalgo.cfg</span><span class="delimiter">'</span></span>)
ply.sign_in(config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">user_name</span><span class="delimiter">'</span></span>], config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">api_key</span><span class="delimiter">'</span></span>])
api_tokens = <span class="predefined">list</span>(config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">api_tokens</span><span class="delimiter">'</span></span>].split(<span class="string"><span class="delimiter">'</span><span class="content">,</span><span class="delimiter">'</span></span>))

<span class="comment"># socket connection</span>
context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.connect(<span class="string"><span class="delimiter">'</span><span class="content">tcp://0.0.0.0:5555</span><span class="delimiter">'</span></span>)
socket.setsockopt_string(zmq.SUBSCRIBE, <span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>)

<span class="comment"># plotly preparation</span>
stream = Stream(maxpoints=<span class="integer">100</span>, token=api_tokens[<span class="integer">0</span>])
trace = Scatter(x=[], y=[], name=<span class="string"><span class="delimiter">'</span><span class="content">tick data</span><span class="delimiter">'</span></span>,
                mode=<span class="string"><span class="delimiter">'</span><span class="content">lines+markers</span><span class="delimiter">'</span></span>, stream=stream)
data = Data([trace])
layout = Layout(title=<span class="string"><span class="delimiter">'</span><span class="content">Apple stock price</span><span class="delimiter">'</span></span>)
fig = Figure(data=data, layout=layout)
ply.plot(fig, filename=<span class="string"><span class="delimiter">'</span><span class="content">stream_plot</span><span class="delimiter">'</span></span>, auto_open=<span class="predefined-constant">True</span>)

s0 = ply.Stream(api_tokens[<span class="integer">0</span>])
s0.open()

<span class="keyword">while</span> <span class="predefined-constant">True</span>:
    data = socket.recv_string()
    t = datetime.datetime.now()
    print(data)
    sym, value = data.split()
    s0.write({<span class="string"><span class="delimiter">'</span><span class="content">x</span><span class="delimiter">'</span></span>: t, <span class="string"><span class="delimiter">'</span><span class="content">y</span><span class="delimiter">'</span></span>: <span class="predefined">float</span>(value)})</code></pre>
</div>
</div>
</div>
</div>
<div id="py_plotly_trend" class="exampleblock">
<div class="title">Example 19. Script that calculates two SMAs based on 
tick data retrieved and plots the tick data alongside the two SMAs in 
real-time</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Script</span>
<span class="comment"># to Plot Streaming Data</span>
<span class="comment"># (Three Streams)</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">zmq</span>
<span class="keyword">import</span> <span class="include">datetime</span>
<span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd
<span class="keyword">import</span> <span class="include">plotly.plotly</span> <span class="keyword">as</span> ply
<span class="keyword">from</span> <span class="include">plotly.graph_objs</span> <span class="keyword">import</span> <span class="include">*</span>
<span class="keyword">import</span> <span class="include">configparser</span>

<span class="comment"># configuration</span>
config = configparser.ConfigParser()
config.read(<span class="string"><span class="delimiter">'</span><span class="content">../pyalgo.cfg</span><span class="delimiter">'</span></span>)
ply.sign_in(config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">user_name</span><span class="delimiter">'</span></span>], config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">api_key</span><span class="delimiter">'</span></span>])
api_tokens = <span class="predefined">list</span>(config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">api_tokens</span><span class="delimiter">'</span></span>].split(<span class="string"><span class="delimiter">'</span><span class="content">,</span><span class="delimiter">'</span></span>))

<span class="comment"># socket connection</span>
context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.connect(<span class="string"><span class="delimiter">'</span><span class="content">tcp://0.0.0.0:5555</span><span class="delimiter">'</span></span>)
socket.setsockopt_string(zmq.SUBSCRIBE, <span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>)

<span class="comment"># plotly preparation</span>
stream_0 = Stream(maxpoints=<span class="integer">100</span>, token=api_tokens[<span class="integer">0</span>])
stream_1 = Stream(maxpoints=<span class="integer">100</span>, token=api_tokens[<span class="integer">1</span>])
stream_2 = Stream(maxpoints=<span class="integer">100</span>, token=api_tokens[<span class="integer">2</span>])
trace_0 = Scatter(x=[], y=[], name=<span class="string"><span class="delimiter">'</span><span class="content">tick data</span><span class="delimiter">'</span></span>,
                  mode=<span class="string"><span class="delimiter">'</span><span class="content">lines+markers</span><span class="delimiter">'</span></span>, stream=stream_0)
trace_1 = Scatter(x=[], y=[], name=<span class="string"><span class="delimiter">'</span><span class="content">SMA 1</span><span class="delimiter">'</span></span>,
                  mode=<span class="string"><span class="delimiter">'</span><span class="content">lines</span><span class="delimiter">'</span></span>, stream=stream_1)
trace_2 = Scatter(x=[], y=[], name=<span class="string"><span class="delimiter">'</span><span class="content">SMA 2</span><span class="delimiter">'</span></span>,
                  mode=<span class="string"><span class="delimiter">'</span><span class="content">lines</span><span class="delimiter">'</span></span>, stream=stream_2)
data = Data([trace_0, trace_1, trace_2])
layout = Layout(title=<span class="string"><span class="delimiter">'</span><span class="content">Apple stock price &amp; SMAs</span><span class="delimiter">'</span></span>)
fig = Figure(data=data, layout=layout)
ply.plot(fig, filename=<span class="string"><span class="delimiter">'</span><span class="content">trend_plot</span><span class="delimiter">'</span></span>, auto_open=<span class="predefined-constant">True</span>)

s0 = ply.Stream(api_tokens[<span class="integer">0</span>])
s1 = ply.Stream(api_tokens[<span class="integer">1</span>])
s2 = ply.Stream(api_tokens[<span class="integer">2</span>])
s0.open()
s1.open()
s2.open()

df = pd.DataFrame()

<span class="keyword">while</span> <span class="predefined-constant">True</span>:
    data = socket.recv_string()
    t = datetime.datetime.now()
    print(data)
    sym, value = data.split()
    df = df.append(pd.DataFrame({sym: <span class="predefined">float</span>(value)}, index=[t]))
    df[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] = df[sym].rolling(<span class="integer">5</span>).mean()
    df[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>] = df[sym].rolling(<span class="integer">10</span>).mean()
    s0.write({<span class="string"><span class="delimiter">'</span><span class="content">x</span><span class="delimiter">'</span></span>: t, <span class="string"><span class="delimiter">'</span><span class="content">y</span><span class="delimiter">'</span></span>: df[sym].ix[-<span class="integer">1</span>]})
    s1.write({<span class="string"><span class="delimiter">'</span><span class="content">x</span><span class="delimiter">'</span></span>: t, <span class="string"><span class="delimiter">'</span><span class="content">y</span><span class="delimiter">'</span></span>: df[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>]})
    s2.write({<span class="string"><span class="delimiter">'</span><span class="content">x</span><span class="delimiter">'</span></span>: t, <span class="string"><span class="delimiter">'</span><span class="content">y</span><span class="delimiter">'</span></span>: df[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>]})</code></pre>
</div>
</div>
</div>
</div>
<div id="py_plotly_class" class="exampleblock">
<div class="title">Example 20. Module with wrapper class for the Plotly streaming plot API</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Module</span>
<span class="comment"># with Wrapper Class</span>
<span class="comment"># for Plotly Streaming API</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">zmq</span>
<span class="keyword">import</span> <span class="include">datetime</span>
<span class="keyword">import</span> <span class="include">plotly.plotly</span> <span class="keyword">as</span> ply
<span class="keyword">import</span> <span class="include">plotly.tools</span> <span class="keyword">as</span> plyt
<span class="keyword">from</span> <span class="include">plotly.graph_objs</span> <span class="keyword">import</span> <span class="include">*</span>
<span class="keyword">import</span> <span class="include">configparser</span>

<span class="comment"># configuration file</span>
config = configparser.ConfigParser()
config.read(<span class="string"><span class="delimiter">'</span><span class="content">../pyalgo.cfg</span><span class="delimiter">'</span></span>)

NO_TOKENS_ERROR = <span class="string"><span class="delimiter">'''</span><span class="content">Can not find any streaming tokens, please</span><span class="content">
</span><span class="content">generate and add streaming tokens to the configuration file.</span><span class="delimiter">'''</span></span>

NO_TOKENS_LEFT_ERROR = <span class="string"><span class="delimiter">'''</span><span class="content">No stream token left,</span><span class="content">
</span><span class="content">to proceed add new tokens on your plotly account and</span><span class="content">
</span><span class="content">add them to the configuration file.</span><span class="delimiter">'''</span></span>

NO_CRED_ERROR = <span class="string"><span class="delimiter">'''</span><span class="content">Credentials are missing in the configuration file.</span><span class="delimiter">'''</span></span>


<span class="keyword">class</span> <span class="class">plotly_stream</span>(<span class="predefined">object</span>):
    <span class="docstring"><span class="delimiter">'''</span><span class="content"> A class for the easy implementation of streaming plots with Plotly.</span><span class="content">
</span><span class="content">    </span><span class="delimiter">'''</span></span>
    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, title, subplot_rows=<span class="integer">1</span>, subplot_columns=<span class="integer">1</span>,
                 maxpoints=<span class="integer">50</span>, token_number=<span class="integer">0</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Returns a ploty_stream instance.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters</span><span class="content">
</span><span class="content">        ==========</span><span class="content">
</span><span class="content">        title: str</span><span class="content">
</span><span class="content">            the title of the plot</span><span class="content">
</span><span class="content">        subplot_rows: int</span><span class="content">
</span><span class="content">            number of subplot rows, default is 1</span><span class="content">
</span><span class="content">        subplot_columns: int</span><span class="content">
</span><span class="content">            number of subplot columns, default is 1</span><span class="content">
</span><span class="content">        maxpoints: int</span><span class="content">
</span><span class="content">            the number of points a trace contains, default is 50</span><span class="content">
</span><span class="content">        token_number: int</span><span class="content">
</span><span class="content">            the position of the first streaming token in the token list</span><span class="content">
</span><span class="content">            used by the instance, default is 0</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.user_name = config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">user_name</span><span class="delimiter">'</span></span>]
        <span class="predefined-constant">self</span>.api_key = config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">api_key</span><span class="delimiter">'</span></span>]
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.user_name == <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span> <span class="keyword">or</span> <span class="predefined-constant">self</span>.api_key == <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>:
            <span class="keyword">raise</span> <span class="exception">IOError</span>(NO_CRED_ERROR)
        ply.sign_in(<span class="predefined-constant">self</span>.user_name, <span class="predefined-constant">self</span>.api_key)

        <span class="predefined-constant">self</span>.api_tokens = <span class="predefined">list</span>(config[<span class="string"><span class="delimiter">'</span><span class="content">plotly</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">api_tokens</span><span class="delimiter">'</span></span>].split(<span class="string"><span class="delimiter">'</span><span class="content">,</span><span class="delimiter">'</span></span>))
        <span class="keyword">if</span> <span class="predefined">len</span>(<span class="predefined-constant">self</span>.api_tokens) == <span class="integer">0</span>:
            <span class="predefined-constant">self</span>.api_tokens = <span class="predefined-constant">self</span>.class_stream_tokens
            <span class="keyword">if</span> <span class="predefined">len</span>(<span class="predefined-constant">self</span>.api_tokens) == <span class="integer">0</span>:
                <span class="keyword">raise</span> <span class="exception">IOError</span>(NO_TOKENS_ERROR)

        <span class="predefined-constant">self</span>.sources = <span class="predefined">dict</span>()
        <span class="predefined-constant">self</span>.source_id = <span class="integer">0</span>
        <span class="predefined-constant">self</span>.traces = <span class="predefined">list</span>()
        <span class="predefined-constant">self</span>.data = <span class="predefined">list</span>()
        <span class="predefined-constant">self</span>.maxpoints = maxpoints
        <span class="predefined-constant">self</span>.token_number = token_number
        <span class="predefined-constant">self</span>.context = zmq.Context()
        <span class="predefined-constant">self</span>.poller = zmq.Poller()
        <span class="predefined-constant">self</span>.title = <span class="predefined">str</span>(title)
        <span class="predefined-constant">self</span>.cols = subplot_columns
        <span class="predefined-constant">self</span>.rows = subplot_rows
        <span class="predefined-constant">self</span>.subplots = <span class="predefined">dict</span>()
        <span class="predefined-constant">self</span>.layout = <span class="predefined">dict</span>()
        <span class="predefined-constant">self</span>.plot_url = <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
        <span class="predefined-constant">self</span>.fig = <span class="predefined-constant">None</span>
        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined-constant">self</span>.rows):
            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined-constant">self</span>.cols):
                <span class="predefined-constant">self</span>.subplots[r * <span class="predefined-constant">self</span>.cols + c] = subplot(r, c)
        <span class="predefined-constant">self</span>.add_layout(layout={<span class="string"><span class="delimiter">'</span><span class="content">title</span><span class="delimiter">'</span></span>: <span class="predefined-constant">self</span>.title})

    <span class="keyword">def</span> <span class="function">init_plot</span>(<span class="predefined-constant">self</span>, auto_open=<span class="predefined-constant">False</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Initializes the plot and returns the plot url;</span><span class="content">
</span><span class="content">        is called by either start_streaming or get_plot_url.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> <span class="predefined">len</span>(<span class="predefined-constant">self</span>.traces) == <span class="integer">0</span>:
            <span class="keyword">raise</span> <span class="exception">ValueError</span>(<span class="string"><span class="delimiter">'</span><span class="content">No traces given</span><span class="delimiter">'</span></span>)
        specs = <span class="predefined">list</span>()
        titles = <span class="predefined">list</span>()
        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined-constant">self</span>.rows):
            specs_r = <span class="predefined">list</span>()
            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined-constant">self</span>.cols):
                specs_r.append(<span class="predefined-constant">self</span>.subplots[r * <span class="predefined-constant">self</span>.cols + c].spec)
                titles.append(<span class="predefined-constant">self</span>.subplots[r * <span class="predefined-constant">self</span>.cols + c].title)
            specs.append(specs_r)

        <span class="predefined-constant">self</span>.fig = plyt.make_subplots(rows=<span class="predefined-constant">self</span>.rows, cols=<span class="predefined-constant">self</span>.cols,
                                      specs=specs, subplot_titles=titles,
                                      shared_xaxes=<span class="predefined-constant">False</span>,
                                      shared_yaxes=<span class="predefined-constant">False</span>)
        <span class="keyword">for</span> target <span class="keyword">in</span> <span class="predefined-constant">self</span>.layout:
            <span class="keyword">if</span> target == <span class="string"><span class="delimiter">'</span><span class="content">main</span><span class="delimiter">'</span></span>:
                <span class="predefined-constant">self</span>.fig[<span class="string"><span class="delimiter">'</span><span class="content">layout</span><span class="delimiter">'</span></span>].update(**<span class="predefined-constant">self</span>.layout[target])
            <span class="keyword">else</span>:
                <span class="predefined-constant">self</span>.fig[<span class="string"><span class="delimiter">'</span><span class="content">layout</span><span class="delimiter">'</span></span>][target].update(**<span class="predefined-constant">self</span>.layout[target])

        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined-constant">self</span>.rows):
            specs_r = <span class="predefined">list</span>()
            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined-constant">self</span>.cols):
                <span class="keyword">for</span> t <span class="keyword">in</span> <span class="predefined-constant">self</span>.subplots[r * <span class="predefined-constant">self</span>.cols + c].traces:
                    <span class="predefined-constant">self</span>.fig.append_trace(t.trace, r + <span class="integer">1</span>, c + <span class="integer">1</span>)
        <span class="predefined-constant">self</span>.plot_url = ply.plot(
            <span class="predefined-constant">self</span>.fig, <span class="string"><span class="delimiter">'</span><span class="content">plotly_stream</span><span class="delimiter">'</span></span>, auto_open=auto_open)

    <span class="keyword">def</span> <span class="function">add_layout</span>(<span class="predefined-constant">self</span>, target=<span class="string"><span class="delimiter">"</span><span class="delimiter">"</span></span>, layout={}):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Adds layout information of the plot.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters</span><span class="content">
</span><span class="content">        ==========</span><span class="content">
</span><span class="content">        target: object</span><span class="content">
</span><span class="content">            the object, the layout should be applied one; if empty,</span><span class="content">
</span><span class="content">            the whole plot is set as target</span><span class="content">
</span><span class="content">        layout: dict</span><span class="content">
</span><span class="content">            a dictionary containing the key/value pairs of the new layout</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> target == <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>:
            target = <span class="string"><span class="delimiter">'</span><span class="content">main</span><span class="delimiter">'</span></span>
        <span class="keyword">if</span> target <span class="keyword">not</span> <span class="keyword">in</span> <span class="predefined-constant">self</span>.layout:
            <span class="predefined-constant">self</span>.layout[target] = layout
        <span class="keyword">else</span>:
            <span class="predefined-constant">self</span>.layout[target].update(layout)

    <span class="keyword">def</span> <span class="function">add_data_source</span>(<span class="predefined-constant">self</span>, host, port):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">Adds a datasource to the instance</span><span class="delimiter">'''</span></span>
        socket = <span class="predefined-constant">self</span>.add_socket(host, port)
        socket.setsockopt_string(zmq.IDENTITY, <span class="predefined">str</span>(<span class="predefined-constant">self</span>.source_id))

        <span class="predefined-constant">self</span>.sources[<span class="predefined-constant">self</span>.source_id] = socket
        <span class="predefined-constant">self</span>.source_id += <span class="integer">1</span>
        <span class="predefined-constant">self</span>.poller.register(socket, zmq.POLLIN)
        <span class="keyword">return</span> socket

    <span class="keyword">def</span> <span class="function">add_trace</span>(<span class="predefined-constant">self</span>, kind, data_source, name=<span class="predefined-constant">None</span>, row=<span class="integer">1</span>,
                  col=<span class="integer">1</span>, parse_data=<span class="predefined-constant">None</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Adds a new trace object to a subplot.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters</span><span class="content">
</span><span class="content">        ==========</span><span class="content">
</span><span class="content">        kind: str</span><span class="content">
</span><span class="content">            the kind of graphical object, one of "scatter" or "bars"</span><span class="content">
</span><span class="content">        name: str</span><span class="content">
</span><span class="content">            the name of the trace, appears for example in the legend</span><span class="content">
</span><span class="content">        data_source: object</span><span class="content">
</span><span class="content">            a data source object as defined by plotly_stream.add_data_source</span><span class="content">
</span><span class="content">        row and col: ints</span><span class="content">
</span><span class="content">            the subplot to append the trace object to</span><span class="content">
</span><span class="content">        parse_data: object</span><span class="content">
</span><span class="content">            an optional callback function to parse the data recieved</span><span class="content">
</span><span class="content">            from a server; the function must accept a string</span><span class="content">
</span><span class="content">            (the incoming message) and returns the x and y data</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.token_number &gt;= <span class="predefined">len</span>(<span class="predefined-constant">self</span>.api_tokens):
            <span class="keyword">raise</span> <span class="exception">ValueError</span>(NO_TOKENS_LEFT_ERROR)
        <span class="keyword">if</span> name <span class="keyword">is</span> <span class="predefined-constant">None</span>:
            name = <span class="string"><span class="delimiter">'</span><span class="content">Stream %s</span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.api_tokens[<span class="predefined-constant">self</span>.token_number]
        <span class="keyword">if</span> kind == <span class="string"><span class="delimiter">'</span><span class="content">scatter</span><span class="delimiter">'</span></span>:
            trace = stream_trace(<span class="predefined-constant">self</span>.api_tokens[<span class="predefined-constant">self</span>.token_number],
                                 data_source, name, <span class="predefined-constant">self</span>.maxpoints,
                                 (row - <span class="integer">1</span>) * <span class="predefined-constant">self</span>.cols + col - <span class="integer">1</span>, parse_data)
        <span class="keyword">elif</span> kind == <span class="string"><span class="delimiter">'</span><span class="content">bars</span><span class="delimiter">'</span></span>:
            trace = stream_bars(<span class="predefined-constant">self</span>.api_tokens[<span class="predefined-constant">self</span>.token_number],
                                data_source, name, <span class="predefined-constant">self</span>.maxpoints,
                                (row - <span class="integer">1</span>) * <span class="predefined-constant">self</span>.cols + col - <span class="integer">1</span>, parse_data)
        <span class="predefined-constant">self</span>.token_number += <span class="integer">1</span>
        <span class="predefined-constant">self</span>.traces.append(trace)
        <span class="predefined-constant">self</span>.data.append(trace.trace)
        <span class="predefined-constant">self</span>.subplots[(row - <span class="integer">1</span>) * <span class="predefined-constant">self</span>.cols + col - <span class="integer">1</span>].append_trace(trace)

        <span class="keyword">return</span> trace

    <span class="keyword">def</span> <span class="function">set_max_points</span>(<span class="predefined-constant">self</span>, maxpoints):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Sets the maximum number of points plotted by each trace</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> <span class="predefined">type</span>(maxpoints) != <span class="predefined">int</span>:
            <span class="keyword">raise</span> <span class="exception">TypeError</span>(<span class="string"><span class="delimiter">"</span><span class="content">maxpoints must be of type int</span><span class="delimiter">"</span></span>)
        <span class="keyword">elif</span> maxpoint &gt; <span class="integer">0</span>:
            <span class="predefined-constant">self</span>.maxpoints = maxpoints

    <span class="keyword">def</span> <span class="function">get_plot_url</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Returns the plot url, must be called after all other settings</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.plot_url == <span class="string"><span class="delimiter">"</span><span class="delimiter">"</span></span>:
            <span class="predefined-constant">self</span>.init_plot()
        <span class="keyword">return</span> <span class="predefined-constant">self</span>.plot_url

    <span class="keyword">def</span> <span class="function">start_streaming</span>(<span class="predefined-constant">self</span>, auto_open=<span class="predefined-constant">True</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Starts streaming, must be called after all other settings</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters</span><span class="content">
</span><span class="content">        ==========</span><span class="content">
</span><span class="content">        auto_open: boolean</span><span class="content">
</span><span class="content">            if True (default) the method tries to open a browser</span><span class="content">
</span><span class="content">            with the new plot</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.plot_url == <span class="string"><span class="delimiter">"</span><span class="delimiter">"</span></span>:
            <span class="predefined-constant">self</span>.init_plot()
            print(<span class="string"><span class="delimiter">"</span><span class="content">Plot url: %s</span><span class="delimiter">"</span></span> % <span class="predefined-constant">self</span>.plot_url)

        <span class="keyword">for</span> trace <span class="keyword">in</span> <span class="predefined-constant">self</span>.traces:
            trace.stream.open()
        <span class="keyword">while</span> <span class="predefined-constant">True</span>:
            <span class="keyword">try</span>:
                socks = <span class="predefined">dict</span>(<span class="predefined-constant">self</span>.poller.poll())
            <span class="keyword">except</span> <span class="exception">KeyboardInterrupt</span>:
                <span class="keyword">break</span>

            <span class="keyword">for</span> socket <span class="keyword">in</span> socks:
                socket_id = <span class="predefined">int</span>(socket.getsockopt_string(zmq.IDENTITY))
                msg = socket.recv_string()

                <span class="keyword">for</span> trace <span class="keyword">in</span> <span class="predefined-constant">self</span>.traces:
                    <span class="keyword">if</span> trace.data_source == socket_id:
                        x, y = trace.parse_data(msg)
                        trace.write_to_stream({<span class="string"><span class="delimiter">'</span><span class="content">x</span><span class="delimiter">'</span></span>: x, <span class="string"><span class="delimiter">'</span><span class="content">y</span><span class="delimiter">'</span></span>: y})
                        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="predefined-constant">self</span>.subplots[trace.subplot_id].traces:
                            <span class="keyword">if</span> t.data_source != socket_id:
                                t.write_to_stream({<span class="string"><span class="delimiter">'</span><span class="content">x</span><span class="delimiter">'</span></span>: x, <span class="string"><span class="delimiter">'</span><span class="content">y</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content"> </span><span class="delimiter">'</span></span>})

    <span class="keyword">def</span> <span class="function">add_socket</span>(<span class="predefined-constant">self</span>, host, port):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Add a new socket</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        socket = <span class="predefined-constant">self</span>.context.socket(zmq.SUB)
        socket.connect(<span class="string"><span class="delimiter">'</span><span class="content">tcp://%s:%s</span><span class="delimiter">'</span></span> % (host, port))
        socket.setsockopt_string(zmq.SUBSCRIBE, <span class="string"><span class="modifier">u</span><span class="delimiter">'</span><span class="delimiter">'</span></span>)
        <span class="keyword">return</span> socket

    <span class="keyword">def</span> <span class="function">set_subplot_title</span>(<span class="predefined-constant">self</span>, r, c, title):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">Sets the title of a subplot</span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.subplots[(r - <span class="integer">1</span>) * <span class="predefined-constant">self</span>.cols + c - <span class="integer">1</span>].title = title

    <span class="keyword">def</span> <span class="function">set_subplot_specs</span>(<span class="predefined-constant">self</span>, r, c, spec):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">Sets the spec of a subplot</span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.subplots[(r - <span class="integer">1</span>) * <span class="predefined-constant">self</span>.cols + c - <span class="integer">1</span>].spec = spec


<span class="keyword">class</span> <span class="class">data_source</span>(<span class="predefined">object</span>):
    <span class="docstring"><span class="delimiter">'''</span><span class="content"> Class to generate the data sources used by plotly_stream.</span><span class="content">
</span><span class="content">    </span><span class="delimiter">'''</span></span>
    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, host, port):
        context = zmq.Context()
        <span class="predefined-constant">self</span>.socket = context.socket(zmq.SUB)
        <span class="predefined-constant">self</span>.socket.connect(<span class="string"><span class="delimiter">'</span><span class="content">tcp://%s:%s</span><span class="delimiter">'</span></span> % (host, port))
        <span class="predefined-constant">self</span>.socket.setsockopt_string(zmq.SUBSCRIBE, <span class="string"><span class="modifier">u</span><span class="delimiter">'</span><span class="delimiter">'</span></span>)

    <span class="keyword">def</span> <span class="function">get_data</span>(<span class="predefined-constant">self</span>):
        <span class="keyword">return</span> <span class="predefined-constant">self</span>.socket.recv_string()


<span class="keyword">class</span> <span class="class">stream_trace</span>(<span class="predefined">object</span>):
    <span class="docstring"><span class="delimiter">'''</span><span class="content"> Class to instantiate the streamed scatter objects used by plotly_stream.</span><span class="content">
</span><span class="content">    </span><span class="delimiter">'''</span></span>
    <span class="keyword">def</span> <span class="function">parse_data</span>(cls, msg):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Default callback function for streamed scatter objects;</span><span class="content">
</span><span class="content">        used if no other callback is given.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        parts = msg.split()
        t = datetime.datetime.now()
        y = <span class="predefined">float</span>(parts[<span class="integer">1</span>])
        <span class="keyword">return</span> t, y

    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, stream_token, data_source, name,
                 maxpoints, subplot_id, parse_data=<span class="predefined-constant">None</span>):
        <span class="predefined-constant">self</span>.data_source = <span class="predefined">int</span>(data_source.getsockopt_string(zmq.IDENTITY))
        <span class="predefined-constant">self</span>.name = name
        <span class="predefined-constant">self</span>.trace = Scatter(x=[], y=[],
                             stream=<span class="predefined">dict</span>(token=stream_token,
                                         maxpoints=maxpoints),
                             name=name, mode=<span class="string"><span class="delimiter">'</span><span class="content">lines+markers</span><span class="delimiter">'</span></span>, connectgaps=<span class="predefined-constant">True</span>)
        <span class="predefined-constant">self</span>.stream = ply.Stream(stream_token)
        <span class="predefined-constant">self</span>.subplot_id = subplot_id
        <span class="keyword">if</span> parse_data <span class="keyword">is</span> <span class="keyword">not</span> <span class="predefined-constant">None</span>:
            <span class="predefined-constant">self</span>.parse_data = parse_data

    <span class="keyword">def</span> <span class="function">open_stream</span>(<span class="predefined-constant">self</span>):
        <span class="predefined-constant">self</span>.stream.open()

    <span class="keyword">def</span> <span class="function">write_to_stream</span>(<span class="predefined-constant">self</span>, data):
        <span class="predefined-constant">self</span>.stream.write(data)

    <span class="keyword">def</span> <span class="function">close_stream</span>(<span class="predefined-constant">self</span>):
        <span class="predefined-constant">self</span>.stream.close()

    <span class="keyword">def</span> <span class="function">set_parse_data</span>(<span class="predefined-constant">self</span>, callback):
        <span class="predefined-constant">self</span>.parse_data = callback


<span class="keyword">class</span> <span class="class">stream_bars</span>(<span class="predefined">object</span>):
    <span class="docstring"><span class="delimiter">'''</span><span class="content"> Class to generate the streamed bars objects used by plotly_stream.</span><span class="content">
</span><span class="content">    </span><span class="delimiter">'''</span></span>
    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, stream_token, data_source, name,
                 maxpoints, subplot_id, parse_data=<span class="predefined-constant">None</span>):
        <span class="predefined-constant">self</span>.data_source = <span class="predefined">int</span>(data_source.getsockopt_string(zmq.IDENTITY))
        <span class="predefined-constant">self</span>.name = name
        <span class="predefined-constant">self</span>.bar_labels = <span class="predefined">list</span>()
        <span class="predefined-constant">self</span>.trace = Bar(x=[], y=[],
                         stream=<span class="predefined">dict</span>(token=stream_token, maxpoints=maxpoints),
                         name=name)
        <span class="predefined-constant">self</span>.stream = ply.Stream(stream_token)
        <span class="predefined-constant">self</span>.subplot_id = subplot_id
        <span class="keyword">if</span> parse_data <span class="keyword">is</span> <span class="keyword">not</span> <span class="predefined-constant">None</span>:
            <span class="predefined-constant">self</span>.parse_data = parse_data

    <span class="keyword">def</span> <span class="function">parse_data</span>(<span class="predefined-constant">self</span>, msg):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Default callback function for streamed bars objects;</span><span class="content">
</span><span class="content">        used if no other callback is given.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        parts = msg.split(<span class="string"><span class="delimiter">"</span><span class="content">,</span><span class="delimiter">"</span></span>)
        y = [<span class="predefined">float</span>(p) <span class="keyword">for</span> p <span class="keyword">in</span> parts]
        <span class="keyword">if</span> <span class="predefined">len</span>(<span class="predefined-constant">self</span>.bar_labels) == <span class="predefined">len</span>(y):
            x = <span class="predefined-constant">self</span>.bar_labels
        <span class="keyword">else</span>:
            x = [<span class="predefined">str</span>(i + <span class="integer">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="predefined">len</span>(y))]
        <span class="keyword">return</span> x, y

    <span class="keyword">def</span> <span class="function">open_stream</span>(<span class="predefined-constant">self</span>):
        <span class="predefined-constant">self</span>.stream.open()

    <span class="keyword">def</span> <span class="function">write_to_stream</span>(<span class="predefined-constant">self</span>, data):
        data.update({<span class="string"><span class="delimiter">'</span><span class="content">type</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">bar</span><span class="delimiter">'</span></span>})
        <span class="predefined-constant">self</span>.stream.write(data)

    <span class="keyword">def</span> <span class="function">close_stream</span>(<span class="predefined-constant">self</span>):
        <span class="predefined-constant">self</span>.stream.close()

    <span class="keyword">def</span> <span class="function">set_parse_data</span>(<span class="predefined-constant">self</span>, callback):
        <span class="predefined-constant">self</span>.parse_data = callback


<span class="keyword">class</span> <span class="class">subplot</span>(<span class="predefined">object</span>):
    <span class="docstring"><span class="delimiter">'''</span><span class="content"> Class to instantiate subplot object as used by ploty_stream.</span><span class="content">
</span><span class="content">    </span><span class="delimiter">'''</span></span>
    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, row, col):
        <span class="predefined-constant">self</span>.row = row
        <span class="predefined-constant">self</span>.col = col
        <span class="predefined-constant">self</span>.spec = <span class="predefined">dict</span>()
        <span class="predefined-constant">self</span>.title = <span class="string"><span class="delimiter">"</span><span class="delimiter">"</span></span>
        <span class="predefined-constant">self</span>.traces = <span class="predefined">list</span>()

    <span class="keyword">def</span> <span class="function">set_title</span>(<span class="predefined-constant">self</span>, title):
        <span class="predefined-constant">self</span>.title = title

    <span class="keyword">def</span> <span class="function">set_spec</span>(<span class="predefined-constant">self</span>, spec):
        <span class="predefined-constant">self</span>.spec = spec

    <span class="keyword">def</span> <span class="function">append_trace</span>(<span class="predefined-constant">self</span>, trace):
        <span class="predefined-constant">self</span>.traces.append(trace)</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="trading_oanda">8. CFD Trading with Oanda</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph align_me_right">
<p>Today, even small entities that trade complex instruments or are 
granted sufficient leverage can threaten the global financial system.</p>
</div>
</blockquote>
<div class="attribution">
— Paul Singer
</div>
</div>
<div class="sect2">
<h3 id="_introduction_8">8.1. Introduction</h3>
<div class="paragraph">
<p>Today, it is easier than ever to get started with trading in the 
financial markets. There is a large number of online trading platforms 
(brokers) available from which a(n) (algorithmic) trader can choose. The
 choice of a platform might be influenced by multiple factors:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>instruments</strong>: the first criterion that comes to mind 
is the type of instrument one is interested in for trading; for example,
 one might be interested in trading stocks, exchange-traded funds 
(ETFs), bonds, currencies, commodities, options or futures</p>
</li>
<li>
<p><strong>strategies</strong>: some traders are interested in long-only strategies, others require short selling as well</p>
</li>
<li>
<p><strong>costs</strong>: fixed and variable transaction costs are an 
important factor for many traders; they might even decide whether a 
certain strategy is profitable or not (see, for instance, <a href="#vectorized_backtesting">Mastering Vectorized Backtesting</a> and <a href="#event_based_backtesting">Building Classes for Event-based Backtesting</a>)</p>
</li>
<li>
<p><strong>technology</strong>: technology has become an important 
factor in the selection of trading platforms; first, there are the tools
 that the providers offer the traders; second, there are the application
 programming interfaces (APIs) that can be accessed programmatically by 
traders</p>
</li>
<li>
<p><strong>jurisdiction</strong>: financial trading is a heavily 
regulated field with different legal frameworks in place for different 
countries or regions; this might prohibit certain traders from using 
certain platforms and/or financial instruments depending on their 
residence</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This chapter focuses on <a href="http://oanda.com/" target="_blank">Oanda</a>, an online trading platform that describes itself as follows:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>OANDA is a leader in currency data, offering forex &amp; CFD trading,
 corporate fx transfers and exchange rates services for a wide range of 
organizations and investors.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>The following is a brief description of Oanda along the above criteria:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>instruments</strong>: Oanda offers a wide range of so-called Contracts for Difference (CFD) products (see, for instance, the <a href="http://www.investopedia.com/terms/c/contractfordifferences.asp" target="_blank">Investopedia CFD page</a> or more detailed the <a href="https://en.wikipedia.org/wiki/Contract_for_difference" target="_blank">Wikipedia CFD page</a>);
 there are CFDs available on currency pairs (e.g. EUR/USD), commodities 
(e.g. Gold), stock indices (e.g. S&amp;P 500 index), bonds (e.g. German 
10 Year Bund) and more; one can think of a product range that basically 
allows to implement global macro strategies <sup class="footnote">[<a id="_footnoteref_28" class="footnote" href="#_footnote_28" title="View footnote.">28</a>]</sup>;
 main characteristics of CFDs are that they are leveraged (e.g. 10:1 or 
50:1) and traded on margin such that losses might exceed the initial 
capital</p>
</li>
<li>
<p><strong>strategies</strong>: Oanda allows both to go long (buy) and 
to go short (sell) CFDs; different order types are available like, for 
example, market or limit orders, with or without profit targets and/or 
stop losses</p>
</li>
<li>
<p><strong>costs</strong>: there are no fixed transaction costs 
associated with the trading of CFDs; however, there is a bid-ask spread 
that leads to variable transaction costs when trading CFDs</p>
</li>
<li>
<p><strong>technology</strong>: Oanda provides the trading application 
fxTrade (Practice) which retrieves data in real-time and which allows 
the (manual, discretionary) trading of all instruments — see <a href="#oanda_01">Oanda trading application fxTrade Practice</a>; a major strength of the platform are the RESTful and streaming APIs (see <a href="http://developer.oanda.com/rest-live/introduction/" target="_blank">Developer portal</a>)
 via which traders can programmatically access historical and streaming 
data, place buy and sell orders or retrieve account information; a 
Python wrapper package is available;<sup class="footnote">[<a id="_footnoteref_29" class="footnote" href="#_footnote_29" title="View footnote.">29</a>]</sup>
 Oanda offers free paper trading accounts that provide full access to 
all technological capabilities which is really helpful in getting 
started on the platform</p>
</li>
<li>
<p><strong>jurisdiction</strong>: depending on the residence of the 
account holder, the selection of CFDs that can be traded changes; 
forex-related CFDs are available everywhere but not, for example, those 
CFDs that are based on stock indices</p>
</li>
</ul>
</div>
<div id="oanda_01" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/oanda_01.png" alt="oanda 01">
</div>
<div class="title">Figure 49. Oanda trading application fxTrade Practice</div>
</div>
<div class="paragraph">
<p>The chapter is organized as follows. <a href="#oanda_setup">Setting Up an Account</a> briefly discusses how to set-up an account. <a href="#oanda_api">The Oanda API</a> illustrates the necessary steps to access the API. Based on the API access, <a href="#oanda_historical">Retrieving Historical Data</a> retrieves and works with historical data for a certain CFD. <a href="#oanda_streaming">Working with Streaming Data</a> introduces to the streaming API of Oanda for data retrieval and visualization. <a href="#oanda_trading">Implementing Trading Strategies in Real-Time</a> implements an automated, algorithmic trading strategy in real-time. Finally, <a href="#oanda_account">Retrieving Account Information</a> deals with retrieving data about the account itself, like, for example, the current balance or recent trades.</p>
</div>
<div class="paragraph">
<p>The goal of this chapter is to make use of the approaches and 
technologies as introduced in previous chapters to automatically trade 
on the Oanda platform.</p>
</div>
</div>
<div class="sect2">
<h3 id="oanda_setup">8.2. Setting Up an Account</h3>
<div class="paragraph">
<p>The process for setting up an account with Oanda is simple and 
efficient. You can chose between a real account and a free demo 
(“practice”) account which absolutely suffices to implement what follows
 (see <a href="#oanda_02">Oanda account registration (account types)</a> and <a href="#oanda_03">Oanda account registration (registration form)</a>).</p>
</div>
<div id="oanda_02" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/oanda_02.png" alt="oanda 02">
</div>
<div class="title">Figure 50. Oanda account registration (account types)</div>
</div>
<div id="oanda_03" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/oanda_03.png" alt="oanda 03">
</div>
<div class="title">Figure 51. Oanda account registration (registration form)</div>
</div>
<div class="paragraph">
<p>If the registration is successful and you are logged in to the 
account on the platform, you should see a starting page as shown in <a href="#oanda_04">Oanda account starting page</a>. In the upper left corner you find a download link for the <code>fxTrade Practice for Desktop</code> application which you should install. Once it is running, it looks similar to the screen shot shown in <a href="#oanda_01">Oanda trading application fxTrade Practice</a>.</p>
</div>
<div id="oanda_04" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/oanda_04.png" alt="oanda 04">
</div>
<div class="title">Figure 52. Oanda account starting page</div>
</div>
</div>
<div class="sect2">
<h3 id="oanda_api">8.3. The Oanda API</h3>
<div class="paragraph">
<p>After registration, getting access to the APIs of Oanda is an easy 
affair. The major ingredients needed are the account number and the 
access token (API key). You find the account number, for instance, in 
the area <code>Manage Funds</code>. The access token can be generated in the area <code>Manage API Access</code> (see <a href="#oanda_05">Oanda API access managing page</a>).<sup class="footnote">[<a id="_footnoteref_30" class="footnote" href="#_footnote_30" title="View footnote.">30</a>]</sup></p>
</div>
<div id="oanda_05" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/oanda_05.png" alt="oanda 05">
</div>
<div class="title">Figure 53. Oanda API access managing page</div>
</div>
<div class="paragraph">
<p>The following assumes that you have stored the account information in the <code>pyalgo.cfg</code> file (see <a href="#config_pyalgo">configparser Module</a>) as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>[oanda_v20]
account_id = YOUR_ACCOUNT_ID
access_token = YOUR_ACCESS_TOKEN</pre>
</div>
</div>
<div class="paragraph">
<p>To access the API via Python, the <code>v20</code> package (<a href="https://github.com/oanda/v20-python" target="_blank">Github repository</a>) needs to be installed via</p>
</div>
<div class="listingblock">
<div class="content">
<pre>pip install v20</pre>
</div>
</div>
<div class="paragraph">
<p>With these prerequisites, you can connect to the API with a few lines of code.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">configparser</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: config = configparser.ConfigParser()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: config.read(<span class="string"><span class="delimiter">'</span><span class="content">../pyalgo.cfg</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">4</span>]: [<span class="string"><span class="delimiter">'</span><span class="content">../pyalgo.cfg</span><span class="delimiter">'</span></span>]

In [<span class="integer">4</span>]: <span class="keyword">import</span> <span class="include">v20</span>  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">5</span>]: ctx = v20.Context(
              <span class="string"><span class="delimiter">'</span><span class="content">api-fxpractice.oanda.com</span><span class="delimiter">'</span></span>,
              <span class="integer">443</span>,
              <span class="predefined-constant">True</span>,
              application=<span class="string"><span class="delimiter">'</span><span class="content">sample_code</span><span class="delimiter">'</span></span>,
              token=config[<span class="string"><span class="delimiter">'</span><span class="content">oanda_v20</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">access_token</span><span class="delimiter">'</span></span>],
              datetime_format=<span class="string"><span class="delimiter">'</span><span class="content">RFC3339</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">6</span>]: response = ctx.account.list()  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">7</span>]: accounts = response.get(<span class="string"><span class="delimiter">'</span><span class="content">accounts</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">8</span>]: <span class="keyword">for</span> account <span class="keyword">in</span> accounts:
            print(<span class="string"><span class="delimiter">'</span><span class="content">Account: %s</span><span class="delimiter">'</span></span> %account)  <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">8</span>]: Account: <span class="predefined">id</span>: <span class="integer">101</span>-<span class="octal">004</span>-<span class="integer">5516121</span>-<span class="octal">001</span>
        tags: []</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Import the <code>configparser</code> module.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Instantiates the main <code>ConfigParser</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Read in the configuration data.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Imports <code>v20</code>; this package allows to connect to the Oanda API.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The main <code>Context</code> object is instantiated for the <code>practice</code> environment (account), using the API access token.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>To see if it works, these lines of code retrieve the <code>id</code> values for all accounts (there can be multiple sub-accounts in a single main account).</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>This is a major milestone: being connected to the Oanda API allows 
now for the retrieval of historical data or the programmatic placing of 
orders.</p>
</div>
</div>
<div class="sect2">
<h3 id="oanda_historical">8.4. Retrieving Historical Data</h3>
<div class="paragraph">
<p>A major benefit of working with the Oanda platform is that a complete
 history of data is accessible via the RESTful API. In this context, <em>complete history</em> refers to the different CFDs — not the underlyings they are defined on.</p>
</div>
<div class="sect3">
<h4 id="_looking_up_instruments_available_for_trading">8.4.1. Looking Up Instruments Available for Trading</h4>
<div class="paragraph">
<p>For an overview of what instruments can be traded for a given account, the <code>get_instruments</code> function can be used.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">7</span>]: response = ctx.account.instruments(
                    config[<span class="string"><span class="delimiter">'</span><span class="content">oanda_v20</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">account_id</span><span class="delimiter">'</span></span>]) <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">8</span>]: instruments = response.get(<span class="string"><span class="delimiter">'</span><span class="content">instruments</span><span class="delimiter">'</span></span>) <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">9</span>]: instruments[<span class="integer">0</span>].dict()  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">9</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">displayName</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">USD/CHF</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">displayPrecision</span><span class="delimiter">'</span></span>: <span class="integer">5</span>,
         <span class="string"><span class="delimiter">'</span><span class="content">marginRate</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.02</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">maximumOrderUnits</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">100000000.0</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">maximumPositionSize</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">maximumTrailingStopDistance</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1.0</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">minimumTradeSize</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1.0</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">minimumTrailingStopDistance</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0005</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">name</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">USD_CHF</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">pipLocation</span><span class="delimiter">'</span></span>: -<span class="integer">4</span>,
         <span class="string"><span class="delimiter">'</span><span class="content">tradeUnitsPrecision</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
         <span class="string"><span class="delimiter">'</span><span class="content">type</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">CURRENCY</span><span class="delimiter">'</span></span>}

In [<span class="integer">10</span>]: <span class="keyword">for</span> instrument <span class="keyword">in</span> instruments:
            ins = instrument.dict()
            print(<span class="string"><span class="delimiter">'</span><span class="content">%20s | %10s</span><span class="delimiter">'</span></span> % (ins[<span class="string"><span class="delimiter">'</span><span class="content">displayName</span><span class="delimiter">'</span></span>],
                                   ins[<span class="string"><span class="delimiter">'</span><span class="content">name</span><span class="delimiter">'</span></span>]))  <i class="conum" data-value="3"></i><b>(3)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Retrieves the complete list of available instruments.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Shows all the key-value pairs (the <code>dict</code> object) stored for the first instrument.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Prints out the display name and the instrument code (symbol); the list might vary by country of residence of the user.</td>
</tr>
</tbody></table>
</div>
<div class="listingblock">
<div class="content">
<pre>             USD/CHF |    USD_CHF
        Taiwan Index |   TWIX_USD
          Silver/EUR |    XAG_EUR
          Silver/SGD |    XAG_SGD
      West Texas Oil |  WTICO_USD
        US 2Y T-Note | USB02Y_USD
             AUD/HKD |    AUD_HKD
            Gold/CAD |    XAU_CAD
       Australia 200 |  AU200_AUD
             GBP/HKD |    GBP_HKD
             EUR/DKK |    EUR_DKK
             EUR/PLN |    EUR_PLN
        Hong Kong 33 |   HK33_HKD
              UK 100 |  UK100_GBP
             GBP/CHF |    GBP_CHF
             USD/THB |    USD_THB
                Bund | DE10YB_EUR
             USD/SEK |    USD_SEK
             GBP/SGD |    GBP_SGD
             USD/INR |    USD_INR
         UK 10Y Gilt | UK10YB_GBP
             AUD/CHF |    AUD_CHF
             EUR/SGD |    EUR_SGD
          US SPX 500 | SPX500_USD
            Gold/GBP |    XAU_GBP
             CAD/SGD |    CAD_SGD
           France 40 |   FR40_EUR
          Silver/CHF |    XAG_CHF
             EUR/AUD |    EUR_AUD
       US Wall St 30 |   US30_USD
             USD/DKK |    USD_DKK
             USD/HKD |    USD_HKD
             AUD/CAD |    AUD_CAD
       US 10Y T-Note | USB10Y_USD
             EUR/HKD |    EUR_HKD
             ZAR/JPY |    ZAR_JPY
             GBP/PLN |    GBP_PLN
            Platinum |    XPT_USD
             EUR/NZD |    EUR_NZD
             NZD/JPY |    NZD_JPY
             EUR/CAD |    EUR_CAD
          Silver/NZD |    XAG_NZD
             AUD/NZD |    AUD_NZD
             AUD/USD |    AUD_USD
              Silver |    XAG_USD
            Gold/CHF |    XAU_CHF
             SGD/HKD |    SGD_HKD
             EUR/HUF |    EUR_HUF
             USD/CAD |    USD_CAD
            Gold/NZD |    XAU_NZD
          Silver/AUD |    XAG_AUD
             SGD/JPY |    SGD_JPY
             CHF/HKD |    CHF_HKD
        US Russ 2000 | US2000_USD
          Silver/CAD |    XAG_CAD
           Palladium |    XPD_USD
             CHF/JPY |    CHF_JPY
             HKD/JPY |    HKD_JPY
          Silver/JPY |    XAG_JPY
                Gold |    XAU_USD
            Soybeans |  SOYBN_USD
         Natural Gas | NATGAS_USD
             NZD/USD |    NZD_USD
             CHF/ZAR |    CHF_ZAR
             USD/JPY |    USD_JPY
             EUR/TRY |    EUR_TRY
          Silver/HKD |    XAG_HKD
             EUR/NOK |    EUR_NOK
            Gold/HKD |    XAU_HKD
            India 50 |   IN50_USD
           Europe 50 |   EU50_EUR
             SGD/CHF |    SGD_CHF
           China A50 |   CN50_USD
             USD/ZAR |    USD_ZAR
             EUR/USD |    EUR_USD
          Silver/GBP |    XAG_GBP
             EUR/CHF |    EUR_CHF
          US Nas 100 | NAS100_USD
              Copper |    XCU_USD
             NZD/SGD |    NZD_SGD
            Gold/AUD |    XAU_AUD
             CAD/HKD |    CAD_HKD
             CAD/JPY |    CAD_JPY
             GBP/ZAR |    GBP_ZAR
             GBP/JPY |    GBP_JPY
             USD/TRY |    USD_TRY
             USD/HUF |    USD_HUF
             USD/SAR |    USD_SAR
             GBP/CAD |    GBP_CAD
            Gold/JPY |    XAU_JPY
             EUR/CZK |    EUR_CZK
                Corn |   CORN_USD
             AUD/JPY |    AUD_JPY
             EUR/ZAR |    EUR_ZAR
             GBP/USD |    GBP_USD
             USD/MXN |    USD_MXN
      Netherlands 25 |   NL25_EUR
             USD/CNH |    USD_CNH
             AUD/SGD |    AUD_SGD
          Germany 30 |   DE30_EUR
            Gold/SGD |    XAU_SGD
            Gold/EUR |    XAU_EUR
               Wheat |  WHEAT_USD
               Sugar |  SUGAR_USD
             USD/SGD |    USD_SGD
             EUR/SEK |    EUR_SEK
             USD/NOK |    USD_NOK
             EUR/JPY |    EUR_JPY
             EUR/GBP |    EUR_GBP
             USD/CZK |    USD_CZK
             CAD/CHF |    CAD_CHF
             NZD/CHF |    NZD_CHF
             NZD/HKD |    NZD_HKD
        Singapore 30 |   SG30_SGD
             TRY/JPY |    TRY_JPY
        US 5Y T-Note | USB05Y_USD
           Japan 225 |  JP225_USD
     Brent Crude Oil |    BCO_USD
             GBP/NZD |    GBP_NZD
           US T-Bond | USB30Y_USD
            Swiss 20 |   CH20_CHF
         Gold/Silver |    XAU_XAG
             GBP/AUD |    GBP_AUD
             USD/PLN |    USD_PLN
             NZD/CAD |    NZD_CAD</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_backtesting_a_momentum_strategy_on_minute_bars">8.4.2. Backtesting a Momentum Strategy on Minute Bars</h4>
<div class="paragraph">
<p>The example that follows uses the instrument <code>EUR_USD</code> based on the EUR/USD currency pair. The goal is to backtest <em>momentum-based strategies on one-minute bars</em>. The data used is for two days in December 2016. The first step is to <em>retrieve the raw data</em> itself from Oanda.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">11</span>]: <span class="keyword">import</span> <span class="include">datetime</span> <span class="keyword">as</span> dt

In [<span class="integer">12</span>]: suffix = <span class="string"><span class="delimiter">'</span><span class="content">.000000000Z</span><span class="delimiter">'</span></span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">13</span>]: fromTime = dt.datetime(<span class="integer">2016</span>, <span class="integer">12</span>, <span class="integer">8</span>, <span class="integer">8</span>, <span class="integer">0</span>, <span class="integer">0</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">14</span>]: fromTime = fromTime.isoformat(<span class="string"><span class="delimiter">'</span><span class="content">T</span><span class="delimiter">'</span></span>) + suffix  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">15</span>]: fromTime  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">15</span>]: <span class="string"><span class="delimiter">'</span><span class="content">2016-12-08T08:00:00.000000000Z</span><span class="delimiter">'</span></span>

In [<span class="integer">16</span>]: toTime = dt.datetime(<span class="integer">2016</span>, <span class="integer">12</span>, <span class="integer">10</span>, <span class="integer">8</span>, <span class="integer">0</span>, <span class="integer">0</span>)  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">17</span>]: toTime = toTime.isoformat(<span class="string"><span class="delimiter">'</span><span class="content">T</span><span class="delimiter">'</span></span>) + suffix  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">18</span>]: res = ctx.instrument.candles(
                             instrument=<span class="string"><span class="delimiter">'</span><span class="content">EUR_USD</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="7"></i><b>(7)</b>
                             fromTime=fromTime,  <i class="conum" data-value="8"></i><b>(8)</b>
                             toTime=toTime,  <i class="conum" data-value="9"></i><b>(9)</b>
                             granularity=<span class="string"><span class="delimiter">'</span><span class="content">M1</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="10"></i><b>(10)</b>
                             price=<span class="string"><span class="delimiter">'</span><span class="content">A</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="11"></i><b>(11)</b>

CPU times: user <span class="float">58.9</span> ms, sys: <span class="float">8.24</span> ms, total: <span class="float">67.1</span> ms
Wall time: <span class="float">2.03</span> s

In [<span class="integer">19</span>]: res.keys()  <i class="conum" data-value="12"></i><b>(12)</b>
Out[<span class="integer">19</span>]: dict_keys([<span class="string"><span class="delimiter">'</span><span class="content">granularity</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">instrument</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">candles</span><span class="delimiter">'</span></span>])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This string suffix is needed to conform to the Oanda API requirements regarding start and end times.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The <code>fromTime</code> as a <code>datetime</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>This adds the required suffix.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The resulting time string.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The <code>toTime</code> as a <code>datetime</code> object …​</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>…​ and the suffix added.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>The <code>instrument</code> for which data is to be retrieved.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>The <code>fromTime</code> parameter.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>The <code>toTime</code> parameter.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>The granularity, here 1 minute bars.</td>
</tr>
<tr>
<td><i class="conum" data-value="11"></i><b>11</b></td>
<td>The type of data, here ask prices.</td>
</tr>
<tr>
<td><i class="conum" data-value="12"></i><b>12</b></td>
<td>The raw data is returned as a <code>dict</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The second step is to <em>transform the raw data</em> into a <code>DataFrame</code> object.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">20</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

In [<span class="integer">21</span>]: raw = res.get(<span class="string"><span class="delimiter">'</span><span class="content">candles</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">22</span>]: raw = [cs.dict() <span class="keyword">for</span> cs <span class="keyword">in</span> raw]  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">23</span>]: <span class="keyword">for</span> cs <span class="keyword">in</span> raw:
             cs.update(cs[<span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>])
             <span class="keyword">del</span> cs[<span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">23</span>]: raw[<span class="integer">0</span>]  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">23</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1.07651</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">complete</span><span class="delimiter">'</span></span>: <span class="predefined-constant">True</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">h</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1.07655</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">l</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1.07625</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">o</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1.0765</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1481184000.000000000</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">volume</span><span class="delimiter">'</span></span>: <span class="integer">68</span>}

In [<span class="integer">24</span>]: data = pd.DataFrame(raw)  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">25</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>]= pd.to_datetime(data[<span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>], unit=<span class="string"><span class="delimiter">'</span><span class="content">s</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">25</span>]: data = data.set_index(<span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="7"></i><b>(7)</b>

In [<span class="integer">26</span>]: data.index = pd.DatetimeIndex(data.index)  <i class="conum" data-value="8"></i><b>(8)</b>

In [<span class="integer">27</span>]: df.info()  <i class="conum" data-value="9"></i><b>(9)</b>
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">2208</span> entries, <span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">08</span> <span class="integer">08</span>:<span class="octal">00</span>:<span class="octal">00</span> to <span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">09</span> <span class="integer">21</span>:<span class="integer">59</span>:<span class="octal">00</span>
Data columns (total <span class="integer">6</span> columns):
c           <span class="integer">2208</span> non-null <span class="predefined">object</span>
complete    <span class="integer">2208</span> non-null <span class="predefined">bool</span>
h           <span class="integer">2208</span> non-null <span class="predefined">object</span>
l           <span class="integer">2208</span> non-null <span class="predefined">object</span>
o           <span class="integer">2208</span> non-null <span class="predefined">object</span>
volume      <span class="integer">2208</span> non-null int64
dtypes: <span class="predefined">bool</span>(<span class="integer">1</span>), int64(<span class="integer">1</span>), <span class="predefined">object</span>(<span class="integer">4</span>)
memory usage: <span class="float">105.7</span>+ KB

In [<span class="integer">28</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">l</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">h</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">o</span><span class="delimiter">'</span></span>]] = data[
            [<span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">l</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">h</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">o</span><span class="delimiter">'</span></span>]].astype(<span class="string"><span class="delimiter">'</span><span class="content">float64</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="10"></i><b>(10)</b>

In [<span class="integer">29</span>]: data = data.rename(columns={<span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>:<span class="string"><span class="delimiter">'</span><span class="content">closeAsk</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">l</span><span class="delimiter">'</span></span>:<span class="string"><span class="delimiter">'</span><span class="content">lowAsk</span><span class="delimiter">'</span></span>,
                                     <span class="string"><span class="delimiter">'</span><span class="content">h</span><span class="delimiter">'</span></span>:<span class="string"><span class="delimiter">'</span><span class="content">highAsk</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">o</span><span class="delimiter">'</span></span>:<span class="string"><span class="delimiter">'</span><span class="content">openAsk</span><span class="delimiter">'</span></span> })  <i class="conum" data-value="11"></i><b>(11)</b>

In [<span class="integer">30</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">closeAsk</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">volume</span><span class="delimiter">'</span></span>]].head()  <i class="conum" data-value="12"></i><b>(12)</b>
Out[<span class="integer">30</span>]:
                    closeAsk  volume
time
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">08</span> <span class="integer">08</span>:<span class="octal">00</span>:<span class="octal">00</span> <span class="float">1.07651</span>   <span class="integer">68</span>
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">08</span> <span class="integer">08</span>:<span class="octal">01</span>:<span class="octal">00</span> <span class="float">1.07626</span>   <span class="integer">37</span>
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">08</span> <span class="integer">08</span>:<span class="octal">02</span>:<span class="octal">00</span> <span class="float">1.07638</span>   <span class="integer">28</span>
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">08</span> <span class="integer">08</span>:<span class="octal">03</span>:<span class="octal">00</span> <span class="float">1.07641</span>   <span class="integer">17</span>
<span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">08</span> <span class="integer">08</span>:<span class="octal">04</span>:<span class="octal">00</span> <span class="float">1.07649</span>   <span class="integer">16</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Transforms the raw data first …​</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>…​ into a <code>list</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Updates all the single <code>dict</code> objects.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Shows the resulting first <code>dict</code> object (first one minute bar data set).</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Creates a new <code>DataFrame</code> object out of the <code>list</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Transforms the entries in the <code>time</code> column to <code>datetime</code> objects.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Sets the transformed <code>time</code> column as the index.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>The index is transformed to a <code>DatetimeIndex</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>A total of more than 2,000 data rows is retrieved for two days.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>The data in the <code>c, l, h, o</code> columns is tranformed to <code>float</code> values and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="11"></i><b>11</b></td>
<td>…​ the respective columns are renamed for better readability.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The third step is to <em>implement the vectorized backtesting</em>. The idea is to simultaneously backtest a couple of momentum strategies. The code is straightforward and concise (see also <a href="#vectorized_backtesting">Mastering Vectorized Backtesting</a>). For simplicity, the code uses <code>closeAsk</code> values only.<sup class="footnote">[<a id="_footnoteref_31" class="footnote" href="#_footnote_31" title="View footnote.">31</a>]</sup></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">31</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

In [<span class="integer">32</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(data[<span class="string"><span class="delimiter">'</span><span class="content">closeAsk</span><span class="delimiter">'</span></span>] /
                                  data[<span class="string"><span class="delimiter">'</span><span class="content">closeAsk</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>))  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">33</span>]: cols = []  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">34</span>]: <span class="keyword">for</span> momentum <span class="keyword">in</span> [<span class="integer">15</span>, <span class="integer">30</span>, <span class="integer">60</span>, <span class="integer">120</span>]:  <i class="conum" data-value="3"></i><b>(3)</b>
             col = <span class="string"><span class="delimiter">'</span><span class="content">position_%s</span><span class="delimiter">'</span></span> % momentum  <i class="conum" data-value="4"></i><b>(4)</b>
             df[col] = np.sign(data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].rolling(momentum).mean())  <i class="conum" data-value="5"></i><b>(5)</b>
             cols.append(col)  <i class="conum" data-value="6"></i><b>(6)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the log returns based on the <code>closeAsk</code> values.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Instantiates an empty <code>list</code> object to collect column names.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Defines the time interval in minute bars for the momentum strategy.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Defines the name of the column to be used for storage in the <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Adds the strategy positionings as a new column.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Appends the name of the column to the <code>list</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The final step is the <em>derivation and plotting of the performances</em> of the different momentum strategies. The plot <a href="#oanda_plot_1">Performance of different momentum strategies for <code>EUR_USD</code> instrument (minute bars)</a> shows the performances graphically and compares it to the performance of the instrument itself.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">35</span>]: strats = [<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">36</span>]: <span class="keyword">for</span> col <span class="keyword">in</span> cols:  <i class="conum" data-value="2"></i><b>(2)</b>
             strat = <span class="string"><span class="delimiter">'</span><span class="content">strategy_%s</span><span class="delimiter">'</span></span> % col.split(<span class="string"><span class="delimiter">'</span><span class="content">_</span><span class="delimiter">'</span></span>)[<span class="integer">1</span>]  <i class="conum" data-value="3"></i><b>(3)</b>
             data[strat] = data[col].shift(<span class="integer">1</span>) * data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="4"></i><b>(4)</b>
             strats.append(strat)  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">37</span>]: data[strats].dropna().cumsum().apply(np.exp).plot()  <i class="conum" data-value="6"></i><b>(6)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Defines another <code>list</code> object to store the column names to be plotter later on.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Iterates of the columns with the positionings for the different strategies.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Derives the name for the new column in which the strategy performance is stored.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Calculates the log returns for the different strategies and stores them as new columns.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Appends the column names to the <code>list</code> object for later plotting.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Plots the cumulative performances for the instrument and the strategies.</td>
</tr>
</tbody></table>
</div>
<div id="oanda_plot_1" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/oanda_plot_1.png" alt="oanda plot 1">
</div>
<div class="title">Figure 54. Performance of different momentum strategies for <code>EUR_USD</code> instrument (minute bars)</div>
</div>
</div>
<div class="sect3">
<h4 id="_factoring_in_leverage_and_margin">8.4.3. Factoring In Leverage and Margin</h4>
<div class="paragraph">
<p>In general, when you buy a share of a stock for, say, 100 USD the 
profit and loss (P&amp;L) calculations are straightforward: the stock 
price rises by 1 USD, you earn 1 USD (unrealized profit); the stock 
price falls by 1 USD, you loose 1 USD (unrealized loss). If you buy 10 
shares, just multiply the results by 10.</p>
</div>
<div class="paragraph">
<p>Trading CFDs on the Oanda platform involves leverage and margin. This
 significantly influences the P&amp;L calculation. For an introduction 
to and overview of this topic refer to <a href="https://oanda.secure.force.com/AnswersSupport?urlName=OANDA-fxTrade-Margin-Rules-1436196464450&amp;language=en_US" target="_blank">Oanda fxTrade Margin Rules</a>. A simple example can illustrate the major aspects in this context.</p>
</div>
<div class="paragraph">
<p>Consider an algorithmic trader wants to trade the <code>EUR_USD</code>
 instrument on the Oanda platform and wants to get a long exposure of 
10,000 USD at a ask price of 1.06. Without leverage and margin, the 
trader (or Python program) would buy 10,000 units of the CFD.<sup class="footnote">[<a id="_footnoteref_32" class="footnote" href="#_footnote_32" title="View footnote.">32</a>]</sup>
 If the price of the instrument (exchange rate) rises to 1.065 (as the 
midpoint rate between bid and ask prices), the absolute profit is 10,000
 x 0.005 = 50 or 0.5%.</p>
</div>
<div class="paragraph">
<p>What impact do leverage and margining then have? Suppose the 
algorithmic trader chooses a leverage ratio of 20:1 which translates 
into a 5% margin (= 100% / 20). This in turn implies that the trader 
only needs to put up a margin upfront of 10,000 USD x 5% = 500 USD 
(rounded) to get the same exposure. If the price of the instrument then 
rises to 1.065, the absolute profit stays the same at 50 USD but the 
relative profit rises to 50 / 500 USD = 10%. The return is considerably 
amplified by a factor of 20 — this is the benefit of leverage when 
things go as desired.</p>
</div>
<div class="paragraph">
<p>What happens if things go south? Assume the instrument price drops to
 1.04 (as the midpoint rate between bid and ask prices) leading to a 
loss of 10,000 x (1.04 - 1.06) = -200 USD. The relative loss now is -200
 / 500 USD = -40% (rounded). If the account the algorithmic trader is 
trading with has less than 200 USD left in liquidity, the position needs
 to be closed out since the (regulatory) margin requirements cannot be 
met anymore. If losses eat up the margin completely, additional funds 
need to be allocated as margin to keep the trade alive.</p>
</div>
<div class="paragraph">
<p><a href="#oanda_plot_2">Performance of momentum strategies for <code>EUR_USD</code> instrument with 20:1 leverage (minute bars)</a>
 shows the amplifying effect on the performance of the momentum 
strategies for a leverage ratio of 20:1. The initial margin of 5% 
suffices to cover potential losses since it is not eaten up even in the 
worst case depicted.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">38</span>]: data[strats].dropna().cumsum().apply(
                    <span class="keyword">lambda</span> x: x * <span class="integer">20</span>).apply(np.exp).plot()  <i class="conum" data-value="1"></i><b>(1)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Multiplies the log returns by a factor of 20 according to the leverage ratio assumed.</td>
</tr>
</tbody></table>
</div>
<div id="oanda_plot_2" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/oanda_plot_2.png" alt="oanda plot 2">
</div>
<div class="title">Figure 55. Performance of momentum strategies for <code>EUR_USD</code> instrument with 20:1 leverage (minute bars)</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="oanda_streaming">8.5. Working with Streaming Data</h3>
<div class="paragraph">
<p>Working with streaming data is again made simple and straightforward by the Python API wrapper package <code>v20</code>.
 The package takes care of the socket communication such that the trader
 only needs to decide what to do with the streaming data. A new <code>Context</code> object is needed via which the data is streamed and that allows it to be printed, for instance.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">39</span>]: ctx_stream = v20.Context(
                        <span class="string"><span class="delimiter">'</span><span class="content">stream-fxpractice.oanda.com</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="1"></i><b>(1)</b>
                        <span class="integer">443</span>,
                        <span class="predefined-constant">True</span>,
                        application=<span class="string"><span class="delimiter">'</span><span class="content">sample_code</span><span class="delimiter">'</span></span>,
                        token=config[<span class="string"><span class="delimiter">'</span><span class="content">oanda_v20</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">access_token</span><span class="delimiter">'</span></span>],
                        datetime_format=<span class="string"><span class="delimiter">'</span><span class="content">RFC3339</span><span class="delimiter">'</span></span>)

In [<span class="integer">40</span>]: response = ctx_stream.pricing.stream(  <i class="conum" data-value="2"></i><b>(2)</b>
                        config[<span class="string"><span class="delimiter">'</span><span class="content">oanda_v20</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">account_id</span><span class="delimiter">'</span></span>],
                        snapshot=<span class="predefined-constant">True</span>,
                        instruments=<span class="string"><span class="delimiter">'</span><span class="content">EUR_USD</span><span class="delimiter">'</span></span>)

In [<span class="integer">41</span>]: i = <span class="integer">0</span>
         <span class="keyword">for</span> msg_type, msg <span class="keyword">in</span> response.parts():
             <span class="keyword">if</span> msg_type == <span class="string"><span class="delimiter">'</span><span class="content">pricing.Price</span><span class="delimiter">'</span></span>:  <i class="conum" data-value="3"></i><b>(3)</b>
                 i += <span class="integer">1</span>
                 output = <span class="string"><span class="delimiter">'</span><span class="content">%s (%s) %s/%s</span><span class="delimiter">'</span></span> % (msg.instrument,
                      msg.time, msg.bids[<span class="integer">0</span>].price,  msg.asks[<span class="integer">0</span>].price)  <i class="conum" data-value="4"></i><b>(4)</b>
                 print(output)  <i class="conum" data-value="4"></i><b>(4)</b>
             <span class="keyword">if</span> i == <span class="integer">10</span>:  <i class="conum" data-value="5"></i><b>(5)</b>
                 <span class="keyword">break</span>

EUR_USD (<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span>T07:<span class="integer">29</span>:<span class="float">21.609190352</span>Z) <span class="float">1.06278</span>/<span class="float">1.06289</span>
EUR_USD (<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span>T07:<span class="integer">30</span>:<span class="float">20.886015082</span>Z) <span class="float">1.06277</span>/<span class="float">1.06289</span>
EUR_USD (<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span>T07:<span class="integer">30</span>:<span class="float">21.383923379</span>Z) <span class="float">1.06278</span>/<span class="float">1.06289</span>
EUR_USD (<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span>T07:<span class="integer">30</span>:<span class="float">32.443304869</span>Z) <span class="float">1.06282</span>/<span class="float">1.06292</span>
EUR_USD (<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span>T07:<span class="integer">30</span>:<span class="float">32.511259917</span>Z) <span class="float">1.06281</span>/<span class="float">1.06293</span>
EUR_USD (<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span>T07:<span class="integer">30</span>:<span class="float">32.730458238</span>Z) <span class="float">1.06285</span>/<span class="float">1.06296</span>
EUR_USD (<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span>T07:<span class="integer">30</span>:<span class="float">51.145812173</span>Z) <span class="float">1.0629</span>/<span class="float">1.06301</span>
EUR_USD (<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span>T07:<span class="integer">30</span>:<span class="float">55.116525242</span>Z) <span class="float">1.06295</span>/<span class="float">1.06307</span>
EUR_USD (<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span>T07:<span class="integer">30</span>:<span class="float">58.026979919</span>Z) <span class="float">1.06294</span>/<span class="float">1.06305</span>
EUR_USD (<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span>T07:<span class="integer">30</span>:<span class="float">59.119811116</span>Z) <span class="float">1.06293</span>/<span class="float">1.06305</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This <code>Context</code> object accesses the streaming API.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Opens the socket connection to the streaming API.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>From the data stream, the code picks out new pricing data.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Prints out elements of the retrieved data sets.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>If 10 data sets have been retrieved and printed, the loop is finished.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="oanda_trading">8.6. Implementing Trading Strategies in Real-Time</h3>
<div class="paragraph">
<p>This section presents a custom class that automatically trades the <code>EUR_USD</code> instrument on the Oanda platform based on a momentum strategy. It is called <code>MomentumTrader</code> and is presented in <a href="#oanda_momentum_trader">Oanda custom streaming class that automatically trades a momentum strategy</a>. The following walks through the class line by line, beginning with the <code>__init__</code> method.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="keyword">import</span> <span class="include">v20</span>
<span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np
<span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd
<span class="keyword">import</span> <span class="include">configparser</span>

config = configparser.ConfigParser()
config.read(<span class="string"><span class="delimiter">'</span><span class="content">../pyalgo.cfg</span><span class="delimiter">'</span></span>)

account_id = config[<span class="string"><span class="delimiter">'</span><span class="content">oanda_v20</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">account_id</span><span class="delimiter">'</span></span>]
access_token = config[<span class="string"><span class="delimiter">'</span><span class="content">oanda_v20</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">access_token</span><span class="delimiter">'</span></span>]


<span class="keyword">class</span> <span class="class">MomentumTrader</span>(<span class="predefined">object</span>):
    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, momentum, instrument, units, *args, **kwargs):

        <span class="predefined-constant">self</span>.ticks = <span class="integer">0</span>  <i class="conum" data-value="1"></i><b>(1)</b>
        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>  <i class="conum" data-value="2"></i><b>(2)</b>
        <span class="predefined-constant">self</span>.data = pd.DataFrame()  <i class="conum" data-value="3"></i><b>(3)</b>
        <span class="predefined-constant">self</span>.momentum = momentum  <i class="conum" data-value="4"></i><b>(4)</b>
        <span class="predefined-constant">self</span>.account_id = account_id  <i class="conum" data-value="5"></i><b>(5)</b>
        <span class="predefined-constant">self</span>.instrument = instrument  <i class="conum" data-value="6"></i><b>(6)</b>
        <span class="predefined-constant">self</span>.units = units  <i class="conum" data-value="7"></i><b>(7)</b>
        <span class="predefined-constant">self</span>.ctx = v20.Context(  <i class="conum" data-value="8"></i><b>(8)</b>
            <span class="string"><span class="delimiter">'</span><span class="content">api-fxpractice.oanda.com</span><span class="delimiter">'</span></span>,
            <span class="integer">443</span>,
            <span class="predefined-constant">True</span>,
            application=<span class="string"><span class="delimiter">'</span><span class="content">sample_code</span><span class="delimiter">'</span></span>,
            token=access_token,
            datetime_format=<span class="string"><span class="delimiter">'</span><span class="content">RFC3339</span><span class="delimiter">'</span></span>
        )
        <span class="predefined-constant">self</span>.ctx_stream = v20.Context(  <i class="conum" data-value="9"></i><b>(9)</b>
            <span class="string"><span class="delimiter">'</span><span class="content">stream-fxpractice.oanda.com</span><span class="delimiter">'</span></span>,
            <span class="integer">443</span>,
            <span class="predefined-constant">True</span>,
            application=<span class="string"><span class="delimiter">'</span><span class="content">sample_code</span><span class="delimiter">'</span></span>,
            token=access_token,
            datetime_format=<span class="string"><span class="delimiter">'</span><span class="content">RFC3339</span><span class="delimiter">'</span></span>
        )</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Counter for the number of ticks retrieved.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Initial position value (i.e. market neutral).</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The <code>DataFrame</code> object to collect the tick data.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The <code>account_id</code> of the (sub-)account to be used.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The <code>instrument</code> to be traded.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The numbers of <code>units</code> to be traded.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>The standard <code>Context</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>The streaming <code>Context</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>A necessary prerequisite to automatically trade an instrument on 
Oanda is the ability to programmatically place buy and sell orders. To 
this end, the class defines the <code>create_order</code> method.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">create_order</span>(<span class="predefined-constant">self</span>, units):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Places orders with Oanda. </span><span class="delimiter">'''</span></span>
        request = <span class="predefined-constant">self</span>.ctx.order.market(
            <span class="predefined-constant">self</span>.account_id,  <i class="conum" data-value="1"></i><b>(1)</b>
            instrument=<span class="predefined-constant">self</span>.instrument,  <i class="conum" data-value="2"></i><b>(2)</b>
            units=units,  <i class="conum" data-value="3"></i><b>(3)</b>
        )
        order = request.get(<span class="string"><span class="delimiter">'</span><span class="content">orderFillTransaction</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="4"></i><b>(4)</b>
        print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="char">\n</span><span class="delimiter">'</span></span>, order.dict(), <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="5"></i><b>(5)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The (sub-)account for which the order shall be placed.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The instruments for which the order is.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The number of units to be ordered (positive=buy order or negative=sell order).</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Places the order.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Prints the order information.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The <code>start</code> method starts the streaming of the data and triggers actions to be taken when new data arrives.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">start</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Starts the streaming of data and the triggering of actions. </span><span class="delimiter">'''</span></span>
        response = <span class="predefined-constant">self</span>.ctx_stream.pricing.stream(
            <span class="predefined-constant">self</span>.account_id,
            snapshot=<span class="predefined-constant">True</span>,
            instruments=<span class="predefined-constant">self</span>.instrument
        )  <i class="conum" data-value="1"></i><b>(1)</b>
        <span class="keyword">for</span> msg_type, msg <span class="keyword">in</span> response.parts():
            <span class="keyword">if</span> msg_type == <span class="string"><span class="delimiter">'</span><span class="content">pricing.Price</span><span class="delimiter">'</span></span>:
                <span class="predefined-constant">self</span>.on_success(msg.time, msg.asks[<span class="integer">0</span>].price)  <i class="conum" data-value="2"></i><b>(2)</b>
            <span class="keyword">if</span> <span class="predefined-constant">self</span>.ticks == <span class="integer">250</span>:  <i class="conum" data-value="3"></i><b>(3)</b>
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:
                    <span class="predefined-constant">self</span>.create_order(-<span class="predefined-constant">self</span>.units)  <i class="conum" data-value="4"></i><b>(4)</b>
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == -<span class="integer">1</span>:
                    <span class="predefined-constant">self</span>.create_order(<span class="predefined-constant">self</span>.units)  <i class="conum" data-value="5"></i><b>(5)</b>
                <span class="keyword">return</span> <span class="string"><span class="delimiter">'</span><span class="content">Finished.</span><span class="delimiter">'</span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Opens the socket communication to stream the real-time data.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Whenever there is new pricing information, the <code>on_success</code> method is called, providing time and price data.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>If a certain (arbitrary) number of ticks is retrieved …​</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>…​ the long position is closed out (via sell order).</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>…​ the short position is closed out (via buy order).</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The major method is the <code>on_success</code> method which implements the trading logic for the momentum strategy.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">on_success</span>(<span class="predefined-constant">self</span>, time, ask):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Takes actions when new tick data arrives. </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.ticks += <span class="integer">1</span>  <i class="conum" data-value="1"></i><b>(1)</b>
        print(<span class="predefined-constant">self</span>.ticks, end=<span class="string"><span class="delimiter">'</span><span class="content"> </span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>
        <span class="predefined-constant">self</span>.data = <span class="predefined-constant">self</span>.data.append(
            pd.DataFrame({<span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>: [time], <span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>: [ask]}))  <i class="conum" data-value="2"></i><b>(2)</b>
        <span class="predefined-constant">self</span>.data.index = pd.DatetimeIndex(<span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>])  <i class="conum" data-value="3"></i><b>(3)</b>
        resam = <span class="predefined-constant">self</span>.data.resample(<span class="string"><span class="delimiter">'</span><span class="content">1min</span><span class="delimiter">'</span></span>).last()  <i class="conum" data-value="4"></i><b>(4)</b>
        <span class="comment"># resam = resam.ffill()  </span><i class="conum" data-value="5"></i><b>(5)</b>
        resam[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(resam[<span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>] / resam[<span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>))  <i class="conum" data-value="6"></i><b>(6)</b>
        resam[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.sign(
            resam[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].rolling(<span class="predefined-constant">self</span>.momentum).mean())  <i class="conum" data-value="7"></i><b>(7)</b>
        <span class="comment"># print(resam[['ask', 'returns', 'position']].tail())  </span><i class="conum" data-value="8"></i><b>(8)</b>

        <span class="keyword">if</span> resam[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>] == <span class="integer">1</span>:  <i class="conum" data-value="9"></i><b>(9)</b>
            <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">0</span>:  <i class="conum" data-value="10"></i><b>(10)</b>
                <span class="predefined-constant">self</span>.create_order(<span class="predefined-constant">self</span>.units)  <i class="conum" data-value="11"></i><b>(11)</b>
            <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == -<span class="integer">1</span>:  <i class="conum" data-value="12"></i><b>(12)</b>
                <span class="predefined-constant">self</span>.create_order(<span class="predefined-constant">self</span>.units * <span class="integer">2</span>)  <i class="conum" data-value="13"></i><b>(13)</b>
            <span class="predefined-constant">self</span>.position = <span class="integer">1</span>  <i class="conum" data-value="14"></i><b>(14)</b>
        <span class="keyword">elif</span> resam[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>] == -<span class="integer">1</span>:  <i class="conum" data-value="15"></i><b>(15)</b>
            <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">0</span>:  <i class="conum" data-value="16"></i><b>(16)</b>
                <span class="predefined-constant">self</span>.create_order(-<span class="predefined-constant">self</span>.units)  <i class="conum" data-value="17"></i><b>(17)</b>
            <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:  <i class="conum" data-value="18"></i><b>(18)</b>
                <span class="predefined-constant">self</span>.create_order(-<span class="predefined-constant">self</span>.units * <span class="integer">2</span>)  <i class="conum" data-value="19"></i><b>(19)</b>
            <span class="predefined-constant">self</span>.position = -<span class="integer">1</span>  <i class="conum" data-value="20"></i><b>(20)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Increases the number of ticks by 1 and prints it.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The new raw data is appended to <code>self.data</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The index is transformed to a <code>DatetimeIndex</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The raw (tick) data is resampled to a time interval of five seconds, taking the last available value as the relevant one.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>In case, empty intervals are filled to have a complete data set (if desired).</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>This calculates the log returns given the resampled data.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>The positioning is derived according to the momentum strategy (via an online algorithm).</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Prints out the last couple of rows (if desired).</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>Checks whether the latest positioning (“signal”) is 1 (long).</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>If the current market position is 0 (neutral) …​</td>
</tr>
<tr>
<td><i class="conum" data-value="11"></i><b>11</b></td>
<td>…​ a buy order for <code>self.units</code> is initiated.</td>
</tr>
<tr>
<td><i class="conum" data-value="12"></i><b>12</b></td>
<td>If it is -1 (short) …​</td>
</tr>
<tr>
<td><i class="conum" data-value="13"></i><b>13</b></td>
<td>…​ a buy order for <code>2 * self.units</code> is initiated.</td>
</tr>
<tr>
<td><i class="conum" data-value="14"></i><b>14</b></td>
<td>The market position <code>self.position</code> is set to 1 (long).</td>
</tr>
<tr>
<td><i class="conum" data-value="15"></i><b>15</b></td>
<td>Checks whether the latest positioning (“signal”) is -1 (short).</td>
</tr>
<tr>
<td><i class="conum" data-value="16"></i><b>16</b></td>
<td>If the current market position is 0 (neutral) …​</td>
</tr>
<tr>
<td><i class="conum" data-value="17"></i><b>17</b></td>
<td>…​ a sell order for <code>-self.units</code> is initiated.</td>
</tr>
<tr>
<td><i class="conum" data-value="18"></i><b>18</b></td>
<td>If it is 1 (long) …​</td>
</tr>
<tr>
<td><i class="conum" data-value="19"></i><b>19</b></td>
<td>…​ a sell order for <code>-2 * self.units</code> is initiated.</td>
</tr>
<tr>
<td><i class="conum" data-value="20"></i><b>20</b></td>
<td>The market position <code>self.position</code> is set to -1 (short).</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Based on this class, getting started with automated, algorithmic 
trading is just three lines of code. The code below initiates an 
automated trading session.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">MomentTrader_v20</span> <span class="keyword">as</span> MT

In [<span class="integer">2</span>]: mt = MT.MomentumTrader(momentum=<span class="integer">6</span>,  <i class="conum" data-value="1"></i><b>(1)</b>
                               instrument=<span class="string"><span class="delimiter">'</span><span class="content">EUR_USD</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="2"></i><b>(2)</b>
                               units=<span class="integer">50000</span>)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">3</span>]: mt.start()</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The <code>momentum</code> parameter is defined which is applied to the resampled data intervals.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The <code>instrument</code> parameters is specified.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The <code>units</code> parameter is set.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Below is an example output showing the number of ticks received and also the trades executed.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133

 {'pl': '0.0', 'instrument': 'EUR_USD', 'units': '-50000.0', 'tradeOpened': {'units': '-50000.0', 'tradeID': '492'}, 'type': 'ORDER_FILL', 'userID': 5516121, 'financing': '0.0', 'id': '492', 'accountBalance': '98606.3044', 'orderID': '491', 'batchID': '491', 'price': '1.06241', 'reason': 'MARKET_ORDER', 'accountID': '101-004-5516121-001', 'time': '2017-03-15T09:54:05.007932319Z'}

134 135 136 137

 {'pl': '-7.5298', 'instrument': 'EUR_USD', 'units': '100000.0', 'tradeOpened': {'units': '50000.0', 'tradeID': '494'}, 'type': 'ORDER_FILL', 'userID': 5516121, 'financing': '0.0', 'id': '494', 'accountBalance': '98598.7746', 'orderID': '493', 'batchID': '493', 'price': '1.06257', 'reason': 'MARKET_ORDER', 'accountID': '101-004-5516121-001', 'time': '2017-03-15T09:54:11.445416357Z', 'tradesClosed': [{'financing': '0.0', 'units': '50000.0', 'realizedPL': '-7.5298', 'tradeID': '492'}]}

138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156

 {'pl': '-7.0594', 'instrument': 'EUR_USD', 'units': '-100000.0', 'tradeOpened': {'units': '-50000.0', 'tradeID': '496'}, 'type': 'ORDER_FILL', 'userID': 5516121, 'financing': '-0.0004', 'id': '496', 'accountBalance': '98591.7148', 'orderID': '495', 'batchID': '495', 'price': '1.06242', 'reason': 'MARKET_ORDER', 'accountID': '101-004-5516121-001', 'time': '2017-03-15T09:54:52.780004165Z', 'tradesClosed': [{'financing': '-0.0004', 'units': '-50000.0', 'realizedPL': '-7.0594', 'tradeID': '494'}]}

157 158 159 160

 {'pl': '-3.7651', 'instrument': 'EUR_USD', 'units': '100000.0', 'tradeOpened': {'units': '50000.0', 'tradeID': '498'}, 'type': 'ORDER_FILL', 'userID': 5516121, 'financing': '0.0', 'id': '498', 'accountBalance': '98587.9497', 'orderID': '497', 'batchID': '497', 'price': '1.0625', 'reason': 'MARKET_ORDER', 'accountID': '101-004-5516121-001', 'time': '2017-03-15T09:55:00.232549066Z', 'tradesClosed': [{'financing': '0.0', 'units': '50000.0', 'realizedPL': '-3.7651', 'tradeID': '496'}]}

161 162 163 164

 {'pl': '-9.4135', 'instrument': 'EUR_USD', 'units': '-100000.0', 'tradeOpened': {'units': '-50000.0', 'tradeID': '500'}, 'type': 'ORDER_FILL', 'userID': 5516121, 'financing': '-0.0001', 'id': '500', 'accountBalance': '98578.5361', 'orderID': '499', 'batchID': '499', 'price': '1.0623', 'reason': 'MARKET_ORDER', 'accountID': '101-004-5516121-001', 'time': '2017-03-15T09:55:09.045056353Z', 'tradesClosed': [{'financing': '-0.0001', 'units': '-50000.0', 'realizedPL': '-9.4135', 'tradeID': '498'}]}

165 166 167 168 169

 {'pl': '-5.6481', 'instrument': 'EUR_USD', 'units': '100000.0', 'tradeOpened': {'units': '50000.0', 'tradeID': '502'}, 'type': 'ORDER_FILL', 'userID': 5516121, 'financing': '0.0', 'id': '502', 'accountBalance': '98572.888', 'orderID': '501', 'batchID': '501', 'price': '1.06242', 'reason': 'MARKET_ORDER', 'accountID': '101-004-5516121-001', 'time': '2017-03-15T09:55:11.251494245Z', 'tradesClosed': [{'financing': '0.0', 'units': '50000.0', 'realizedPL': '-5.6481', 'tradeID': '500'}]}

170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250

 {'pl': '26.3381', 'instrument': 'EUR_USD', 'units': '-50000.0', 'type': 'ORDER_FILL', 'userID': 5516121, 'financing': '-0.0026', 'id': '504', 'accountBalance': '98599.2235', 'orderID': '503', 'batchID': '503', 'price': '1.06298', 'reason': 'MARKET_ORDER', 'accountID': '101-004-5516121-001', 'time': '2017-03-15T09:59:16.758814672Z', 'tradesClosed': [{'financing': '-0.0026', 'units': '-50000.0', 'realizedPL': '26.3381', 'tradeID': '502'}]}</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="oanda_account">8.7. Retrieving Account Information</h3>
<div class="paragraph">
<p>With regard to account information, transaction history, etc. the 
Oanda RESTful API is also quite powerful and flexible. For example, 
after the execution of the momentum strategy in the previous section, 
the algorithmic trader might want to inspect the current balance of the 
trading account. This is possible via the <code>account.summary</code> method.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">4</span>]: response = ctx.account.summary(account_id)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">5</span>]: acc_summary = response.get(<span class="string"><span class="delimiter">'</span><span class="content">account</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">6</span>]: acc_summary.dict()  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">6</span>]:
{<span class="string"><span class="delimiter">'</span><span class="content">NAV</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">98599.2235</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">alias</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">Primary</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">balance</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">98599.2235</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">createdByUserID</span><span class="delimiter">'</span></span>: <span class="integer">5516121</span>,
 <span class="string"><span class="delimiter">'</span><span class="content">createdTime</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">2017-03-08T16:28:21.276100637Z</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">currency</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">EUR</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">hedgingEnabled</span><span class="delimiter">'</span></span>: <span class="predefined-constant">False</span>,
 <span class="string"><span class="delimiter">'</span><span class="content">id</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">101-004-5516121-001</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">lastTransactionID</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">504</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginAvailable</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">98599.2235</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginCallMarginUsed</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginCallPercent</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginCloseoutMarginUsed</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginCloseoutNAV</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">98599.2235</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginCloseoutPercent</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginCloseoutUnrealizedPL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginRate</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.02</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginUsed</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">openPositionCount</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
 <span class="string"><span class="delimiter">'</span><span class="content">openTradeCount</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
 <span class="string"><span class="delimiter">'</span><span class="content">pendingOrderCount</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
 <span class="string"><span class="delimiter">'</span><span class="content">pl</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">-1400.4954</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">positionValue</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">unrealizedPL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">withdrawalLimit</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">98599.2235</span><span class="delimiter">'</span></span>}</code></pre>
</div>
</div>
<div class="paragraph">
<p>A bit more detailed overview is obtained via the <code>account.get</code> method.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">7</span>]: response = ctx.account.get(account_id)

In [<span class="integer">8</span>]: acc_full = response.get(<span class="string"><span class="delimiter">'</span><span class="content">account</span><span class="delimiter">'</span></span>)

In [<span class="integer">9</span>]: acc_full.dict()
Out[<span class="integer">9</span>]:
{<span class="string"><span class="delimiter">'</span><span class="content">NAV</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">98599.2235</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">alias</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">Primary</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">balance</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">98599.2235</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">createdByUserID</span><span class="delimiter">'</span></span>: <span class="integer">5516121</span>,
 <span class="string"><span class="delimiter">'</span><span class="content">createdTime</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">2017-03-08T16:28:21.276100637Z</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">currency</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">EUR</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">hedgingEnabled</span><span class="delimiter">'</span></span>: <span class="predefined-constant">False</span>,
 <span class="string"><span class="delimiter">'</span><span class="content">id</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">101-004-5516121-001</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">lastTransactionID</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">504</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginAvailable</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">98599.2235</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginCallMarginUsed</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginCallPercent</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginCloseoutMarginUsed</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginCloseoutNAV</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">98599.2235</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginCloseoutPercent</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginCloseoutUnrealizedPL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginRate</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.02</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">marginUsed</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">openPositionCount</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
 <span class="string"><span class="delimiter">'</span><span class="content">openTradeCount</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
 <span class="string"><span class="delimiter">'</span><span class="content">orders</span><span class="delimiter">'</span></span>: [],
 <span class="string"><span class="delimiter">'</span><span class="content">pendingOrderCount</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
 <span class="string"><span class="delimiter">'</span><span class="content">pl</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">-1400.4954</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">positionValue</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">positions</span><span class="delimiter">'</span></span>: [{<span class="string"><span class="delimiter">'</span><span class="content">instrument</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">EUR_USD</span><span class="delimiter">'</span></span>,
   <span class="string"><span class="delimiter">'</span><span class="content">long</span><span class="delimiter">'</span></span>: {<span class="string"><span class="delimiter">'</span><span class="content">pl</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">-311.4343</span><span class="delimiter">'</span></span>,
    <span class="string"><span class="delimiter">'</span><span class="content">resettablePL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">-311.4343</span><span class="delimiter">'</span></span>,
    <span class="string"><span class="delimiter">'</span><span class="content">units</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
    <span class="string"><span class="delimiter">'</span><span class="content">unrealizedPL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>},
   <span class="string"><span class="delimiter">'</span><span class="content">pl</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">-556.4954</span><span class="delimiter">'</span></span>,
   <span class="string"><span class="delimiter">'</span><span class="content">resettablePL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">-556.4954</span><span class="delimiter">'</span></span>,
   <span class="string"><span class="delimiter">'</span><span class="content">short</span><span class="delimiter">'</span></span>: {<span class="string"><span class="delimiter">'</span><span class="content">pl</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">-245.0611</span><span class="delimiter">'</span></span>,
    <span class="string"><span class="delimiter">'</span><span class="content">resettablePL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">-245.0611</span><span class="delimiter">'</span></span>,
    <span class="string"><span class="delimiter">'</span><span class="content">units</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
    <span class="string"><span class="delimiter">'</span><span class="content">unrealizedPL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>},
   <span class="string"><span class="delimiter">'</span><span class="content">unrealizedPL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>},
  {<span class="string"><span class="delimiter">'</span><span class="content">instrument</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">DE30_EUR</span><span class="delimiter">'</span></span>,
   <span class="string"><span class="delimiter">'</span><span class="content">long</span><span class="delimiter">'</span></span>: {<span class="string"><span class="delimiter">'</span><span class="content">pl</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">-417.0</span><span class="delimiter">'</span></span>,
    <span class="string"><span class="delimiter">'</span><span class="content">resettablePL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">-417.0</span><span class="delimiter">'</span></span>,
    <span class="string"><span class="delimiter">'</span><span class="content">units</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
    <span class="string"><span class="delimiter">'</span><span class="content">unrealizedPL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>},
   <span class="string"><span class="delimiter">'</span><span class="content">pl</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">-844.0</span><span class="delimiter">'</span></span>,
   <span class="string"><span class="delimiter">'</span><span class="content">resettablePL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">-844.0</span><span class="delimiter">'</span></span>,
   <span class="string"><span class="delimiter">'</span><span class="content">short</span><span class="delimiter">'</span></span>: {<span class="string"><span class="delimiter">'</span><span class="content">pl</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">-427.0</span><span class="delimiter">'</span></span>,
    <span class="string"><span class="delimiter">'</span><span class="content">resettablePL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">-427.0</span><span class="delimiter">'</span></span>,
    <span class="string"><span class="delimiter">'</span><span class="content">units</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
    <span class="string"><span class="delimiter">'</span><span class="content">unrealizedPL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>},
   <span class="string"><span class="delimiter">'</span><span class="content">unrealizedPL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>}],
 <span class="string"><span class="delimiter">'</span><span class="content">trades</span><span class="delimiter">'</span></span>: [],
 <span class="string"><span class="delimiter">'</span><span class="content">unrealizedPL</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0</span><span class="delimiter">'</span></span>,
 <span class="string"><span class="delimiter">'</span><span class="content">withdrawalLimit</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">98599.2235</span><span class="delimiter">'</span></span>}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Information about the last few trades is received as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">10</span>]: response = ctx.transaction.since(account_id, id=<span class="integer">497</span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">11</span>]: transactions = response.get(<span class="string"><span class="delimiter">'</span><span class="content">transactions</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">12</span>]: <span class="keyword">for</span> transaction <span class="keyword">in</span> transactions:
            print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="delimiter">'</span></span>, transaction.dict())  <i class="conum" data-value="3"></i><b>(3)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Fixes the starting <code>id</code> value from which on to retrieve the dates (needs to be adjusted to account for the current value of <code>id</code>).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Fetches the transactions data.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Prints out the single transactions.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The output then looks similar to the one below.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>{'pl': '-3.7651', 'instrument': 'EUR_USD', 'units': '100000.0', 'tradeOpened': {'units': '50000.0', 'tradeID': '498'}, 'type': 'ORDER_FILL', 'userID': 5516121, 'financing': '0.0', 'id': '498', 'accountBalance': '98587.9497', 'orderID': '497', 'batchID': '497', 'price': '1.0625', 'reason': 'MARKET_ORDER', 'accountID': '101-004-5516121-001', 'time': '2017-03-15T09:55:00.232549066Z', 'tradesClosed': [{'financing': '0.0', 'units': '50000.0', 'realizedPL': '-3.7651', 'tradeID': '496'}]}

 {'userID': 5516121, 'units': '-100000.0', 'timeInForce': 'FOK', 'positionFill': 'DEFAULT', 'type': 'MARKET_ORDER', 'batchID': '499', 'accountID': '101-004-5516121-001', 'id': '499', 'reason': 'CLIENT_ORDER', 'instrument': 'EUR_USD', 'time': '2017-03-15T09:55:09.045056353Z'}

 {'pl': '-9.4135', 'instrument': 'EUR_USD', 'units': '-100000.0', 'tradeOpened': {'units': '-50000.0', 'tradeID': '500'}, 'type': 'ORDER_FILL', 'userID': 5516121, 'financing': '-0.0001', 'id': '500', 'accountBalance': '98578.5361', 'orderID': '499', 'batchID': '499', 'price': '1.0623', 'reason': 'MARKET_ORDER', 'accountID': '101-004-5516121-001', 'time': '2017-03-15T09:55:09.045056353Z', 'tradesClosed': [{'financing': '-0.0001', 'units': '-50000.0', 'realizedPL': '-9.4135', 'tradeID': '498'}]}

 {'userID': 5516121, 'units': '100000.0', 'timeInForce': 'FOK', 'positionFill': 'DEFAULT', 'type': 'MARKET_ORDER', 'batchID': '501', 'accountID': '101-004-5516121-001', 'id': '501', 'reason': 'CLIENT_ORDER', 'instrument': 'EUR_USD', 'time': '2017-03-15T09:55:11.251494245Z'}

 {'pl': '-5.6481', 'instrument': 'EUR_USD', 'units': '100000.0', 'tradeOpened': {'units': '50000.0', 'tradeID': '502'}, 'type': 'ORDER_FILL', 'userID': 5516121, 'financing': '0.0', 'id': '502', 'accountBalance': '98572.888', 'orderID': '501', 'batchID': '501', 'price': '1.06242', 'reason': 'MARKET_ORDER', 'accountID': '101-004-5516121-001', 'time': '2017-03-15T09:55:11.251494245Z', 'tradesClosed': [{'financing': '0.0', 'units': '50000.0', 'realizedPL': '-5.6481', 'tradeID': '500'}]}

 {'userID': 5516121, 'units': '-50000.0', 'timeInForce': 'FOK', 'positionFill': 'DEFAULT', 'type': 'MARKET_ORDER', 'batchID': '503', 'accountID': '101-004-5516121-001', 'id': '503', 'reason': 'CLIENT_ORDER', 'instrument': 'EUR_USD', 'time': '2017-03-15T09:59:16.758814672Z'}

 {'pl': '26.3381', 'instrument': 'EUR_USD', 'units': '-50000.0', 'type': 'ORDER_FILL', 'userID': 5516121, 'financing': '-0.0026', 'id': '504', 'accountBalance': '98599.2235', 'orderID': '503', 'batchID': '503', 'price': '1.06298', 'reason': 'MARKET_ORDER', 'accountID': '101-004-5516121-001', 'time': '2017-03-15T09:59:16.758814672Z', 'tradesClosed': [{'financing': '-0.0026', 'units': '-50000.0', 'realizedPL': '26.3381', 'tradeID': '502'}]}</pre>
</div>
</div>
<div class="paragraph">
<p>Of course, this information might be processed and reformatted for better reading.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">13</span>]: <span class="keyword">for</span> trans <span class="keyword">in</span> transactions:
             trans = trans.dict()
             templ = <span class="string"><span class="delimiter">'</span><span class="content">%s | %14s | %12s</span><span class="delimiter">'</span></span>
             print(templ % (trans[<span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>],
                            trans[<span class="string"><span class="delimiter">'</span><span class="content">instrument</span><span class="delimiter">'</span></span>],
                            trans[<span class="string"><span class="delimiter">'</span><span class="content">units</span><span class="delimiter">'</span></span>]))</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre>2017-03-15T08:54:22.744421504Z |        EUR_USD |     100000.0
2017-03-15T08:54:22.744421504Z |        EUR_USD |     100000.0
2017-03-15T08:54:25.247064166Z |        EUR_USD |      50000.0
2017-03-15T08:54:25.247064166Z |        EUR_USD |      50000.0
2017-03-15T09:04:30.849342658Z |        EUR_USD |     -50000.0
2017-03-15T09:04:30.849342658Z |        EUR_USD |     -50000.0
2017-03-15T09:04:34.112940747Z |        EUR_USD |     -50000.0
2017-03-15T09:04:34.112940747Z |        EUR_USD |     -50000.0</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_conclusions_8">8.8. Conclusions</h3>
<div class="paragraph">
<p>The Oanda platform allows an easy and straightforward entry into the 
world of automated, algorithmic trading. Oanda specializes in so-called 
Contracts for Difference (CFDs). Depending on the country of residence 
of the trader there is a great variety of instruments that can be 
traded.</p>
</div>
<div class="paragraph">
<p>A major advantage of Oanda from a technological point of view are the
 modern, powerful APIs that can be easily accessed via a dedicated 
Python wrapper package (<code>v20</code>). This chapter shows how to set
 up an account, to connect to the APIs with Python, to retrieve 
historical data (one minute bars) for backtesting purposes, to retrieve 
streaming data in real-time, to automatically trade a CFD based on a 
momentum strategy and to retrieve account information as well as the 
detailed transaction history.</p>
</div>
</div>
<div class="sect2">
<h3 id="_further_resources_8">8.9. Further Resources</h3>
<div class="paragraph">
<p>Visit the help and support pages of Oanda under <a href="https://oanda.secure.force.com/HelpAndSupport" target="_blank" class="bare">https://oanda.secure.force.com/HelpAndSupport</a> to learn more about the platform and important aspects of CFD trading.</p>
</div>
<div class="paragraph">
<p>The developer portal of Oanda <a href="http://developer.oanda.com/rest-live/introduction/" target="_blank" class="bare">http://developer.oanda.com/rest-live/introduction/</a> provides a detailed description of the APIs.</p>
</div>
</div>
<div class="sect2">
<h3 id="_python_scripts_6">8.10. Python Scripts</h3>
<div id="oanda_momentum_trader" class="exampleblock">
<div class="title">Example 21. Oanda custom streaming class that automatically trades a momentum strategy</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Script</span>
<span class="comment"># with Momentum Trading Class</span>
<span class="comment"># for Oanda v20</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">v20</span>
<span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np
<span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd
<span class="keyword">import</span> <span class="include">configparser</span>

config = configparser.ConfigParser()
config.read(<span class="string"><span class="delimiter">'</span><span class="content">../pyalgo.cfg</span><span class="delimiter">'</span></span>)

account_id = config[<span class="string"><span class="delimiter">'</span><span class="content">oanda_v20</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">account_id</span><span class="delimiter">'</span></span>]
access_token = config[<span class="string"><span class="delimiter">'</span><span class="content">oanda_v20</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">access_token</span><span class="delimiter">'</span></span>]


<span class="keyword">class</span> <span class="class">MomentumTrader</span>(<span class="predefined">object</span>):
    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, momentum, instrument, units, *args, **kwargs):

        <span class="predefined-constant">self</span>.ticks = <span class="integer">0</span>
        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>
        <span class="predefined-constant">self</span>.data = pd.DataFrame()
        <span class="predefined-constant">self</span>.momentum = momentum
        <span class="predefined-constant">self</span>.account_id = account_id
        <span class="predefined-constant">self</span>.instrument = instrument
        <span class="predefined-constant">self</span>.units = units
        <span class="predefined-constant">self</span>.ctx = v20.Context(
            <span class="string"><span class="delimiter">'</span><span class="content">api-fxpractice.oanda.com</span><span class="delimiter">'</span></span>,
            <span class="integer">443</span>,
            <span class="predefined-constant">True</span>,
            application=<span class="string"><span class="delimiter">'</span><span class="content">sample_code</span><span class="delimiter">'</span></span>,
            token=access_token,
            datetime_format=<span class="string"><span class="delimiter">'</span><span class="content">RFC3339</span><span class="delimiter">'</span></span>
        )
        <span class="predefined-constant">self</span>.ctx_stream = v20.Context(
            <span class="string"><span class="delimiter">'</span><span class="content">stream-fxpractice.oanda.com</span><span class="delimiter">'</span></span>,
            <span class="integer">443</span>,
            <span class="predefined-constant">True</span>,
            application=<span class="string"><span class="delimiter">'</span><span class="content">sample_code</span><span class="delimiter">'</span></span>,
            token=access_token,
            datetime_format=<span class="string"><span class="delimiter">'</span><span class="content">RFC3339</span><span class="delimiter">'</span></span>
        )

    <span class="keyword">def</span> <span class="function">create_order</span>(<span class="predefined-constant">self</span>, units):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Places orders with Oanda. </span><span class="delimiter">'''</span></span>
        request = <span class="predefined-constant">self</span>.ctx.order.market(
            <span class="predefined-constant">self</span>.account_id,
            instrument=<span class="predefined-constant">self</span>.instrument,
            units=units,
        )
        order = request.get(<span class="string"><span class="delimiter">'</span><span class="content">orderFillTransaction</span><span class="delimiter">'</span></span>)
        print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="char">\n</span><span class="delimiter">'</span></span>, order.dict(), <span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="delimiter">'</span></span>)

    <span class="keyword">def</span> <span class="function">start</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Starts the streaming of data and the triggering of actions. </span><span class="delimiter">'''</span></span>
        response = <span class="predefined-constant">self</span>.ctx_stream.pricing.stream(
            <span class="predefined-constant">self</span>.account_id,
            snapshot=<span class="predefined-constant">True</span>,
            instruments=<span class="predefined-constant">self</span>.instrument
        )
        <span class="keyword">for</span> msg_type, msg <span class="keyword">in</span> response.parts():
            <span class="keyword">if</span> msg_type == <span class="string"><span class="delimiter">'</span><span class="content">pricing.Price</span><span class="delimiter">'</span></span>:
                <span class="predefined-constant">self</span>.on_success(msg.time, msg.asks[<span class="integer">0</span>].price)
            <span class="keyword">if</span> <span class="predefined-constant">self</span>.ticks == <span class="integer">250</span>:
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:
                    <span class="predefined-constant">self</span>.create_order(-<span class="predefined-constant">self</span>.units)
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == -<span class="integer">1</span>:
                    <span class="predefined-constant">self</span>.create_order(<span class="predefined-constant">self</span>.units)
                <span class="keyword">return</span> <span class="string"><span class="delimiter">'</span><span class="content">Finished.</span><span class="delimiter">'</span></span>

    <span class="keyword">def</span> <span class="function">on_success</span>(<span class="predefined-constant">self</span>, time, ask):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Takes actions when new tick data arrives. </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.ticks += <span class="integer">1</span>
        print(<span class="predefined-constant">self</span>.ticks, end=<span class="string"><span class="delimiter">'</span><span class="content"> </span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.data = <span class="predefined-constant">self</span>.data.append(
            pd.DataFrame({<span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>: [time], <span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>: [ask]}))
        <span class="predefined-constant">self</span>.data.index = pd.DatetimeIndex(<span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>])
        resam = <span class="predefined-constant">self</span>.data.resample(<span class="string"><span class="delimiter">'</span><span class="content">1min</span><span class="delimiter">'</span></span>).last()
        <span class="comment"># resam = resam.ffill()</span>
        resam[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(resam[<span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>] / resam[<span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>))
        resam[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.sign(
            resam[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].rolling(<span class="predefined-constant">self</span>.momentum).mean())
        <span class="comment"># print(resam[['ask', 'returns', 'position']].tail())</span>

        <span class="keyword">if</span> resam[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>] == <span class="integer">1</span>:
            <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">0</span>:
                <span class="predefined-constant">self</span>.create_order(<span class="predefined-constant">self</span>.units)
            <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == -<span class="integer">1</span>:
                <span class="predefined-constant">self</span>.create_order(<span class="predefined-constant">self</span>.units * <span class="integer">2</span>)
            <span class="predefined-constant">self</span>.position = <span class="integer">1</span>
        <span class="keyword">elif</span> resam[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>] == -<span class="integer">1</span>:
            <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">0</span>:
                <span class="predefined-constant">self</span>.create_order(-<span class="predefined-constant">self</span>.units)
            <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:
                <span class="predefined-constant">self</span>.create_order(-<span class="predefined-constant">self</span>.units * <span class="integer">2</span>)
            <span class="predefined-constant">self</span>.position = -<span class="integer">1</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="interactive_brokers">9. Stock Trading with Interactive Brokers</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph align_me_right">
<p>Financial institutions like to call what they do trading. Let’s be honest. It’s not trading; it’s betting.</p>
</div>
</blockquote>
<div class="attribution">
— Graydon Carter
</div>
</div>
<div class="sect2">
<h3 id="_introduction_9">9.1. Introduction</h3>
<div class="paragraph">
<p><a href="http://interactivebrokers.com/" target="_blank">Interactive Brokers</a> (IB) is one of the leading online brokers, if not <em>the</em>
 leading broker, for retail investors and traders. IB provides access to
 more than 100 trading venues in 24 countries offering trading 
capabilities for a great variety of financial instruments. Along the 
lines of the criteria for broker selection outlined in <a href="#trading_oanda">CFD Trading with Oanda</a>, below an overview of what characterizes IB as an online broker.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>instruments</strong>: IB allows trading and direct market 
access to stocks, options, futures, forex, bonds, exchange-traded funds 
(ETFs) and Contracts for Difference (CFDs) from a single account</p>
</li>
<li>
<p><strong>strategies</strong>: in addition to buying financial 
instruments, IB also allows the short selling of certain instruments 
according to specified rules</p>
</li>
<li>
<p><strong>costs</strong>: IB claims to be one of the cheapest online 
brokers; according to a ranking by Barron’s magazine, IB also is the 
cheapest from a list of 16 online brokers with monthly fees of 847 USD 
compared to an average of 1,905 USD (for a stylized trader with a 
certain trading volume and frequency)</p>
</li>
<li>
<p><strong>technology</strong>: the major tool provided by IB for trading is the <a href="https://www.interactivebrokers.com/de/index.php?f=6362" target="_blank">Trader Workstation (TWS)</a> — see <a href="#ib_tws">Interactive Brokers Trader Workstation (TWS)</a>
 (source: IB web site) — which is a desktop application that also runs a
 local proxy providing API access to historical financial data, 
portfolio and order data as well as real-time, streaming data</p>
</li>
<li>
<p><strong>jurisdiction</strong>: IB is active around the globe providing a full set of instruments and trading capabilities in many countries; check on the <a href="https://www.interactivebrokers.com/en/index.php?f=1323" target="_blank">IB countries page</a> from where you get access to which trading locations</p>
</li>
</ul>
</div>
<div id="ib_tws" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ib_tws.png" alt="ib tws">
</div>
<div class="title">Figure 56. Interactive Brokers Trader Workstation (TWS)</div>
</div>
</div>
<div class="sect2">
<h3 id="_setting_up_an_account">9.2. Setting up an Account</h3>
<div class="paragraph">
<p>Setting up a trial account with IB is simple and straightforward. You
 just need to fill out a short form with some basic data as shown in <a href="#ib_01">Setting up a trial account with Interactive Brokers</a> (in German language).</p>
</div>
<div id="ib_01" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ib_01.png" alt="ib 01">
</div>
<div class="title">Figure 57. Setting up a trial account with Interactive Brokers</div>
</div>
<div class="paragraph">
<p>Once logged in, you can then download the TWS application for you 
operating system. Starting the application then requires the previously 
chosen user name and password. TWS then might show up as in <a href="#ib_02">Trader Workstation after login with trial credentials</a> on your desktop.</p>
</div>
<div id="ib_02" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ib_02.png" alt="ib 02">
</div>
<div class="title">Figure 58. Trader Workstation after login with trial credentials</div>
</div>
<div class="paragraph">
<p>The arrangement of the different panels of TWS might be changed or 
new windows might pop up depending on what you request from the 
application. <a href="#ib_03">TWS break out window with option chain data</a> shows a break out window with option chain data for a stock index.</p>
</div>
<div id="ib_03" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ib_03.png" alt="ib 03">
</div>
<div class="title">Figure 59. TWS break out window with option chain data</div>
</div>
<div class="paragraph">
<p>Contrary to the Oanda paper trading account as used in <a href="#trading_oanda">CFD Trading with Oanda</a>,
 TWS does not offer full access to all capabilities or 
historical/streaming data sets. However, the basic approach of TWS and 
the API realized by the local proxy can be explored seamlessly.</p>
</div>
</div>
<div class="sect2">
<h3 id="_python_and_the_ib_api">9.3. Python and the IB API</h3>
<div class="paragraph">
<p>Python is an officially supported language to access the IB API 
(alongside to C++ and Java). However, this is rather new and the Python 
support is pretty native and not very conveniet. On the other hand, 
there are a few — even if not really regularly maintained — Python 
packages available as open source that allow access to the IB API. The 
Python package used in the following is called <a href="https://github.com/blampe/IbPy" target="_blank"><code>IbPy</code></a>
 and has nothing to do with the recently published native Python support
 by Interactive Brokers. Recently, there has been some maintenance work 
and the package seems to be used quite a bit by the Python and trading 
communities. You can install the package via</p>
</div>
<div class="listingblock">
<div class="content">
<pre>pip install IbPy2</pre>
</div>
</div>
<div class="paragraph">
<p>Alternatively, it can be installed from Github directly via</p>
</div>
<div class="listingblock">
<div class="content">
<pre>git clone https://github.com/blampe/IbPy.git
cd IbPy
python setup.py install</pre>
</div>
</div>
<div class="paragraph">
<p>No matter what technology is used to access the IB API, some default settings of TWS need to be changed (under <code>File-Global Configuration-API</code>). <a href="#ib_04">Changing TWS settings for API access (I)</a> shows the <code>API-Settings</code> screen with three important configurations:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Enable ActiveX and Socket Clients</code> must be enabled</p>
</li>
<li>
<p><code>Read-Only API</code> must be disabled</p>
</li>
<li>
<p><code>Allow connection from local host only</code> must be disabled</p>
</li>
</ul>
</div>
<div id="ib_04" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ib_04.png" alt="ib 04">
</div>
<div class="title">Figure 60. Changing TWS settings for API access (I)</div>
</div>
<div class="paragraph">
<p>In addition, under <code>API-Precautions</code> the option <code>Bypass order precautions for API orders</code> should be enabled as shown in <a href="#ib_05">Changing TWS settings for API access (II)</a></p>
</div>
<div id="ib_05" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ib_05.png" alt="ib 05">
</div>
<div class="title">Figure 61. Changing TWS settings for API access (II)</div>
</div>
</div>
<div class="sect2">
<h3 id="_a_wrapper_class_for_the_ib_api">9.4. A Wrapper Class for the IB API</h3>
<div class="paragraph">
<p>Although <code>IbPy</code> <em>allows</em> Python-based access to the
 IB API, it is not really convenient. The Python Quants therefore have 
developed a Python wrapper class called <code>tpqib</code> — see <a href="#ib_wrapper_class">Python wrapper class for IB API based on <code>IbPy</code></a> — which <em>simplifies</em> the IB API access considerably and provides a modern interface to do so.</p>
</div>
<div class="paragraph">
<p>Unfortunately, some functions cannot be tested even if there is a trial account. Therefore, the overview of <code>tpqib</code> is based on the demo account with</p>
</div>
<div class="listingblock">
<div class="content">
<pre>user: edemo
password: demouser</pre>
</div>
</div>
<div class="paragraph">
<p>Using this account allows the illustration of all functions. However,
 the data is sample data only — which should suffice for a technical 
demo.</p>
</div>
<div class="paragraph">
<p>The first step is to instantiate a connection object.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">tpqib</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: con = tpqib.tpqibcon()  <i class="conum" data-value="2"></i><b>(2)</b>
Server Version: <span class="integer">76</span>
TWS Time at connection:<span class="integer">20170102</span> <span class="integer">09</span>:<span class="integer">49</span>:<span class="integer">23</span> CET</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the <code>tpqib</code> module with the wrapper class.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Instantiates a connection object based on the class.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>When a connection is set up, you need to confirm access for the incoming connection with TWS as shown in <a href="#ib_06">Confirming incoming API connection with TWS</a>.</p>
</div>
<div id="ib_06" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ib_06.png" alt="ib 06">
</div>
<div class="title">Figure 62. Confirming incoming API connection with TWS</div>
</div>
</div>
<div class="sect2">
<h3 id="_retrieving_historical_data_from_ib">9.5. Retrieving Historical Data from IB</h3>
<div class="paragraph">
<p>A central object when working with the IB API is the <code>contract</code>. For example, if you want to retrieve historical data for the Apple, Inc. stock, you need to define a respective <code>contract</code> object for this instrument.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">3</span>]: aapl_contract = con.create_contract(<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">STK</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">SMART</span><span class="delimiter">'</span></span>,
                                            <span class="string"><span class="delimiter">'</span><span class="content">SMART</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">USD</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">4</span>]: con.req_contract_details(aapl_contract)  <i class="conum" data-value="2"></i><b>(2)</b>
Symbol: AAPL, Type: STK, Exchange: SMART, Primary Exchange: NASDAQ,Currency: USD

In [<span class="integer">5</span>]: con.get_market_data_once(aapl_contract)  <i class="conum" data-value="3"></i><b>(3)</b>
Last timestamp: <span class="integer">2017</span>-<span class="octal">01</span>-<span class="octal">02</span> <span class="integer">10</span>:<span class="integer">17</span>:<span class="octal">00</span>, Ask price: <span class="float">116.3</span>, Ask size: <span class="integer">2</span>,Bid price:
<span class="float">116.29</span>, Bid size: <span class="integer">2</span>, Low: <span class="float">112.66</span>, High: <span class="float">119.82</span>, Close: <span class="float">116.26</span>, Volume: <span class="integer">22385</span>,
Last price: <span class="float">116.29</span>,Last size: <span class="integer">3</span>, Halted: <span class="float">0.0</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Creates the <code>contract</code> object for <code>AAPL</code>; the syntax is <code>create_contract(symbol, security type, primary exchange, exchange, currency)</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Retrieves the contract details from the IB API.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Retrieves the most current market data for the contract; the 
execution is asynchronous which means that the data retrieval and 
presentation might be delayed even if the method call seems to be 
finished.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The above code retrieves a single tick data set. Of course, larger historical data sets can be pulled as well.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">6</span>]: <span class="keyword">import</span> <span class="include">datetime</span> <span class="keyword">as</span> dt  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">7</span>]: end_date = dt.datetime.now()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">8</span>]: request_id = con.request_historical_data(aapl_contract, end_date,
                                          <span class="string"><span class="delimiter">'</span><span class="content">1 W</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">8 hours</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">TRADES</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">9</span>]: request_id  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">9</span>]: <span class="integer">2</span>

In [<span class="integer">10</span>]: con.get_historical_data(request_id)  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">10</span>]:

                    WAP     close   count hasGaps high    low     <span class="predefined">open</span>    volume
date
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">12</span> <span class="octal">06</span>:<span class="octal">00</span>:<span class="octal">00</span> <span class="float">138.953</span> <span class="float">138.73</span>  <span class="integer">13235</span> <span class="predefined-constant">False</span>   <span class="float">145.80</span>  <span class="float">132.83</span>  <span class="float">138.88</span>  <span class="integer">155</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">12</span> <span class="integer">09</span>:<span class="octal">00</span>:<span class="octal">00</span> <span class="float">139.127</span> <span class="float">138.73</span>  <span class="integer">34894</span> <span class="predefined-constant">False</span>   <span class="float">149.47</span>  <span class="float">132.00</span>  <span class="float">138.69</span>  <span class="integer">411</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">12</span> <span class="integer">17</span>:<span class="octal">00</span>:<span class="octal">00</span> <span class="float">138.669</span> <span class="float">138.71</span>  <span class="integer">35150</span> <span class="predefined-constant">False</span>   <span class="float">150.00</span>  <span class="float">131.94</span>  <span class="float">138.74</span>  <span class="integer">412</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">13</span> <span class="octal">01</span>:<span class="octal">00</span>:<span class="octal">00</span> <span class="float">138.474</span> <span class="float">138.72</span>  <span class="integer">17551</span> <span class="predefined-constant">False</span>   <span class="float">147.25</span>  <span class="float">131.32</span>  <span class="float">138.70</span>  <span class="integer">205</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">13</span> <span class="octal">05</span>:<span class="octal">00</span>:<span class="octal">00</span> <span class="float">138.702</span> <span class="float">138.52</span>  <span class="integer">17454</span> <span class="predefined-constant">False</span>   <span class="float">149.24</span>  <span class="float">132.55</span>  <span class="float">138.80</span>  <span class="integer">205</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">13</span> <span class="integer">09</span>:<span class="octal">00</span>:<span class="octal">00</span> <span class="float">138.272</span> <span class="float">138.01</span>  <span class="integer">34991</span> <span class="predefined-constant">False</span>   <span class="float">149.44</span>  <span class="float">131.35</span>  <span class="float">138.52</span>  <span class="integer">410</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">13</span> <span class="integer">17</span>:<span class="octal">00</span>:<span class="octal">00</span> <span class="float">138.312</span> <span class="float">138.22</span>  <span class="integer">34931</span> <span class="predefined-constant">False</span>   <span class="float">149.72</span>  <span class="float">131.55</span>  <span class="float">138.01</span>  <span class="integer">410</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">14</span> <span class="octal">01</span>:<span class="octal">00</span>:<span class="octal">00</span> <span class="float">138.255</span> <span class="float">138.12</span>  <span class="integer">17482</span> <span class="predefined-constant">False</span>   <span class="float">150.25</span>  <span class="float">131.50</span>  <span class="float">138.22</span>  <span class="integer">204</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">14</span> <span class="octal">05</span>:<span class="octal">00</span>:<span class="octal">00</span> <span class="float">138.068</span> <span class="float">138.08</span>  <span class="integer">17371</span> <span class="predefined-constant">False</span>   <span class="float">144.73</span>  <span class="float">131.33</span>  <span class="float">138.10</span>  <span class="integer">204</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">14</span> <span class="integer">09</span>:<span class="octal">00</span>:<span class="octal">00</span> <span class="float">138.332</span> <span class="float">138.75</span>  <span class="integer">34738</span> <span class="predefined-constant">False</span>   <span class="float">148.84</span>  <span class="float">131.20</span>  <span class="float">138.08</span>  <span class="integer">407</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">14</span> <span class="integer">17</span>:<span class="octal">00</span>:<span class="octal">00</span> <span class="float">138.884</span> <span class="float">139.19</span>  <span class="integer">35055</span> <span class="predefined-constant">False</span>   <span class="float">147.66</span>  <span class="float">131.91</span>  <span class="float">138.75</span>  <span class="integer">411</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="octal">01</span>:<span class="octal">00</span>:<span class="octal">00</span> <span class="float">139.087</span> <span class="float">138.99</span>  <span class="integer">17512</span> <span class="predefined-constant">False</span>   <span class="float">148.33</span>  <span class="float">132.97</span>  <span class="float">139.19</span>  <span class="integer">205</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="octal">05</span>:<span class="octal">00</span>:<span class="octal">00</span> <span class="float">138.988</span> <span class="float">138.74</span>  <span class="integer">17564</span> <span class="predefined-constant">False</span>   <span class="float">146.59</span>  <span class="float">132.27</span>  <span class="float">138.95</span>  <span class="integer">205</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">09</span>:<span class="octal">00</span>:<span class="octal">00</span> <span class="float">138.732</span> <span class="float">138.88</span>  <span class="integer">11294</span> <span class="predefined-constant">False</span>   <span class="float">147.63</span>  <span class="float">131.97</span>  <span class="float">138.76</span>  <span class="integer">132</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the <code>datetime</code> module as <code>dt</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Fixes the end date for data retrieval.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Requests historical data for the current week in eight hour intervals; the syntax is <code>request_historical_data(contract, end_date_time, duration, bar_size, what_to_show, use_RTH, format_date)</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The <code>request_id</code> number …​</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>…​ based on which the data then gets retrieved; the return object is a <code>pandas</code> <code>DataFrame</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Note that in the demo version of TWS, data retrieval is strongly 
limited and also really slow. It is indeed only sufficient for a 
technical demo but not really more. You also need to remember that most 
of the methods work asynchronously and that it might seem for quite a 
while that a method call was not successful since it does not return 
anything immediately.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Of course, different granularities are also possible. <a href="#ib_plot_01">High, Close, Low stock price data from IB API</a> graphically shows a sub-set of the data retrieved.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">11</span>]: request_id = con.request_historical_data(aapl_contract, end_date,
                                          <span class="string"><span class="delimiter">'</span><span class="content">1 W</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">1 min</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">TRADES</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">12</span>]: request_id  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">12</span>]: <span class="integer">3</span>

In [<span class="integer">13</span>]: data = con.get_historical_data(request_id)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">14</span>]: data.info()  <i class="conum" data-value="4"></i><b>(4)</b>
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">4652</span> entries, <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">12</span> <span class="octal">06</span>:<span class="octal">00</span>:<span class="octal">00</span> to <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">34</span>:<span class="octal">00</span>
Data columns (total <span class="integer">8</span> columns):
WAP        <span class="integer">4652</span> non-null float64
close      <span class="integer">4652</span> non-null float64
count      <span class="integer">4652</span> non-null int64
hasGaps    <span class="integer">4652</span> non-null <span class="predefined">bool</span>
high       <span class="integer">4652</span> non-null float64
low        <span class="integer">4652</span> non-null float64
<span class="predefined">open</span>       <span class="integer">4652</span> non-null float64
volume     <span class="integer">4652</span> non-null int64
dtypes: <span class="predefined">bool</span>(<span class="integer">1</span>), float64(<span class="integer">5</span>), int64(<span class="integer">2</span>)
memory usage: <span class="float">295.3</span> KB

In [<span class="integer">14</span>]: data.tail(<span class="integer">10</span>)  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">14</span>]:

                    WAP     close   count   hasGaps high    low     <span class="predefined">open</span>    volume

date
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">25</span>:<span class="octal">00</span> <span class="float">138.612</span> <span class="float">138.70</span>  <span class="integer">81</span>      <span class="predefined-constant">False</span>   <span class="float">138.74</span>  <span class="float">136.30</span>  <span class="float">138.74</span>  <span class="integer">0</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">26</span>:<span class="octal">00</span> <span class="float">138.749</span> <span class="float">138.78</span>  <span class="integer">82</span>      <span class="predefined-constant">False</span>   <span class="float">138.80</span>  <span class="float">137.44</span>  <span class="float">138.70</span>  <span class="integer">1</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">27</span>:<span class="octal">00</span> <span class="float">138.787</span> <span class="float">138.81</span>  <span class="integer">70</span>      <span class="predefined-constant">False</span>   <span class="float">139.23</span>  <span class="float">138.50</span>  <span class="float">138.77</span>  <span class="integer">0</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">28</span>:<span class="octal">00</span> <span class="float">138.849</span> <span class="float">138.78</span>  <span class="integer">87</span>      <span class="predefined-constant">False</span>   <span class="float">140.40</span>  <span class="float">138.77</span>  <span class="float">138.82</span>  <span class="integer">1</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">29</span>:<span class="octal">00</span> <span class="float">138.793</span> <span class="float">138.79</span>  <span class="integer">64</span>      <span class="predefined-constant">False</span>   <span class="float">141.14</span>  <span class="float">135.77</span>  <span class="float">138.78</span>  <span class="integer">0</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">30</span>:<span class="octal">00</span> <span class="float">138.756</span> <span class="float">138.81</span>  <span class="integer">75</span>      <span class="predefined-constant">False</span>   <span class="float">139.05</span>  <span class="float">135.50</span>  <span class="float">138.77</span>  <span class="integer">0</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">31</span>:<span class="octal">00</span> <span class="float">138.881</span> <span class="float">138.85</span>  <span class="integer">82</span>      <span class="predefined-constant">False</span>   <span class="float">142.41</span>  <span class="float">138.77</span>  <span class="float">138.81</span>  <span class="integer">0</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">32</span>:<span class="octal">00</span> <span class="float">138.845</span> <span class="float">138.85</span>  <span class="integer">77</span>      <span class="predefined-constant">False</span>   <span class="float">141.00</span>  <span class="float">136.72</span>  <span class="float">138.84</span>  <span class="integer">0</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">33</span>:<span class="octal">00</span> <span class="float">138.913</span> <span class="float">138.86</span>  <span class="integer">78</span>      <span class="predefined-constant">False</span>   <span class="float">144.69</span>  <span class="float">138.81</span>  <span class="float">138.85</span>  <span class="integer">0</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">34</span>:<span class="octal">00</span> <span class="float">138.868</span> <span class="float">138.88</span>  <span class="integer">79</span>      <span class="predefined-constant">False</span>   <span class="float">139.05</span>  <span class="float">138.83</span>  <span class="float">138.86</span>  <span class="integer">0</span>

In [<span class="integer">15</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">WAP</span><span class="delimiter">'</span></span>].plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="5"></i><b>(5)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Now takes a one minute interval instead of eight hours.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The new <code>request_id</code> number.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Gets the data according to the request.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Shows the meta information of the <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Plots three columns from the <code>DataFrame</code> object.</td>
</tr>
</tbody></table>
</div>
<div id="ib_plot_01" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ib_plot_01.png" alt="ib plot 01">
</div>
<div class="title">Figure 63. High, Close, Low stock price data from IB API</div>
</div>
<div class="paragraph">
<p>There are a number of valid bar sizes to retrieve historical data for via the IB API.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">16</span>]: tpqib.VALID_BAR_SIZES
Out[<span class="integer">16</span>]: [<span class="string"><span class="delimiter">'</span><span class="content">1 sec</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">5 secs</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">10 secs</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">15 secs</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">30 secs</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">1 min</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">2 mins</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">3 mins</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">5 mins</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">10 mins</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">15 mins</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">20 mins</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">30 mins</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">1 hour</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">2 hours</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">3 hours</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">4 hours</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">8 hours</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">1 day</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">1 week</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">1 month</span><span class="delimiter">'</span></span>]</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_working_with_streaming_data_from_the_ib_api">9.6. Working with Streaming Data from the IB API</h3>
<div class="paragraph">
<p>Automated, algorithmic trading requires the retrieval of real-time 
data. To this end, The IB API allows the streaming of financial data. In
 this context, working with streaming data is made simple again by the 
use of <code>tpqib</code>. There are multiple types of streaming data that can be retrieved as shown below.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">17</span>]: tpqib.STREAMING_DATA_TYPES
Out[<span class="integer">17</span>]: [<span class="string"><span class="delimiter">'</span><span class="content">lastTimestamp</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">askPrice</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">askSize</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">bidPrice</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">bidSize</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">low</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">high</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">close</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">volume</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">lastPrice</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">lastSize</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">halted</span><span class="delimiter">'</span></span>]</code></pre>
</div>
</div>
<div class="paragraph">
<p>When using the the <code>request_market_data</code> method, a callback function needs to be provided that defines what to do with the retrieved streaming data.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">18</span>]: <span class="keyword">def</span> <span class="function">print_bid_ask_price</span>(field, value):  <i class="conum" data-value="1"></i><b>(1)</b>
            <span class="keyword">if</span> field == <span class="string"><span class="delimiter">'</span><span class="content">bidPrice</span><span class="delimiter">'</span></span>:  <i class="conum" data-value="2"></i><b>(2)</b>
                print(dt.datetime.now(), <span class="string"><span class="delimiter">'</span><span class="content">| bid is %s</span><span class="delimiter">'</span></span> % value)  <i class="conum" data-value="3"></i><b>(3)</b>
            <span class="keyword">if</span> field == <span class="string"><span class="delimiter">'</span><span class="content">askPrice</span><span class="delimiter">'</span></span>:  <i class="conum" data-value="4"></i><b>(4)</b>
                print(dt.datetime.now(), <span class="string"><span class="delimiter">'</span><span class="content">| ask is %s</span><span class="delimiter">'</span></span> % value)  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">19</span>]: request_id = con.request_market_data(aapl_contract,  <i class="conum" data-value="6"></i><b>(6)</b>
                                              print_bid_ask_price)  <i class="conum" data-value="7"></i><b>(7)</b>

<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">40</span>:<span class="float">10.262515</span> | bid <span class="keyword">is</span> <span class="float">135.16</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">40</span>:<span class="float">10.262916</span> | ask <span class="keyword">is</span> <span class="float">135.18</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">40</span>:<span class="float">22.789972</span> | ask <span class="keyword">is</span> <span class="float">135.17</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">40</span>:<span class="float">39.249456</span> | bid <span class="keyword">is</span> <span class="float">135.14</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">40</span>:<span class="float">39.249938</span> | ask <span class="keyword">is</span> <span class="float">135.16</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">40</span>:<span class="float">59.556250</span> | bid <span class="keyword">is</span> <span class="float">135.16</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">40</span>:<span class="float">59.556624</span> | ask <span class="keyword">is</span> <span class="float">135.17</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">41</span>:<span class="float">20.631641</span> | bid <span class="keyword">is</span> <span class="float">135.14</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">41</span>:<span class="float">20.632007</span> | ask <span class="keyword">is</span> <span class="float">135.16</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">41</span>:<span class="float">31.608219</span> | bid <span class="keyword">is</span> <span class="float">135.16</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">41</span>:<span class="float">31.608597</span> | ask <span class="keyword">is</span> <span class="float">135.17</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">41</span>:<span class="float">48.895520</span> | bid <span class="keyword">is</span> <span class="float">135.14</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">41</span>:<span class="float">48.895893</span> | ask <span class="keyword">is</span> <span class="float">135.16</span>

In [<span class="integer">20</span>]: con.cancel_market_data(request_id)  <i class="conum" data-value="8"></i><b>(8)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Defines the callback function.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Picks out the <code>bidPrice</code> data point …​</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>…​ and prints it with a timestamp.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Picks out the <code>askPrice</code> data point …​</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>…​ and prints it with a timestamp.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Data is requested for the <code>AAPL</code> <code>contract</code> object …​</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>…​ and processed according to the <code>print_bid_ask_price</code> function; the streaming happens asynchronously.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Given the <code>request_id</code> number, the asynchronous streaming is stopped.</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Due to the (partly random) nature of the sample data retrieved, <em>no backtesting example</em>
 is provided here. However, from a pure Python programming point of view
 the data can be processed as done multiple times before.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_implementing_trading_strategies_in_real_time">9.7. Implementing Trading Strategies in Real-Time</h3>
<div class="paragraph">
<p>This section implements a simple moving average (SMA) long only 
trading strategy for the Apple, Inc. stock with Interactive Brokers. The
 previous section introduces to the processing of streaming data from 
the IB API. What is missing so far is the ability to place orders. The 
wrapper class from <code>tpqib</code> takes care of this as well. The 
code below shows a complete example that sets everything up, places a 
buy order and then a sell order.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">tpqib</span>

In [<span class="integer">2</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

In [<span class="integer">3</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

In [<span class="integer">4</span>]: <span class="keyword">import</span> <span class="include">datetime</span> <span class="keyword">as</span> dt

In [<span class="integer">5</span>]: con = tpqib.tpqibcon()
Server Version: <span class="integer">76</span>
TWS Time at connection:<span class="integer">20170103</span> <span class="integer">11</span>:<span class="integer">20</span>:<span class="integer">19</span> CET

In [<span class="integer">6</span>]: symbol = <span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>

In [<span class="integer">7</span>]: shares = <span class="integer">100</span>

In [<span class="integer">8</span>]: contract = con.create_contract(symbol, <span class="string"><span class="delimiter">'</span><span class="content">STK</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">SMART</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">SMART</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">USD</span><span class="delimiter">'</span></span>)

In [<span class="integer">9</span>]: buy_order = con.create_order(<span class="string"><span class="delimiter">'</span><span class="content">MKT</span><span class="delimiter">'</span></span>, shares, <span class="string"><span class="delimiter">'</span><span class="content">Buy</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">10</span>]: sell_order = con.create_order(<span class="string"><span class="delimiter">'</span><span class="content">MKT</span><span class="delimiter">'</span></span>, shares, <span class="string"><span class="delimiter">'</span><span class="content">Sell</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">11</span>]: con.place_order(contract, buy_order)  <i class="conum" data-value="3"></i><b>(3)</b>
Order: BUY <span class="integer">100</span> AAPL
    Filled: <span class="integer">0</span>, Status: Submitted
    Filled: <span class="integer">100</span>, Status: Filled
    Filled: <span class="integer">100</span>, Status: Filled

In [<span class="integer">12</span>]: con.place_order(contract, sell_order)  <i class="conum" data-value="4"></i><b>(4)</b>
Order: SELL <span class="integer">100</span> AAPL
    Filled: <span class="integer">0</span>, Status: Submitted
    Filled: <span class="integer">100</span>, Status: Filled
    Filled: <span class="integer">100</span>, Status: Filled</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Defines a <em>buy</em> order object for a certain number of shares.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Defines a <em>sell</em> order object for a certain number of shares.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Places the <em>buy</em> order given the order definition and the contract specification.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Places the <em>sell</em> order given the order definition and the contract specification.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The status of the order is not only printed, there is also an audio 
message when the order is filled as well as a small pop-up window as 
shown in <a href="#ib_07">Confirmation for an order being filled</a>.</p>
</div>
<div id="ib_07" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/ib_07.png" alt="ib 07">
</div>
<div class="title">Figure 64. Confirmation for an order being filled</div>
</div>
<div class="paragraph">
<p>The placing of orders can now be combined with the streaming 
functionality to implement an automated trading strategy based on SMAs 
(for five 1 second intervals and ten 1 second intervals). First the 
function defining the trading strategy.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="keyword">def</span> <span class="function">SMA_strategy</span>(field, value):
    <span class="keyword">global</span> data  <i class="conum" data-value="1"></i><b>(1)</b>
    <span class="keyword">global</span> ticks  <i class="conum" data-value="1"></i><b>(1)</b>
    <span class="keyword">global</span> resam  <i class="conum" data-value="1"></i><b>(1)</b>
    <span class="keyword">global</span> position  <i class="conum" data-value="1"></i><b>(1)</b>
    <span class="keyword">global</span> request_id  <i class="conum" data-value="1"></i><b>(1)</b>
    <span class="keyword">if</span> field == <span class="string"><span class="delimiter">'</span><span class="content">bidPrice</span><span class="delimiter">'</span></span>:  <i class="conum" data-value="2"></i><b>(2)</b>
        ticks += <span class="integer">1</span>
        timestamp = dt.datetime.now()
        data = data.append(pd.DataFrame({<span class="string"><span class="delimiter">'</span><span class="content">bid</span><span class="delimiter">'</span></span>: value},
                                        index=[timestamp]))
        print(<span class="string"><span class="delimiter">'</span><span class="content">%3d | </span><span class="delimiter">'</span></span> % ticks, timestamp, <span class="string"><span class="delimiter">'</span><span class="content">| bid is %s</span><span class="delimiter">'</span></span> % value)
    <span class="keyword">elif</span> field == <span class="string"><span class="delimiter">'</span><span class="content">askPrice</span><span class="delimiter">'</span></span>:  <i class="conum" data-value="3"></i><b>(3)</b>
        ticks += <span class="integer">1</span>
        timestamp = dt.datetime.now()
        data = data.append(pd.DataFrame({<span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>: value},
                                        index=[timestamp]))
        print(<span class="string"><span class="delimiter">'</span><span class="content">%3d | </span><span class="delimiter">'</span></span> % ticks, timestamp, <span class="string"><span class="delimiter">'</span><span class="content">| ask is %s</span><span class="delimiter">'</span></span> % value)
    resam = data.resample(<span class="string"><span class="delimiter">'</span><span class="content">1s</span><span class="delimiter">'</span></span>).last().ffill()  <i class="conum" data-value="4"></i><b>(4)</b>
    <span class="keyword">if</span> <span class="predefined">len</span>(resam) &gt;= <span class="integer">10</span>:  <i class="conum" data-value="5"></i><b>(5)</b>
        resam[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] = resam.mean(axis=<span class="integer">1</span>).rolling(<span class="integer">5</span>).mean()  <i class="conum" data-value="6"></i><b>(6)</b>
        resam[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>] = resam.mean(axis=<span class="integer">1</span>).rolling(<span class="integer">10</span>).mean()  <i class="conum" data-value="6"></i><b>(6)</b>
        resam[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.where(resam[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] &gt; resam[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>], <span class="integer">1</span>, -<span class="integer">1</span>)  <i class="conum" data-value="7"></i><b>(7)</b>
        <span class="keyword">if</span> resam[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>] == <span class="integer">1</span> <span class="keyword">and</span> position == <span class="integer">0</span>:  <i class="conum" data-value="8"></i><b>(8)</b>
            con.place_order(contract, buy_order)  <i class="conum" data-value="9"></i><b>(9)</b>
            position = <span class="integer">1</span>  <i class="conum" data-value="10"></i><b>(10)</b>
        <span class="keyword">elif</span> resam[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>] == -<span class="integer">1</span> <span class="keyword">and</span> position == <span class="integer">1</span>:  <i class="conum" data-value="11"></i><b>(11)</b>
            con.place_order(contract, sell_order)  <i class="conum" data-value="12"></i><b>(12)</b>
            position = <span class="integer">0</span>  <i class="conum" data-value="13"></i><b>(13)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Declares a couple of variables to be global.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Appends a <code>bidPrice</code> data point to the <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Appends an <code>askPrice</code> data point to the <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Resamples the <code>DataFrame</code> object to a 1 second interval.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Checks whether there are enough data rows in the resampled <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Calculates the SMAs and stores them in two new columns.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Derives the positioning according to the SMA values.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Checks whether there is a buy signal while the position is neutral.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>Places a buy order.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>Sets the position to 1 (long).</td>
</tr>
<tr>
<td><i class="conum" data-value="11"></i><b>11</b></td>
<td>Checks whether there is a sell signal while the position is long.</td>
</tr>
<tr>
<td><i class="conum" data-value="12"></i><b>12</b></td>
<td>Places a sell order.</td>
</tr>
<tr>
<td><i class="conum" data-value="13"></i><b>13</b></td>
<td>Sets the position to 0 (neutral).</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>With the <code>SMAStrategy</code> function available, automated trading of Apple, Inc. shares is straightforward.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">13</span>]: ticks = <span class="integer">0</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">14</span>]: position = <span class="integer">0</span>  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">16</span>]: data = pd.DataFrame()  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">17</span>]: request_id = con.request_market_data(contract, SMA_strategy)  <i class="conum" data-value="4"></i><b>(4)</b>
  <span class="integer">1</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">44</span>:<span class="float">38.512996</span> | bid <span class="keyword">is</span> <span class="float">135.12</span>
  <span class="integer">2</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">44</span>:<span class="float">38.518209</span> | ask <span class="keyword">is</span> <span class="float">135.14</span>
  <span class="integer">3</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">44</span>:<span class="float">47.114682</span> | bid <span class="keyword">is</span> <span class="float">135.13</span>
  <span class="integer">4</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">44</span>:<span class="float">47.127876</span> | ask <span class="keyword">is</span> <span class="float">135.15</span>
Order: BUY <span class="integer">100</span> AAPL
    Filled: <span class="integer">100</span>, Status: Filled
    Filled: <span class="integer">100</span>, Status: Filled
    Filled: <span class="integer">100</span>, Status: Filled
  <span class="integer">5</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">44</span>:<span class="float">51.333085</span> | bid <span class="keyword">is</span> <span class="float">135.14</span>
  <span class="integer">6</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">44</span>:<span class="float">51.343326</span> | ask <span class="keyword">is</span> <span class="float">135.16</span>
  <span class="integer">7</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">44</span>:<span class="float">59.342581</span> | bid <span class="keyword">is</span> <span class="float">135.16</span>
  <span class="integer">8</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">44</span>:<span class="float">59.353576</span> | ask <span class="keyword">is</span> <span class="float">135.17</span>
  <span class="integer">9</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">45</span>:<span class="float">07.855217</span> | bid <span class="keyword">is</span> <span class="float">135.14</span>
 <span class="integer">10</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">45</span>:<span class="float">07.866124</span> | ask <span class="keyword">is</span> <span class="float">135.16</span>
 <span class="integer">11</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">45</span>:<span class="float">58.966638</span> | bid <span class="keyword">is</span> <span class="float">135.16</span>
 <span class="integer">12</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">45</span>:<span class="float">58.977207</span> | ask <span class="keyword">is</span> <span class="float">135.17</span>
 <span class="integer">13</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">46</span>:<span class="float">26.211742</span> | ask <span class="keyword">is</span> <span class="float">135.18</span>
 <span class="integer">14</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">46</span>:<span class="float">32.543550</span> | bid <span class="keyword">is</span> <span class="float">135.17</span>
 <span class="integer">15</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">46</span>:<span class="float">32.554671</span> | ask <span class="keyword">is</span> <span class="float">135.19</span>
 <span class="integer">16</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">46</span>:<span class="float">43.224134</span> | bid <span class="keyword">is</span> <span class="float">135.19</span>
 <span class="integer">17</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">46</span>:<span class="float">43.235763</span> | ask <span class="keyword">is</span> <span class="float">135.21</span>
 <span class="integer">18</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">46</span>:<span class="float">52.940754</span> | bid <span class="keyword">is</span> <span class="float">135.23</span>
 <span class="integer">19</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">46</span>:<span class="float">52.949703</span> | ask <span class="keyword">is</span> <span class="float">135.25</span>
 <span class="integer">20</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="float">17.408378</span> | bid <span class="keyword">is</span> <span class="float">135.25</span>
 <span class="integer">21</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="float">17.416878</span> | ask <span class="keyword">is</span> <span class="float">135.26</span>
 <span class="integer">22</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="float">34.905485</span> | bid <span class="keyword">is</span> <span class="float">135.27</span>
 <span class="integer">23</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="float">34.914984</span> | ask <span class="keyword">is</span> <span class="float">135.29</span>
 <span class="integer">24</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="float">49.306095</span> | bid <span class="keyword">is</span> <span class="float">135.25</span>
 <span class="integer">25</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="float">49.317150</span> | ask <span class="keyword">is</span> <span class="float">135.26</span>
 <span class="integer">26</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="float">49.554387</span> | ask <span class="keyword">is</span> <span class="float">135.25</span>
Order: SELL <span class="integer">100</span> AAPL
    Filled: <span class="integer">0</span>, Status: Submitted
    Filled: <span class="integer">100</span>, Status: Filled
    Filled: <span class="integer">100</span>, Status: Filled
 <span class="integer">27</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="float">49.657958</span> | ask <span class="keyword">is</span> <span class="float">135.26</span>
 <span class="integer">28</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="float">56.330200</span> | bid <span class="keyword">is</span> <span class="float">135.23</span>
 <span class="integer">29</span> |  <span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="float">56.339885</span> | ask <span class="keyword">is</span> <span class="float">135.25</span>

In [<span class="integer">18</span>]: con.cancel_market_data(request_id)  <i class="conum" data-value="5"></i><b>(5)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Sets the number of ticks retrieved to 0.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Sets the market position to 0 (neutral).</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Instantiates an empty <code>DataFrame</code> object to collect the tick data.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Starts the automated trading based on the <code>contract</code> object and the <code>SMAStrategy</code> function definition.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Stops the automated trading (manually).</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Since the respective <code>DataFrame</code> objects are declared to 
be global variables, their content can be accessed even after the 
execution of the trading strategy has been stopped.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">19</span>]: data.tail()  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">19</span>]:
                            ask     bid
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="float">49.317150</span>  <span class="float">135.26</span>  NaN
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="float">49.554387</span>  <span class="float">135.25</span>  NaN
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="float">49.657958</span>  <span class="float">135.26</span>  NaN
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="float">56.330200</span>  NaN <span class="float">135.23</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="float">56.339885</span>  <span class="float">135.25</span>  NaN

In [<span class="integer">20</span>]: resam.tail()  <i class="conum" data-value="2"></i><b>(2)</b>
                    ask     bid     SMA1    SMA2        position
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="integer">52</span> <span class="float">135.26</span>  <span class="float">135.25</span>  <span class="float">135.260</span> <span class="float">135.271667</span>  -<span class="integer">1</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="integer">53</span> <span class="float">135.26</span>  <span class="float">135.25</span>  <span class="float">135.255</span> <span class="float">135.269167</span>  -<span class="integer">1</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="integer">54</span> <span class="float">135.26</span>  <span class="float">135.25</span>  <span class="float">135.255</span> <span class="float">135.266667</span>  -<span class="integer">1</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="integer">55</span> <span class="float">135.26</span>  <span class="float">135.25</span>  <span class="float">135.255</span> <span class="float">135.264167</span>  -<span class="integer">1</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">15</span> <span class="integer">11</span>:<span class="integer">47</span>:<span class="integer">56</span> <span class="float">135.25</span>  <span class="float">135.23</span>  <span class="float">135.252</span> <span class="float">135.260567</span>  -<span class="integer">1</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The raw tick data as collected.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The resampled data with the SMAs and positionings.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_retrieving_account_information">9.8. Retrieving Account Information</h3>
<div class="paragraph">
<p>It is helpful to be able to programmatically retrieve account 
information from the IB API. In order to have some stock positions, the 
code below places buy orders for different symbols first.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">tpqib</span>

In [<span class="integer">2</span>]: con = tpqib.tpqibcon()
Server Version: <span class="integer">76</span>
TWS Time at connection:<span class="integer">20170103</span> <span class="integer">11</span>:<span class="integer">43</span>:<span class="octal">05</span> CET

In [<span class="integer">3</span>]: symbols = [<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">GOOG</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">YHOO</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">4</span>]: contracts = {sym: con.create_contract(sym, <span class="string"><span class="delimiter">'</span><span class="content">STK</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">SMART</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">SMART</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">USD</span><span class="delimiter">'</span></span>)
                     <span class="keyword">for</span> sym <span class="keyword">in</span> symbols}  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">5</span>]: contracts  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">5</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">AAPL</span><span class="delimiter">'</span></span>: &lt;ib.ext.Contract.Contract at <span class="hex">0x113b64a20</span>&gt;,
         <span class="string"><span class="delimiter">'</span><span class="content">GOOG</span><span class="delimiter">'</span></span>: &lt;ib.ext.Contract.Contract at <span class="hex">0x113b64a58</span>&gt;,
         <span class="string"><span class="delimiter">'</span><span class="content">YHOO</span><span class="delimiter">'</span></span>: &lt;ib.ext.Contract.Contract at <span class="hex">0x113b64b70</span>&gt;}

In [<span class="integer">6</span>]: buy_order = con.create_order(<span class="string"><span class="delimiter">'</span><span class="content">MKT</span><span class="delimiter">'</span></span>, <span class="integer">50</span>, <span class="string"><span class="delimiter">'</span><span class="content">Buy</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">7</span>]: <span class="keyword">for</span> sym <span class="keyword">in</span> symbols:
            con.place_order(contracts[sym], buy_order)  <i class="conum" data-value="5"></i><b>(5)</b>
Order: BUY <span class="integer">50</span> AAPL
    Filled: <span class="integer">0</span>, Status: Submitted
    Filled: <span class="integer">50</span>, Status: Filled
    Filled: <span class="integer">50</span>, Status: Filled
Order: BUY <span class="integer">50</span> GOOG
    Filled: <span class="integer">0</span>, Status: Submitted
    Filled: <span class="integer">50</span>, Status: Filled
    Filled: <span class="integer">50</span>, Status: Filled
Order: BUY <span class="integer">50</span> YHOO
    Filled: <span class="integer">0</span>, Status: Submitted
    Filled: <span class="integer">50</span>, Status: Filled
    Filled: <span class="integer">50</span>, Status: Filled

In [<span class="integer">8</span>]: con.req_positions()  <i class="conum" data-value="6"></i><b>(6)</b>
Quantity: <span class="integer">50</span>, Symbol: YHOO, Currency: USD, Average Cost: <span class="float">46.23</span>
Quantity: <span class="integer">50</span>, Symbol: AAPL, Currency: USD, Average Cost: <span class="float">135.28</span>
Quantity: <span class="integer">50</span>, Symbol: GOOG, Currency: USD, Average Cost: <span class="float">839.24</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Defines the symbols for which to place orders.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Creates a <code>dict</code> object with the contracts for the symbols …​</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>…​ and prints the object data.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Creates a buy order object for 50 shares.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Places buy orders for all symbols.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Shows the portfolio positions given the orders.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>In the same fashion, sell orders can be placed to clean up the portfolio.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">9</span>]: sell_order = con.create_order(<span class="string"><span class="delimiter">'</span><span class="content">MKT</span><span class="delimiter">'</span></span>, <span class="integer">50</span>, <span class="string"><span class="delimiter">'</span><span class="content">Sell</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">10</span>]: <span class="keyword">for</span> sym <span class="keyword">in</span> symbols:
             con.place_order(contracts[sym], sell_order)  <i class="conum" data-value="2"></i><b>(2)</b>
Order: SELL <span class="integer">50</span> AAPL
    Filled: <span class="integer">0</span>, Status: Submitted
Quantity: <span class="integer">0</span>, Symbol: AAPL, Currency: USD, Average Cost: <span class="float">0.0</span>
    Filled: <span class="integer">50</span>, Status: Filled
    Filled: <span class="integer">50</span>, Status: Filled
Order: SELL <span class="integer">50</span> GOOG
    Filled: <span class="integer">0</span>, Status: Submitted
Order: SELL <span class="integer">50</span> YHOO
    Filled: <span class="integer">0</span>, Status: Submitted
Quantity: <span class="integer">0</span>, Symbol: YHOO, Currency: USD, Average Cost: <span class="float">0.0</span>
    Filled: <span class="integer">50</span>, Status: Filled
Quantity: <span class="integer">0</span>, Symbol: GOOG, Currency: USD, Average Cost: <span class="float">0.0</span>
    Filled: <span class="integer">50</span>, Status: Filled
    Filled: <span class="integer">50</span>, Status: Filled
    Filled: <span class="integer">50</span>, Status: Filled

In [<span class="integer">13</span>]: con.req_positions()  <i class="conum" data-value="3"></i><b>(3)</b>
Quantity: <span class="integer">0</span>, Symbol: YHOO, Currency: USD, Average Cost: <span class="float">0.0</span>
Quantity: <span class="integer">0</span>, Symbol: AAPL, Currency: USD, Average Cost: <span class="float">0.0</span>
Quantity: <span class="integer">0</span>, Symbol: GOOG, Currency: USD, Average Cost: <span class="float">0.0</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>A sell order object is created.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The sell orders are placed; note that all orders are executed 
asynchronously to that some printed lines might appear in “not-expected”
 places.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The new portfolio positions are retrieved and shown.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_conclusions_9">9.9. Conclusions</h3>
<div class="paragraph">
<p>This chapter is about stock trading with Interactive Brokers, one of 
the leading online brokers for retail investors and traders. Python is 
not officially supported by Interactive Brokers. However, there are a 
few Python packages available as open source from which this chapter 
uses <a href="https://github.com/blampe/IbPy" target="_blank"><code>IbPy</code></a>.</p>
</div>
<div class="paragraph">
<p>To make life for the algorithmic trader a bit more convenient, the <code>IbPy</code> package is not used directly but rather wrapped into a Python class contained in the <code>tpqib</code> module (see <a href="#ib_wrapper_class">Python wrapper class for IB API based on <code>IbPy</code></a>). This simplifies the most common tasks when working with the IB API considerably and offers a modern user interface to do so.</p>
</div>
<div class="paragraph">
<p>In any case, this chapter shows an efficient and convenient approach 
to get started with algorithmic trading on the Interactive Brokers 
platform by using Python.</p>
</div>
</div>
<div class="sect2">
<h3 id="_further_resources_9">9.10. Further Resources</h3>
<div class="paragraph">
<p>Unfortunately, there are not too many resources available that show 
how to use Python in combination with the Interactive Brokers API. Most 
resources are in the form of videos (webinars, tutorials, etc.) 
available on YouTube. A search there might be a good starting point.</p>
</div>
<div class="paragraph">
<p>A major problem is that Interactive Brokers just recently started to 
officially support Python as a programming language to interact with the
 API. The hope remains that there will be more convenient “`official`” 
approaches available in the near future.</p>
</div>
<div class="paragraph">
<p>On the Github page of the <code>IbPy</code> package, you find a concise <a href="https://github.com/blampe/IbPy/wiki/Getting-Started" target="_blank">Getting Started page</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_python_scripts_7">9.11. Python Scripts</h3>
<div id="ib_wrapper_class" class="exampleblock">
<div class="title">Example 22. Python wrapper class for IB API based on <code>IbPy</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Wrapper Class for</span>
<span class="comment"># Interactive Brokers API</span>
<span class="comment"># based on IbPy</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">from</span> <span class="include">ib.ext.Contract</span> <span class="keyword">import</span> <span class="include">Contract</span>
<span class="keyword">from</span> <span class="include">ib.ext.Order</span> <span class="keyword">import</span> <span class="include">Order</span>
<span class="keyword">from</span> <span class="include">ib.ext.TickType</span> <span class="keyword">import</span> <span class="include">TickType</span> <span class="keyword">as</span> TickType
<span class="keyword">from</span> <span class="include">ib.opt.dispatcher</span> <span class="keyword">import</span> <span class="include">Dispatcher</span>
<span class="keyword">from</span> <span class="include">ib.opt.receiver</span> <span class="keyword">import</span> <span class="include">Receiver</span>
<span class="keyword">from</span> <span class="include">ib.opt.sender</span> <span class="keyword">import</span> <span class="include">Sender</span>

<span class="keyword">import</span> <span class="include">ib.opt</span>
<span class="keyword">from</span> <span class="include">time</span> <span class="keyword">import</span> <span class="include">sleep</span>
<span class="keyword">import</span> <span class="include">datetime</span> <span class="keyword">as</span> dt
<span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

EXCLUDE = [<span class="string"><span class="delimiter">'</span><span class="content">contractDetails</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">contractDetailsEnd</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">positionEnd</span><span class="delimiter">'</span></span>,
           <span class="string"><span class="delimiter">'</span><span class="content">error</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">accountSummary</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">openOrder</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">orderStatus</span><span class="delimiter">'</span></span>,
           <span class="string"><span class="delimiter">'</span><span class="content">execDetails</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">commissionReport</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">connectionClosed</span><span class="delimiter">'</span></span>,
           <span class="string"><span class="delimiter">'</span><span class="content">nextValidId</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">tickGeneric</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">tickString</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">tickSnapshotEnd</span><span class="delimiter">'</span></span>,
           <span class="string"><span class="delimiter">'</span><span class="content">tickPrice</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">tickSize</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">historicalData</span><span class="delimiter">'</span></span>]

VALID_BAR_SIZES = [<span class="string"><span class="delimiter">'</span><span class="content">1 sec</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">5 secs</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">10 secs</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">15 secs</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">30 secs</span><span class="delimiter">'</span></span>,
                   <span class="string"><span class="delimiter">'</span><span class="content">1 min</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2 mins</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">3 mins</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">5 mins</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">10 mins</span><span class="delimiter">'</span></span>,
                   <span class="string"><span class="delimiter">'</span><span class="content">15 mins</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">20 mins</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">30 mins</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">1 hour</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2 hours</span><span class="delimiter">'</span></span>,
                   <span class="string"><span class="delimiter">'</span><span class="content">3 hours</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">4 hours</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">8 hours</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">1 day</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">1 week</span><span class="delimiter">'</span></span>,
                   <span class="string"><span class="delimiter">'</span><span class="content">1 month</span><span class="delimiter">'</span></span>]

WHAT_TO_SHOW = [<span class="string"><span class="delimiter">'</span><span class="content">TRADES</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">MIDPOINT</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">ASK</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">BID</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">BID_ASK</span><span class="delimiter">'</span></span>,
                <span class="string"><span class="delimiter">'</span><span class="content">HISTORICAL_VOLATILITY</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">OPTION_IMPLIED_VOLATILITY</span><span class="delimiter">'</span></span>,
                <span class="string"><span class="delimiter">'</span><span class="content">REBATE_RATE</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">FREE_RATE</span><span class="delimiter">'</span></span>]

STREAMING_DATA_TYPES = [<span class="string"><span class="delimiter">'</span><span class="content">lastTimestamp</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">askPrice</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">askSize</span><span class="delimiter">'</span></span>,
                        <span class="string"><span class="delimiter">'</span><span class="content">bidPrice</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">bidSize</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">low</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">high</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">close</span><span class="delimiter">'</span></span>,
                        <span class="string"><span class="delimiter">'</span><span class="content">volume</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">lastPrice</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">lastSize</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">halted</span><span class="delimiter">'</span></span>]


<span class="keyword">class</span> <span class="class">tpqibcon</span>(ib.opt.Connection):
    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, host=<span class="string"><span class="delimiter">'</span><span class="content">127.0.0.1</span><span class="delimiter">'</span></span>, port=<span class="integer">7497</span>, clientId=<span class="integer">0</span>,
                 receiver=<span class="predefined-constant">None</span>, sender=<span class="predefined-constant">None</span>, dispatcher=<span class="predefined-constant">None</span>):
        dispatcher = Dispatcher() <span class="keyword">if</span> dispatcher <span class="keyword">is</span> <span class="predefined-constant">None</span> <span class="keyword">else</span> dispatcher
        receiver = Receiver(dispatcher) <span class="keyword">if</span> receiver <span class="keyword">is</span> <span class="predefined-constant">None</span> <span class="keyword">else</span> receiver
        sender = Sender(dispatcher) <span class="keyword">if</span> sender <span class="keyword">is</span> <span class="predefined-constant">None</span> <span class="keyword">else</span> sender
        <span class="predefined">super</span>(tpqibcon, <span class="predefined-constant">self</span>).__init__(
            host, port, clientId, receiver, sender, dispatcher)
        <span class="predefined-constant">self</span>.reported_orders = <span class="predefined">set</span>()
        <span class="predefined-constant">self</span>.next_order_id = <span class="predefined-constant">None</span>
        <span class="predefined-constant">self</span>.next_data_request_id = <span class="integer">1</span>
        <span class="predefined-constant">self</span>.ticker_data = <span class="predefined">dict</span>()
        <span class="predefined-constant">self</span>.tick_callbacks = <span class="predefined">dict</span>()
        <span class="predefined-constant">self</span>.print_once = <span class="predefined">set</span>()
        <span class="predefined-constant">self</span>.hist_data_loading = <span class="predefined">dict</span>()
        <span class="predefined-constant">self</span>.hist_data = <span class="predefined">dict</span>()
        <span class="keyword">try</span>:
            <span class="predefined-constant">self</span>.connect()
        <span class="keyword">except</span>:
            <span class="keyword">raise</span> <span class="exception">IOError</span>(<span class="string"><span class="delimiter">"</span><span class="content">Can not connect %s on port %s</span><span class="delimiter">"</span></span> % (host, port))
        sleep(<span class="integer">1</span>)
        <span class="predefined-constant">self</span>.register_handlers()
        <span class="predefined-constant">self</span>.reqIds(-<span class="integer">1</span>)

    <span class="keyword">def</span> <span class="function">register_handlers</span>(<span class="predefined-constant">self</span>):
        <span class="predefined-constant">self</span>.register(<span class="predefined-constant">self</span>.on_next_order_id, <span class="string"><span class="delimiter">'</span><span class="content">NextValidId</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.register(<span class="predefined-constant">self</span>.on_contract_details, <span class="string"><span class="delimiter">'</span><span class="content">ContractDetails</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.register(<span class="predefined-constant">self</span>.on_position_request, <span class="string"><span class="delimiter">'</span><span class="content">Position</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.register(<span class="predefined-constant">self</span>.on_account_summary, <span class="string"><span class="delimiter">'</span><span class="content">AccountSummary</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.register(<span class="predefined-constant">self</span>.on_open_order, <span class="string"><span class="delimiter">'</span><span class="content">OpenOrder</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.register(<span class="predefined-constant">self</span>.on_order_status, <span class="string"><span class="delimiter">'</span><span class="content">OrderStatus</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.register(<span class="predefined-constant">self</span>.on_commission_report, <span class="string"><span class="delimiter">'</span><span class="content">CommissionReport</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.register(<span class="predefined-constant">self</span>.on_connection_closed, <span class="string"><span class="delimiter">'</span><span class="content">ConnectionClosed</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.register(<span class="predefined-constant">self</span>.on_tick, <span class="string"><span class="delimiter">'</span><span class="content">TickSize</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.register(<span class="predefined-constant">self</span>.on_tick, <span class="string"><span class="delimiter">'</span><span class="content">TickPrice</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.register(<span class="predefined-constant">self</span>.on_tick, <span class="string"><span class="delimiter">'</span><span class="content">TickGeneric</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.register(<span class="predefined-constant">self</span>.on_tick, <span class="string"><span class="delimiter">'</span><span class="content">TickString</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.register(<span class="predefined-constant">self</span>.on_snapshot_end, <span class="string"><span class="delimiter">'</span><span class="content">TickSnapshotEnd</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.register(<span class="predefined-constant">self</span>.on_hist_data, <span class="string"><span class="delimiter">'</span><span class="content">HistoricalData</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.register(<span class="predefined-constant">self</span>.error_handler, <span class="string"><span class="delimiter">'</span><span class="content">Error</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.registerAll(<span class="predefined-constant">self</span>.reply_handler)

    <span class="keyword">def</span> <span class="function">create_contract</span>(<span class="predefined-constant">self</span>, symbol, sec_type, exch, prim_exch, curr):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Create a contract object defining what will</span><span class="content">
</span><span class="content">        be purchased, at which exchange and in which currency.</span><span class="content">
</span><span class="content">
</span><span class="content">        symbol - the ticker symbol for the contract</span><span class="content">
</span><span class="content">        sec_type - the security type for the contract ('STK' is 'stock')</span><span class="content">
</span><span class="content">        exch - the exchange to carry out the contract on</span><span class="content">
</span><span class="content">        prim_exch - the primary exchange to carry out the contract on</span><span class="content">
</span><span class="content">        curr - the currency in which to purchase the contract</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        contract = Contract()
        contract.m_symbol = symbol
        contract.m_secType = sec_type
        contract.m_exchange = exch
        contract.m_primaryExch = prim_exch
        contract.m_currency = curr
        <span class="keyword">return</span> contract

    <span class="keyword">def</span> <span class="function">create_order</span>(<span class="predefined-constant">self</span>, order_type, quantity, action):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Create an Order object (Market/Limit) to go long/short.</span><span class="content">
</span><span class="content">
</span><span class="content">        order_type - 'MKT', 'LMT' for market or limit orders</span><span class="content">
</span><span class="content">        quantity - integer number of units to order</span><span class="content">
</span><span class="content">        action - 'BUY' or 'SELL'</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        order = Order()
        order.m_orderType = order_type
        order.m_totalQuantity = quantity
        order.m_action = action
        <span class="keyword">return</span> order

    <span class="keyword">def</span> <span class="function">place_order</span>(<span class="predefined-constant">self</span>, contract, order):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Place the order for a given contract via TWS</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> <span class="keyword">not</span> <span class="predefined">isinstance</span>(contract, Contract):
            <span class="keyword">raise</span> <span class="exception">ValueError</span>(<span class="string"><span class="delimiter">'</span><span class="content">contract must be a Contract object</span><span class="delimiter">'</span></span>)
        <span class="keyword">if</span> <span class="keyword">not</span> <span class="predefined">isinstance</span>(order, Order):
            <span class="keyword">raise</span> <span class="exception">ValueError</span>(<span class="string"><span class="delimiter">'</span><span class="content">order must be an Order object</span><span class="delimiter">'</span></span>)

        <span class="predefined-constant">self</span>.placeOrder(<span class="predefined-constant">self</span>.next_order_id, contract, order)
        <span class="predefined-constant">self</span>.next_order_id += <span class="integer">1</span>

    <span class="keyword">def</span> <span class="function">req_positions</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Wrapper to request from TWS a list of positions</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.reqPositions()

    <span class="keyword">def</span> <span class="function">req_contract_details</span>(<span class="predefined-constant">self</span>, contract):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Wrapper to request from TWS details of a contract</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> <span class="keyword">not</span> <span class="predefined">isinstance</span>(contract, Contract):
            <span class="keyword">raise</span> <span class="exception">ValueError</span>(<span class="string"><span class="delimiter">'</span><span class="content">contract must be a Contract object</span><span class="delimiter">'</span></span>)
        <span class="predefined-constant">self</span>.reqContractDetails(<span class="integer">1</span>, contract)

    <span class="comment"># setter and getter methods</span>

    <span class="keyword">def</span> <span class="function">set_next_order_id</span>(<span class="predefined-constant">self</span>, order_id):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Sets the next order id, either when creating a new connection</span><span class="content">
</span><span class="content">        or when sending an open order</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.next_order_id = order_id

    <span class="keyword">def</span> <span class="function">get_next_order_id</span>(<span class="predefined-constant">self</span>):
        <span class="keyword">return</span> <span class="predefined-constant">self</span>.next_order_id

    <span class="keyword">def</span> <span class="function">get_market_data_once</span>(<span class="predefined-constant">self</span>, contract):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Sends a one time request for market data for a contract</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.print_once.add(<span class="predefined-constant">self</span>.next_data_request_id)
        <span class="predefined-constant">self</span>.reqMktData(<span class="predefined-constant">self</span>.next_data_request_id, contract, <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>, <span class="predefined-constant">True</span>)
        <span class="predefined-constant">self</span>.next_data_request_id += <span class="integer">1</span>

    <span class="keyword">def</span> <span class="function">request_market_data</span>(<span class="predefined-constant">self</span>, contract, callback=<span class="predefined-constant">None</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Sends a market data request for a contract to TWS,</span><span class="content">
</span><span class="content">        the response is streamed to the callback function until</span><span class="content">
</span><span class="content">        the request is canceled with self.cancel_market_data(request_id);</span><span class="content">
</span><span class="content">        if no callback is given, the results will be printed;</span><span class="content">
</span><span class="content">        returns the request_id</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.tick_callbacks[<span class="predefined-constant">self</span>.next_data_request_id] = callback
        <span class="predefined-constant">self</span>.reqMktData(<span class="predefined-constant">self</span>.next_data_request_id, contract, <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>, <span class="predefined-constant">False</span>)
        old = <span class="predefined-constant">self</span>.next_data_request_id
        <span class="predefined-constant">self</span>.next_data_request_id += <span class="integer">1</span>
        <span class="keyword">return</span> old

    <span class="keyword">def</span> <span class="function">cancel_market_data</span>(<span class="predefined-constant">self</span>, request_id):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Cancels a running market data request </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.cancelMktData(request_id)

    <span class="keyword">def</span> <span class="function">request_historical_data</span>(<span class="predefined-constant">self</span>, contract, end_date_time, duration,
                                bar_size, what_to_show, use_RTH=<span class="predefined-constant">True</span>,
                                format_date=<span class="integer">1</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Sends a historical data request for contract to the TWS,</span><span class="content">
</span><span class="content">        the response is streamed to the callback function until the request</span><span class="content">
</span><span class="content">        is canceld with self.cancel_market_data(request_id);</span><span class="content">
</span><span class="content">        returns the request_id</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> bar_size <span class="keyword">not</span> <span class="keyword">in</span> VALID_BAR_SIZES:
            <span class="keyword">raise</span> <span class="exception">ValueError</span>(<span class="string"><span class="delimiter">'</span><span class="content">bar_size must be one of %s</span><span class="delimiter">'</span></span> % VALID_BAR_SIZES)
        <span class="keyword">if</span> <span class="predefined">type</span>(use_RTH) != <span class="predefined">bool</span>:
            <span class="keyword">raise</span> <span class="exception">TypeError</span>(<span class="string"><span class="delimiter">'</span><span class="content">use_RTH must be of type bool</span><span class="delimiter">'</span></span>)
        <span class="keyword">elif</span> use_RTH <span class="keyword">is</span> <span class="predefined-constant">True</span>:
            use_RTH = <span class="predefined-constant">True</span>
        <span class="keyword">else</span>:
            use_RTH = <span class="predefined-constant">False</span>
        <span class="keyword">if</span> <span class="predefined">type</span>(end_date_time) != dt.datetime:
            <span class="keyword">raise</span> <span class="exception">TypeError</span>(<span class="string"><span class="delimiter">'</span><span class="content">end_date_time must be of type datetime</span><span class="delimiter">'</span></span>)
        <span class="keyword">else</span>:
            end_date_time = end_date_time.strftime(<span class="string"><span class="delimiter">'</span><span class="content">%Y%m%d %X</span><span class="delimiter">'</span></span>)
        <span class="keyword">if</span> what_to_show <span class="keyword">not</span> <span class="keyword">in</span> WHAT_TO_SHOW:
            <span class="keyword">raise</span> <span class="exception">ValueError</span>(<span class="string"><span class="delimiter">'</span><span class="content">what_to_show must be in %s</span><span class="delimiter">'</span></span> % WHAT_TO_SHOW)

        <span class="predefined-constant">self</span>.reqHistoricalData(<span class="predefined-constant">self</span>.next_data_request_id, contract,
                               endDateTime=end_date_time, durationStr=duration,
                               barSizeSetting=bar_size, whatToShow=what_to_show,
                               useRTH=<span class="predefined-constant">False</span>, formatDate=format_date)

        <span class="comment"># count request id</span>

        old = <span class="predefined-constant">self</span>.next_data_request_id
        <span class="predefined-constant">self</span>.next_data_request_id += <span class="integer">1</span>

        <span class="comment"># set loading flag for request id</span>

        <span class="predefined-constant">self</span>.hist_data_loading[old] = <span class="predefined-constant">True</span>
        <span class="keyword">return</span> old

    <span class="keyword">def</span> <span class="function">get_historical_data</span>(<span class="predefined-constant">self</span>, request_id, silent=<span class="predefined-constant">False</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Returns the historical data for a given request id,</span><span class="content">
</span><span class="content">        if silent equal to True, the 'is still loading' message will be ommited</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>

        <span class="keyword">if</span> request_id <span class="keyword">not</span> <span class="keyword">in</span> <span class="predefined-constant">self</span>.hist_data_loading:
            <span class="comment"># unknown request id</span>
            <span class="keyword">raise</span> <span class="exception">ValueError</span>(<span class="string"><span class="delimiter">'</span><span class="content">No data found for request id %s</span><span class="delimiter">'</span></span> % request_id)
        <span class="keyword">elif</span> <span class="predefined-constant">self</span>.hist_data_loading[request_id] <span class="keyword">is</span> <span class="predefined-constant">True</span>:
            <span class="comment"># still loading</span>
            <span class="keyword">if</span> <span class="keyword">not</span> silent:
                print(<span class="string"><span class="delimiter">"</span><span class="content">Historical data for request id %s still loading</span><span class="delimiter">"</span></span> %
                      request_id)
            <span class="keyword">return</span> <span class="predefined-constant">False</span>
        <span class="keyword">else</span>:
            <span class="keyword">return</span> <span class="predefined-constant">self</span>.hist_data[request_id]

    <span class="keyword">def</span> <span class="function">is_historical_data_loading</span>(<span class="predefined-constant">self</span>, request_id):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Returns True if the request with id request_id is still loading</span><span class="content">
</span><span class="content">        and False else</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> request_id <span class="keyword">not</span> <span class="keyword">in</span> <span class="predefined-constant">self</span>.hist_data_loading:
            <span class="comment"># unknown request id</span>
            <span class="keyword">raise</span> <span class="exception">ValueError</span>(<span class="string"><span class="delimiter">'</span><span class="content">No data found for request id %s</span><span class="delimiter">'</span></span> % request_id)
        <span class="keyword">elif</span> <span class="predefined-constant">self</span>.hist_data_loading[request_id] <span class="keyword">is</span> <span class="predefined-constant">True</span>:
            <span class="comment"># still loading</span>
            <span class="keyword">return</span> <span class="predefined-constant">True</span>
        <span class="keyword">else</span>:
            <span class="keyword">return</span> <span class="predefined-constant">False</span>

    <span class="comment"># callback functions for requests to TWS</span>

    <span class="keyword">def</span> <span class="function">on_contract_details</span>(<span class="predefined-constant">self</span>, msg):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Callback for connections</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        summary = msg.contractDetails.m_summary
        templ = <span class="string"><span class="delimiter">'</span><span class="content">Symbol: %s, Type: %s, Exchange: %s, Primary Exchange: %s,</span><span class="delimiter">'</span></span>
        templ += <span class="string"><span class="delimiter">'</span><span class="content">Currency: %s</span><span class="delimiter">'</span></span>
        out = templ % (summary.m_symbol, summary.m_secType, summary.m_exchange,
                       summary.m_primaryExch, summary.m_currency)
        print(out)

    <span class="keyword">def</span> <span class="function">on_position_request</span>(<span class="predefined-constant">self</span>, msg):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Callback for position requests</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        con = msg.contract
        pos = msg.pos
        avgCost = msg.avgCost
        templ = <span class="string"><span class="delimiter">'</span><span class="content">Quantity: %s, Symbol: %s, Currency: %s, Average Cost: %s</span><span class="delimiter">'</span></span>
        out = templ % (pos, con.m_symbol, con.m_currency, avgCost)
        print(out)

    <span class="keyword">def</span> <span class="function">on_account_summary</span>(<span class="predefined-constant">self</span>, msg):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Callback for account summary</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        print(<span class="string"><span class="delimiter">'</span><span class="content">%s: %s</span><span class="delimiter">'</span></span> % (msg.tag, msg.value))

    <span class="keyword">def</span> <span class="function">on_open_order</span>(<span class="predefined-constant">self</span>, msg):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Callback for open orders</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        con = msg.contract
        order = msg.order
        <span class="keyword">if</span> msg.orderId <span class="keyword">not</span> <span class="keyword">in</span> <span class="predefined-constant">self</span>.reported_orders:
            <span class="predefined-constant">self</span>.reported_orders.add(msg.orderId)
            print(<span class="string"><span class="delimiter">'</span><span class="content">Order: %s %s %s</span><span class="delimiter">'</span></span> %
                  (order.m_action, order.m_totalQuantity, con.m_symbol))

    <span class="keyword">def</span> <span class="function">on_order_status</span>(<span class="predefined-constant">self</span>, msg):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Callback for order status</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        print(<span class="string"><span class="delimiter">'</span><span class="content">    Filled: %s, Status: %s</span><span class="delimiter">'</span></span> % (msg.filled, msg.status))

    <span class="keyword">def</span> <span class="function">on_commission_report</span>(<span class="predefined-constant">self</span>, msg):
        <span class="keyword">pass</span>

    <span class="keyword">def</span> <span class="function">on_connection_closed</span>(<span class="predefined-constant">self</span>, msg):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Callback for closing connection</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        print(<span class="string"><span class="delimiter">'</span><span class="content">Bye.</span><span class="delimiter">'</span></span>)

    <span class="keyword">def</span> <span class="function">on_next_order_id</span>(<span class="predefined-constant">self</span>, msg):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Callback for next order id requests</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.set_next_order_id(msg.orderId)

    <span class="keyword">def</span> <span class="function">on_tick</span>(<span class="predefined-constant">self</span>, msg):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Callback for market data requests</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        tick_id = msg.tickerId
        <span class="keyword">if</span> msg.typeName == <span class="string"><span class="delimiter">'</span><span class="content">tickSize</span><span class="delimiter">'</span></span>:
            field_name = TickType.getField(msg.field)
            value = msg.size
        <span class="keyword">elif</span> msg.typeName == <span class="string"><span class="delimiter">'</span><span class="content">tickPrice</span><span class="delimiter">'</span></span>:
            field_name = TickType.getField(msg.field)
            value = msg.price
        <span class="keyword">elif</span> msg.typeName <span class="keyword">in</span> [<span class="string"><span class="delimiter">'</span><span class="content">tickGeneric</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">tickString</span><span class="delimiter">'</span></span>]:
            field_name = TickType.getField(msg.tickType)
            value = msg.value

        <span class="keyword">if</span> tick_id <span class="keyword">in</span> <span class="predefined-constant">self</span>.print_once:
            <span class="keyword">if</span> tick_id <span class="keyword">not</span> <span class="keyword">in</span> <span class="predefined-constant">self</span>.ticker_data:
                ticker_data = <span class="predefined">dict</span>()
            <span class="keyword">else</span>:
                ticker_data = <span class="predefined-constant">self</span>.ticker_data[tick_id]

            ticker_data[field_name] = value
            <span class="predefined-constant">self</span>.ticker_data[tick_id] = ticker_data
        <span class="keyword">elif</span> tick_id <span class="keyword">in</span> <span class="predefined-constant">self</span>.tick_callbacks:
            <span class="predefined-constant">self</span>.tick_callbacks[tick_id](field_name, value)

    <span class="keyword">def</span> <span class="function">on_snapshot_end</span>(<span class="predefined-constant">self</span>, msg):
        tick_id = msg.reqId
        tick_data = <span class="predefined-constant">self</span>.ticker_data[tick_id]
        timestamp = <span class="predefined">str</span>(dt.datetime.fromtimestamp(<span class="predefined">int</span>(tick_data[<span class="string"><span class="delimiter">'</span><span class="content">lastTimestamp</span><span class="delimiter">'</span></span>])))
        tick_string = <span class="string"><span class="delimiter">'</span><span class="content">Last timestamp: %s, Ask price: %s, Ask size: %s,</span><span class="delimiter">'</span></span>
        tick_string += <span class="string"><span class="delimiter">'</span><span class="content">Bid price: %s, Bid size: %s, Low: %s, </span><span class="delimiter">'</span></span>
        tick_string += <span class="string"><span class="delimiter">'</span><span class="content">High: %s, Close: %s, Volume: %s, Last price: %s,</span><span class="delimiter">'</span></span>
        tick_string += <span class="string"><span class="delimiter">'</span><span class="content">Last size: %s, Halted: %s</span><span class="delimiter">'</span></span>
        tick_string = tick_string % (timestamp,
                        tick_data[<span class="string"><span class="delimiter">'</span><span class="content">askPrice</span><span class="delimiter">'</span></span>], tick_data[<span class="string"><span class="delimiter">'</span><span class="content">askSize</span><span class="delimiter">'</span></span>],
                        tick_data[<span class="string"><span class="delimiter">'</span><span class="content">bidPrice</span><span class="delimiter">'</span></span>], tick_data[<span class="string"><span class="delimiter">'</span><span class="content">bidSize</span><span class="delimiter">'</span></span>],
                        tick_data[<span class="string"><span class="delimiter">'</span><span class="content">low</span><span class="delimiter">'</span></span>], tick_data[<span class="string"><span class="delimiter">'</span><span class="content">high</span><span class="delimiter">'</span></span>], tick_data[<span class="string"><span class="delimiter">'</span><span class="content">close</span><span class="delimiter">'</span></span>],
                        tick_data[<span class="string"><span class="delimiter">'</span><span class="content">volume</span><span class="delimiter">'</span></span>], tick_data[<span class="string"><span class="delimiter">'</span><span class="content">lastPrice</span><span class="delimiter">'</span></span>],
                        tick_data[<span class="string"><span class="delimiter">'</span><span class="content">lastSize</span><span class="delimiter">'</span></span>], tick_data[<span class="string"><span class="delimiter">'</span><span class="content">halted</span><span class="delimiter">'</span></span>])
        print(tick_string)

    <span class="keyword">def</span> <span class="function">on_hist_data</span>(<span class="predefined-constant">self</span>, msg):
        data_id = msg.reqId
        <span class="comment"># columns = msg.keys()</span>
        new_data = <span class="predefined">dict</span>()
        <span class="keyword">for</span> item <span class="keyword">in</span> msg.items():
            <span class="keyword">if</span> item[<span class="integer">0</span>] != <span class="string"><span class="delimiter">'</span><span class="content">reqId</span><span class="delimiter">'</span></span>:
                <span class="keyword">if</span> item[<span class="integer">0</span>] == <span class="string"><span class="delimiter">'</span><span class="content">date</span><span class="delimiter">'</span></span>:
                    date = item[<span class="integer">1</span>]
                    <span class="keyword">if</span> date[:<span class="integer">8</span>] == <span class="string"><span class="delimiter">'</span><span class="content">finished</span><span class="delimiter">'</span></span>:
                        <span class="predefined-constant">self</span>.hist_data[data_id] = <span class="predefined-constant">self</span>.hist_data[
                            data_id].set_index(<span class="string"><span class="delimiter">'</span><span class="content">date</span><span class="delimiter">'</span></span>)
                        <span class="predefined-constant">self</span>.hist_data_loading[data_id] = <span class="predefined-constant">False</span>
                        <span class="keyword">return</span> <span class="predefined-constant">True</span>
                    <span class="keyword">elif</span> <span class="predefined">len</span>(date) == <span class="integer">8</span>:
                        value = dt.datetime(
                            <span class="predefined">int</span>(date[:<span class="integer">4</span>]), <span class="predefined">int</span>(date[<span class="integer">4</span>:<span class="integer">6</span>]), <span class="predefined">int</span>(date[<span class="integer">6</span>:]))
                    <span class="keyword">else</span>:
                        time = date[<span class="integer">9</span>:].split(<span class="string"><span class="delimiter">"</span><span class="content">:</span><span class="delimiter">"</span></span>)
                        value = dt.datetime(<span class="predefined">int</span>(date[:<span class="integer">4</span>]), <span class="predefined">int</span>(date[<span class="integer">4</span>:<span class="integer">6</span>]), <span class="predefined">int</span>(
                          date[<span class="integer">6</span>:<span class="integer">8</span>]), <span class="predefined">int</span>(time[<span class="integer">0</span>]), <span class="predefined">int</span>(time[<span class="integer">1</span>]), <span class="predefined">int</span>(time[<span class="integer">2</span>]))
                <span class="keyword">else</span>:
                    value = item[<span class="integer">1</span>]

                new_data[item[<span class="integer">0</span>]] = value
        <span class="keyword">if</span> data_id <span class="keyword">not</span> <span class="keyword">in</span> <span class="predefined-constant">self</span>.hist_data:
            temp_data = pd.DataFrame([new_data])
        <span class="keyword">else</span>:
            temp_data = <span class="predefined-constant">self</span>.hist_data[data_id].append(
                new_data, ignore_index=<span class="predefined-constant">True</span>)
        <span class="predefined-constant">self</span>.hist_data[data_id] = temp_data

    <span class="keyword">def</span> <span class="function">error_handler</span>(<span class="predefined-constant">self</span>, msg):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Callback for errors</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> <span class="predefined">hasattr</span>(msg, <span class="string"><span class="delimiter">'</span><span class="content">id</span><span class="delimiter">'</span></span>) <span class="keyword">and</span> msg.id <span class="keyword">in</span> <span class="predefined-constant">self</span>.hist_data_loading:
            <span class="predefined-constant">self</span>.hist_data_loading[<span class="predefined">int</span>(msg.id)] = <span class="predefined-constant">False</span>
            <span class="predefined-constant">self</span>.hist_data[<span class="predefined">int</span>(msg.id)] = pd.DataFrame()

        print(<span class="string"><span class="delimiter">'</span><span class="content">Server Error: %s</span><span class="delimiter">'</span></span> % msg.errorMsg)

    <span class="keyword">def</span> <span class="function">reply_handler</span>(<span class="predefined-constant">self</span>, msg):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Callback for all other messages</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">if</span> msg.typeName <span class="keyword">not</span> <span class="keyword">in</span> EXCLUDE:
            print(<span class="string"><span class="delimiter">'</span><span class="content">Server Response: %s, %s</span><span class="delimiter">'</span></span> % (msg.typeName, msg))</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="trading_crypto">10. Trading Cryptocurrencies with Gemini</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph align_me_right">
<p>Bitcoin is the beginning of something great: a currency without a government, something necessary and imperative.</p>
</div>
</blockquote>
<div class="attribution">
— Nassim Nicholas Taleb
</div>
</div>
<div class="sect2">
<h3 id="_introduction_10">10.1. Introduction</h3>
<div class="paragraph">
<p>In recent years, digital currencies, like <a href="https://en.wikipedia.org/wiki/Bitcoin" target="_blank">Bitcoin</a>, and the technologies that enable them, like <a href="https://en.wikipedia.org/wiki/Blockchain_%28database%29" target="_blank">blockchain</a>,
 have gained much traction in the financial industry and beyond. Good 
introductions to these topics are Antonopoulos (2014) and Narayanan et 
al. (2016). For a Python-based introduction into major concepts watch 
the video <a href="https://www.youtube.com/watch?v=8ke8xn60MIc" target="_blank">Hashing, Encryption, Blockchain &amp; Bitcoin Mining with Python</a>.</p>
</div>
<div class="paragraph">
<p>The Bitcoin mining process ensures that the number of Bitcoins created over time grows almost linearly as shown in <a href="#bitcoin_01">Number of Bitcoins in existence (millions)</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">quandl</span> <span class="keyword">as</span> q  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: bn = q.get(<span class="string"><span class="delimiter">'</span><span class="content">BCHAIN/TOTBC</span><span class="delimiter">'</span></span>) / <span class="float">1e6</span>  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: bn.plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="3"></i><b>(3)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Import the Quandl Python package.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Retrieves the number of Bitcoins in existence as a time series and scales it to millions USD.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Plots the data.</td>
</tr>
</tbody></table>
</div>
<div id="bitcoin_01" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/bitcoin_01.png" alt="bitcoin 01">
</div>
<div class="title">Figure 65. Number of Bitcoins in existence (millions)</div>
</div>
<div class="paragraph">
<p>In 2016, the Bitcoin exchange rate versus the USD saw a major rally 
from about 400 USD to above 1,000 USD at the beginning of 2017 — it has 
been the best performing currency of 2016.<sup class="footnote">[<a id="_footnoteref_33" class="footnote" href="#_footnote_33" title="View footnote.">33</a>]</sup> In 2017 it seems set to reach the high of close to 1,200 USD as seen towards the end of 2013. <a href="#bitcoin_02">Bitcoin exchange rate in USD</a> shows the exchange rate since its inception in 2009.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">4</span>]: be = q.get(<span class="string"><span class="delimiter">'</span><span class="content">BCHAIN/MKPRU</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">5</span>]: be.plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Retrieves exchange rate time series data.</td>
</tr>
</tbody></table>
</div>
<div id="bitcoin_02" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/bitcoin_02.png" alt="bitcoin 02">
</div>
<div class="title">Figure 66. Bitcoin exchange rate in USD</div>
</div>
<div class="paragraph">
<p>With regard to market capitalization, Bitcoin has reached new highs 
since the end of 2016 — getting for the first time above 15 billion 
USD — and seems to be on its way towards 20 billion USD (see <a href="#bitcoin_03">Bitcoin market capitalization in billion USD</a>).
 This is still tiny compared to other established currencies (fiat 
money), like USD, GBP or EUR, but it shows the growing importance of 
cryptocurrencies among which Bitcoin is by far the biggest in terms of 
market capitalization.<sup class="footnote">[<a id="_footnoteref_34" class="footnote" href="#_footnote_34" title="View footnote.">34</a>]</sup> Another cryptocurrency that has gained popularity is Ether which is based on the <a href="https://en.wikipedia.org/wiki/Ethereum" target="_blank">Ethereum</a> blockchain protocol.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">6</span>]: bm = q.get(<span class="string"><span class="delimiter">'</span><span class="content">BCHAIN/MKTCP</span><span class="delimiter">'</span></span>) / <span class="float">1e9</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">7</span>]: bm.plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Retrieves market capitalization time series data and scales it to billions USD.</td>
</tr>
</tbody></table>
</div>
<div id="bitcoin_03" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/bitcoin_03.png" alt="bitcoin 03">
</div>
<div class="title">Figure 67. Bitcoin market capitalization in billion USD</div>
</div>
<div class="paragraph">
<p>Bitcoin trading is possible on different specialized platforms. This chapter introduces <a href="http://gemini.com/" target="_blank">Gemini</a> — see <a href="#gemini_01">Gemini cryptocurrency trading platform</a> 
— as one of the more important players with good application programming
 interfaces (APIs) available for automated, algorithmic trading. Gemini 
describes itself on its home page as follows:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>The next generation digital asset platform built for businesses and 
investors. Buy, sell, and store both bitcoin and ether with superior 
trading features, security, and regulatory oversight.</p>
</div>
</blockquote>
</div>
<div id="gemini_01" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/gemini_01.png" alt="gemini 01">
</div>
<div class="title">Figure 68. Gemini cryptocurrency trading platform</div>
</div>
<div class="paragraph">
<p>Again, we use the criteria for broker selection as outlined in <a href="#trading_oanda">CFD Trading with Oanda</a> to briefly characterizes Gemini as an online trading platform. BTC and ETH stand for Bitcoin and Ether, respectively.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>instruments</strong>: on the Gemini platform, you can trade three different trading pairs: BTC/USD, ETH/USD, ETH/BTC</p>
</li>
<li>
<p><strong>strategies</strong>: Gemini allows the buying and selling of 
BTC and ETH based on different order types (e.g. market, limit); all 
trades must be fully funded in advance ("full reserve exchange")</p>
</li>
<li>
<p><strong>costs</strong>: the platform features a <a href="https://gemini.com/fee-schedule/" target="_blank">detailed fee schedule</a>
 where the fee for smaller, liquidity-taking trades is 0.25% (25 basis 
points [bps]) on the value of the trade; there are different discounts 
available depending on trading behavior and volume</p>
</li>
<li>
<p><strong>technology</strong>: Gemini provides a modern <a href="https://docs.gemini.com/rest-api/" target="_blank">RESTful API</a>
 for historical data, streaming data, order book data, account data or 
order placement; in the documentation, Gemini provides examples of how 
to work with the API based on Python (see <a href="#gemini_02">Gemini API documentation</a>)</p>
</li>
<li>
<p><strong>jurisdiction</strong>: live accounts for Gemini are not 
available in every country/jurisdiction; however, sandbox account might 
be opened even from such countries where live trading is not (yet) 
possible</p>
</li>
</ul>
</div>
<div id="gemini_02" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/gemini_02.png" alt="gemini 02">
</div>
<div class="title">Figure 69. Gemini API documentation</div>
</div>
<div class="paragraph">
<p>There are some benefits worth mentioning with regard to 
cryptocurrency trading compared to stock/options trading or CFD trading,
 for example:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">low capital requirements</dt>
<dd>
<p>the capital requirements to trade cryptocurrencies are quite low so that even students and academics can get started with <em>real, live</em> algorithmic trading without much capital</p>
</dd>
<dt class="hdlist1">state-of-the-art technology</dt>
<dd>
<p>almost all players in the field are rather new and employ modern 
(web) technologies throughout; the whole field of cryptocurrencies is 
quite technology-driven which plays in the hands of algorithmic traders</p>
</dd>
<dt class="hdlist1">24/7 trading</dt>
<dd>
<p>regular financial markets have opening hours that span only a 
fraction of the day in general and are often closed during weekends; 
cryptocurrency markets are open around the clock, making continuous 
trading — without special effects during opening and closing 
times — possible</p>
</dd>
<dt class="hdlist1">full transparency</dt>
<dd>
<p>cryptocurrency exchanges and trading platforms generally provide full
 information about the order book so that every trader has full 
transparency of the market activity</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>These benefits make cryptocurrencies attractive as an entry point to 
algorithmic trading. The 24/7 trading and the full transparency make it 
also interesting for institutional players — in addition to the fact, 
that such digital assets represent a new asset class with distinct 
characteristics.</p>
</div>
</div>
<div class="sect2">
<h3 id="_setting_up_an_account_2">10.2. Setting Up an Account</h3>
<div class="paragraph">
<p>Setting up a sandbox account with Gemini is simple and can be done under <a href="https://exchange.sandbox.gemini.com/register" target="_blank">Gemini sandbox registration</a> (see <a href="#gemini_03">Gemini sandbox account registration</a>).
 You should make sure to choose a location (residency) where Gemini 
provides real trading accounts as well (like, for example, the United 
Kingdom). A mobile number is also to be provided for two way 
authentication.</p>
</div>
<div id="gemini_03" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/gemini_03.png" alt="gemini 03">
</div>
<div class="title">Figure 70. Gemini sandbox account registration</div>
</div>
<div class="paragraph">
<p>In what follows, it is expected that the credentials are stored in the <code>pyalgo.cfg</code> configuration file as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>[gemini]
key = YOUR_API_KEY
secret_key = YOUR_SECRET_API_KEY
url = https://api.sandbox.gemini.com/v1/</pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Setting up a sandbox account with Gemini is simple and allows the use
 of all API functionalities without having a real trading account with 
real funds. However, make sure to choose a resident country in which 
Gemini also offers real trading accounts.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_a_wrapper_class_for_the_gemini_api">10.3. A Wrapper Class for the Gemini API</h3>
<div class="paragraph">
<p><a href="#gemini_wrapper_class">Python wrapper class for Gemini API</a>
 provides a Python wrapper class for the Gemini API which makes 
interacting with the API really efficient and convenient. The class code
 contains also detailed docstrings which replicate in larger parts 
documentation texts from the <a href="https://docs.gemini.com/rest-api/" target="_blank">Gemini API documentation</a> for better understanding. The following code shows how to instantiate a connection object based on the class <code>pygem</code> and retrieves as a test the list of traded symbols (currency pairs).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">pygem</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: <span class="keyword">from</span> <span class="include">pygem</span> <span class="keyword">import</span> <span class="include">config</span>  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: con = pygem.pygem(config[<span class="string"><span class="delimiter">'</span><span class="content">gemini</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">key</span><span class="delimiter">'</span></span>],
                          config[<span class="string"><span class="delimiter">'</span><span class="content">gemini</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">secret_key</span><span class="delimiter">'</span></span>],
                          debug=<span class="predefined-constant">True</span>)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">4</span>]: res = con.get_symbols()  <i class="conum" data-value="4"></i><b>(4)</b>
URL:  https://api.sandbox.gemini.com/v1/symbols

In [<span class="integer">5</span>]: res  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">5</span>]: [<span class="string"><span class="delimiter">'</span><span class="content">btcusd</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">ethbtc</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">ethusd</span><span class="delimiter">'</span></span>]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the module with the main class <code>pygem</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Imports the credentials object based on the <code>pyalgo.cfg</code> configurations file.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Instantiates a connection object based on the main class.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Retrieves the symbols traded on the Gemini platform and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>…​ prints them.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Being connected to the Gemini API, allows you to also retrieve the current ticker information.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">6</span>]: con.get_ticker(<span class="string"><span class="delimiter">'</span><span class="content">btcusd</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>
URL:  https://api.sandbox.gemini.com/v1/pubticker/btcusd
Out[<span class="integer">6</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">907.01</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">bid</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">906.71</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">last</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">906.75</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">volume</span><span class="delimiter">'</span></span>: {<span class="string"><span class="delimiter">'</span><span class="content">BTC</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">462.00355504</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">USD</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">416800.1339967712</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="integer">1483962000000</span>}}

In [<span class="integer">7</span>]: con.get_ticker(<span class="string"><span class="delimiter">'</span><span class="content">ethusd</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>
URL:  https://api.sandbox.gemini.com/v1/pubticker/ethusd
Out[<span class="integer">7</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">10.78</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">bid</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">10.77</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">last</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">10.77</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">volume</span><span class="delimiter">'</span></span>: {<span class="string"><span class="delimiter">'</span><span class="content">ETH</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">36275.081049</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">USD</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">380005.44161323</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="integer">1483962000000</span>}}

In [<span class="integer">8</span>]: ticker = con.get_ticker(<span class="string"><span class="delimiter">'</span><span class="content">ethbtc</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="3"></i><b>(3)</b>
URL:  https://api.sandbox.gemini.com/v1/pubticker/ethbtc

In [<span class="integer">9</span>]: ticker  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">9</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.01173</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">bid</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.01172</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">last</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.01172</span><span class="delimiter">'</span></span>,
         <span class="string"><span class="delimiter">'</span><span class="content">volume</span><span class="delimiter">'</span></span>: {<span class="string"><span class="delimiter">'</span><span class="content">BTC</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">378.36205032532</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">ETH</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">32891.250696</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="integer">1483962300000</span>}}

In [<span class="integer">10</span>]: <span class="keyword">import</span> <span class="include">datetime</span> <span class="keyword">as</span> dt

In [<span class="integer">11</span>]: dt.datetime.fromtimestamp(<span class="predefined">int</span>(ticker[<span class="string"><span class="delimiter">'</span><span class="content">volume</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>]) / <span class="float">1e3</span>)  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">11</span>]: datetime.datetime(<span class="integer">2017</span>, <span class="integer">1</span>, <span class="integer">9</span>, <span class="integer">12</span>, <span class="integer">45</span>)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Retrieves ticker data for BTC/USD.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Retrieves ticker data for ETH/USD.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Retrieves ticker data for ETH/BTC …​</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>…​ and shows the data.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Transforms the timestamp to a <code>datetime</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Note that the data retrieved from the sandbox API does not 
necessarily reflect market and/or exchange realities. The sandbox 
accounts of Gemini are intended to allow for a risk-free, simple 
evaluation of the technology and to set everything up for live trading 
later on.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_retrieving_historical_data">10.4. Retrieving Historical Data</h3>
<div class="paragraph">
<p>Retrieving detailed historical trade information made simple by the use of the <code>get_trades_history</code> method. <a href="#bitcoin_04">Price and volume data for 500 Bitcoin trades on 09. January 2017 from 11am UK time</a> shows the data graphically for 500 trades from 09. January 2017.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">6</span>]: <span class="keyword">import</span> <span class="include">datetime</span> <span class="keyword">as</span> dt

In [<span class="integer">7</span>]: data = con.get_trades_history(<span class="string"><span class="delimiter">'</span><span class="content">btcusd</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="1"></i><b>(1)</b>
                                      since=dt.datetime(<span class="integer">2017</span>, <span class="integer">1</span>, <span class="integer">9</span>, <span class="integer">11</span>, <span class="integer">0</span>, <span class="integer">0</span>),  <i class="conum" data-value="2"></i><b>(2)</b>
                                      limit_trades=<span class="integer">500</span>,  <i class="conum" data-value="3"></i><b>(3)</b>
                                      include_breaks=<span class="predefined-constant">False</span>) <i class="conum" data-value="4"></i><b>(4)</b>
URL:  https://api.sandbox.gemini.com/v1/trades/btcusd<span class="error">?</span>since=<span class="integer">1483920000000</span>&amp;include_breaks=false&amp;limit_trades=<span class="integer">200</span>

In [<span class="integer">8</span>]: data.info()  <i class="conum" data-value="5"></i><b>(5)</b>
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">500</span> entries, <span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">09</span> <span class="octal">01</span>:<span class="integer">34</span>:<span class="integer">38</span> to <span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">09</span> <span class="octal">01</span>:<span class="octal">00</span>:<span class="octal">03</span>
Data columns (total <span class="integer">7</span> columns):
amount         <span class="integer">500</span> non-null float64
exchange       <span class="integer">500</span> non-null <span class="predefined">object</span>
price          <span class="integer">500</span> non-null float64
tid            <span class="integer">500</span> non-null int64
timestamp      <span class="integer">500</span> non-null int64
timestampms    <span class="integer">500</span> non-null int64
<span class="predefined">type</span>           <span class="integer">500</span> non-null <span class="predefined">object</span>
dtypes: float64(<span class="integer">2</span>), int64(<span class="integer">3</span>), <span class="predefined">object</span>(<span class="integer">2</span>)
memory usage: <span class="float">31.2</span>+ KB

In [<span class="integer">9</span>]: data.tail()  <i class="conum" data-value="6"></i><b>(6)</b>
                    amount  exch.   price   tid         timestamp   timestampms     <span class="predefined">type</span>
datetime
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">09</span> <span class="integer">12</span>:<span class="integer">16</span>:<span class="octal">01</span> <span class="float">0.002</span>   gemini  <span class="float">901.62</span>  <span class="integer">74597853</span>    <span class="integer">1483960561</span>  <span class="integer">1483960561740</span>   buy
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">09</span> <span class="integer">12</span>:<span class="integer">16</span>:<span class="octal">03</span> <span class="float">0.001</span>   gemini  <span class="float">901.62</span>  <span class="integer">74597869</span>    <span class="integer">1483960563</span>  <span class="integer">1483960563530</span>   buy
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">09</span> <span class="integer">12</span>:<span class="integer">16</span>:<span class="octal">05</span> <span class="float">0.002</span>   gemini  <span class="float">901.62</span>  <span class="integer">74597883</span>    <span class="integer">1483960565</span>  <span class="integer">1483960565035</span>   buy
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">09</span> <span class="integer">12</span>:<span class="integer">16</span>:<span class="octal">05</span> <span class="float">0.001</span>   gemini  <span class="float">901.62</span>  <span class="integer">74597890</span>    <span class="integer">1483960565</span>  <span class="integer">1483960565632</span>   buy
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">09</span> <span class="integer">12</span>:<span class="integer">16</span>:<span class="octal">06</span> <span class="float">0.001</span>   gemini  <span class="float">901.62</span>  <span class="integer">74597897</span>    <span class="integer">1483960566</span>  <span class="integer">1483960566031</span>   buy

In [<span class="integer">10</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>]].plot(secondary_y=<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>, figsize=(<span class="integer">10</span>, <span class="integer">6</span>))</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Retrieves the trade history for BTC/USD …​</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>…​ for the 9. January 2017, from 11 am UK time, …​</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>…​ limits the number of trades to 500 (which is the maximum anyways) and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>…​ excludes broken trades.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The wrapper class transforms the raw data by default to a <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The final five data rows from the <code>DataFrame</code> object.</td>
</tr>
</tbody></table>
</div>
<div id="bitcoin_04" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/bitcoin_04.png" alt="bitcoin 04">
</div>
<div class="title">Figure 71. Price and volume data for 500 Bitcoin trades on 09. January 2017 from 11am UK time</div>
</div>
<div class="paragraph">
<p>Order book data is also accessible at any time via the <code>get_current_order_book</code> method.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">10</span>]: order = con.get_current_order_book(<span class="string"><span class="delimiter">'</span><span class="content">btcusd</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="1"></i><b>(1)</b>
                                            limit_asks=<span class="integer">5</span>,  <i class="conum" data-value="2"></i><b>(2)</b>
                                            limit_bids=<span class="integer">5</span>)  <i class="conum" data-value="3"></i><b>(3)</b>
URL:  https://api.sandbox.gemini.com/v1/book/btcusd<span class="error">?</span>limit_bids=<span class="integer">5</span>&amp;limit_asks=<span class="integer">5</span>

In [<span class="integer">11</span>]: <span class="keyword">import</span> <span class="include">pprint</span>  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">12</span>]: pprint.pprint(order)  <i class="conum" data-value="5"></i><b>(5)</b>
{<span class="string"><span class="delimiter">'</span><span class="content">asks</span><span class="delimiter">'</span></span>: [{<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.73267397</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">907.02</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1483962806</span><span class="delimiter">'</span></span>},
          {<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">3.22</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">907.06</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1483962806</span><span class="delimiter">'</span></span>},
          {<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.01378985</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">907.08</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1483962806</span><span class="delimiter">'</span></span>},
          {<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.342436</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">907.10</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1483962806</span><span class="delimiter">'</span></span>},
          {<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.843</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">907.15</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1483962806</span><span class="delimiter">'</span></span>}],
 <span class="string"><span class="delimiter">'</span><span class="content">bids</span><span class="delimiter">'</span></span>: [{<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.59913323</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">907.01</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1483962806</span><span class="delimiter">'</span></span>},
          {<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.002</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">906.68</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1483962806</span><span class="delimiter">'</span></span>},
          {<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.002</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">906.62</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1483962806</span><span class="delimiter">'</span></span>},
          {<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.001</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">906.59</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1483962806</span><span class="delimiter">'</span></span>},
          {<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.002</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">906.56</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1483962806</span><span class="delimiter">'</span></span>}]}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Retrieves current order book data for BTC/USD and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>…​ limits the number of asks to 5 and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>…​ the number of bids to 5, respectively.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Imports the pretty printing module.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Prints the order book data.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>From the order book data you can, for example, get a detailed overview of the frequency of the bid prices.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">13</span>]: order = con.get_current_order_book(<span class="string"><span class="delimiter">'</span><span class="content">btcusd</span><span class="delimiter">'</span></span>,
                                            limit_asks=<span class="integer">500</span>,
                                            limit_bids=<span class="integer">500</span>)
URL:  https://api.sandbox.gemini.com/v1/book/btcusd<span class="error">?</span>limit_bids=<span class="integer">500</span>&amp;limit_asks=<span class="integer">500</span>

In [<span class="integer">14</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

In [<span class="integer">15</span>]: bids = pd.DataFrame(order[<span class="string"><span class="delimiter">'</span><span class="content">bids</span><span class="delimiter">'</span></span>])  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">16</span>]: bids[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].astype(<span class="predefined">float</span>).hist(bins=<span class="integer">50</span>, figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="2"></i><b>(2)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Creates a <code>DataFrame</code> object from the <code>bid</code> data sub-set.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Plots a histogram of the <code>bid</code> prices.</td>
</tr>
</tbody></table>
</div>
<div id="bitcoin_05" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/bitcoin_05.png" alt="bitcoin 05">
</div>
<div class="title">Figure 72. Frequency distribution of the Bitcoin bid prices in USD in the order book during a day in January 2017</div>
</div>
</div>
<div class="sect2">
<h3 id="_placing_and_managing_orders_via_the_api">10.5. Placing and Managing Orders via the API</h3>
<div class="paragraph">
<p>To implement automated, algorithmic trading strategies, the ability to programmatically place buy and sell orders is key. The <code>pygem</code>
 class supports with this as well. The following code places first a 
limit buy order with a high enough price to get it executed in any case 
(well above the then current Bitcoin price). It also places an order 
with a price below the then current Bitcoin price.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">17</span>]: new_order_result_1 = con.new_order(symbol=<span class="string"><span class="delimiter">'</span><span class="content">btcusd</span><span class="delimiter">'</span></span>, amount=<span class="float">0.001</span>,
                                            price=<span class="integer">1000</span>, side=<span class="string"><span class="delimiter">'</span><span class="content">buy</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>
URL:  https://api.sandbox.gemini.com/v1/order/new
Payload:  {<span class="string"><span class="delimiter">"</span><span class="content">nonce</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">14840414264450050048</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">amount</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">0.001</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">symbol</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">btcusd</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">side</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">buy</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">type</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">exchange limit</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">request</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">/v1/order/new</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">price</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">1000.0</span><span class="delimiter">"</span></span>}

In [<span class="integer">18</span>]: new_order_result_1  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">18</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">avg_execution_price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.00</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">exchange</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">gemini</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">executed_amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">id</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">75162062</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">is_cancelled</span><span class="delimiter">'</span></span>: <span class="predefined-constant">False</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">is_hidden</span><span class="delimiter">'</span></span>: <span class="predefined-constant">False</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">is_live</span><span class="delimiter">'</span></span>: <span class="predefined-constant">True</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">order_id</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">75162062</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">original_amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.001</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1000.00</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">remaining_amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.001</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">side</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">buy</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">symbol</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">btcusd</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1484041427</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">timestampms</span><span class="delimiter">'</span></span>: <span class="integer">1484041427337</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">type</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">exchange limit</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">was_forced</span><span class="delimiter">'</span></span>: <span class="predefined-constant">False</span>}

In [<span class="integer">18</span>]: new_order_result_2 = con.new_order(symbol=<span class="string"><span class="delimiter">'</span><span class="content">btcusd</span><span class="delimiter">'</span></span>, amount=<span class="float">0.0001</span>,
                                            price=<span class="integer">900</span>, side=<span class="string"><span class="delimiter">'</span><span class="content">buy</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="3"></i><b>(3)</b>
URL:  https://api.sandbox.gemini.com/v1/order/new
Payload:  {<span class="string"><span class="delimiter">"</span><span class="content">nonce</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">14840418723577749504</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">amount</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">0.0001</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">symbol</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">btcusd</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">side</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">buy</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">type</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">exchange limit</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">request</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">/v1/order/new</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">price</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">900.0</span><span class="delimiter">"</span></span>}

In [<span class="integer">19</span>]: new_order_result_2
Out[<span class="integer">19</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">avg_execution_price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.00</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">exchange</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">gemini</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">executed_amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">id</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">75162932</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">is_cancelled</span><span class="delimiter">'</span></span>: <span class="predefined-constant">False</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">is_hidden</span><span class="delimiter">'</span></span>: <span class="predefined-constant">False</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">is_live</span><span class="delimiter">'</span></span>: <span class="predefined-constant">True</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">order_id</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">75162932</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">original_amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0001</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">900.00</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">remaining_amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0001</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">side</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">buy</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">symbol</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">btcusd</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1484041873</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">timestampms</span><span class="delimiter">'</span></span>: <span class="integer">1484041873190</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">type</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">exchange limit</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">was_forced</span><span class="delimiter">'</span></span>: <span class="predefined-constant">False</span>}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Places the first order at a high price (well above the then current price) …​</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>…​ and shows the confirmation as retrieved from the API.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Places the second order at a relatively low price (slightly below 
the then current price); only gets fulfilled if the Bitcoin price in USD
 drops below the limit price.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Gemini places lots of emphasis on security. One of the measures is 
that you receive an email confirming the order placement. Here the 
confirmation for the first order:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>Hi Yves Hilpisch,

Success! Your limit buy order for 0.001 BTC at $1,000.00 per BTC has been placed. If your order gets filled, you will receive another confirmation email.

Order Date: January 10, 2017 09:43:47 UTC
Order Type: Limit Buy
Order ID: 75162062

Amount: 0.001 BTC
Price: $1,000.00 per BTC

Subtotal: $1.00
Fee: $0.01
Total: $1.01

If you did not initiate this transaction, or if you wish to dispute this order, you must contact us at support@gemini.com or +1 (866) 240-5113 within three (3) days.

Onward and upward,

Team Gemini</pre>
</div>
</div>
<div class="paragraph">
<p>And the one for the second order:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>Hi Yves Hilpisch,

Success! Your limit buy order for 0.0001 BTC at $900.00 per BTC has been placed. If your order gets filled, you will receive another confirmation email.

Order Date: January 10, 2017 09:51:13 UTC
Order Type: Limit Buy
Order ID: 75162932

Amount: 0.0001 BTC
Price: $900.00 per BTC

Subtotal: $0.09
Fee: $0.01
Total: $0.10

If you did not initiate this transaction, or if you wish to dispute this order, you must contact us at support@gemini.com or +1 (866) 240-5113 within three (3) days.

Onward and upward,

Team Gemini</pre>
</div>
</div>
<div class="paragraph">
<p>As long as the order are not executed, you can see them in your account under <code>Open Orders</code> as shown in <a href="#gemini_04">Open orders in the Gemini sandbox account</a>.</p>
</div>
<div id="gemini_04" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/gemini_04.png" alt="gemini 04">
</div>
<div class="title">Figure 73. Open orders in the Gemini sandbox account</div>
</div>
<div class="paragraph">
<p>Once an order gets filled, another email is sent by Gemini confirming
 it. As you can see in the confirmation, the total cash in USD spent is 
only 1 and the fee is 0.01 dollar cents.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>Hi Yves Hilpisch,

Success! Your limit buy order for 0.001 BTC at $1,000.00 per BTC has been filled.

Order Date: January 10, 2017 09:43:47 UTC
Order Filled: January 10, 2017 10:06:44 UTC
Order Type: Limit Buy
Individual Trades: 1
Order ID: 75162062

Amount: 0.001 BTC
Price: $1,000.00 per BTC

Subtotal: $1.00
Fee: $0.01
Total: $1.01

If you did not initiate this transaction, or if you wish to dispute this order, you must contact us at support@gemini.com or +1 (866) 240-5113 within three (3) days.

Onward and upward,

Team Gemini</pre>
</div>
</div>
<div class="paragraph">
<p>The status of open orders can be checked via the API as well. Similarly, an open order can be canceled via the API.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">20</span>]: order_id = new_order_result_2[<span class="string"><span class="delimiter">'</span><span class="content">order_id</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">21</span>]: status = con.get_order_status(order_id)  <i class="conum" data-value="2"></i><b>(2)</b>
URL:  https://api.sandbox.gemini.com/v1/order/status
Payload:  {<span class="string"><span class="delimiter">"</span><span class="content">order_id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">75162932</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">nonce</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">14840433908499998720</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">request</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">/v1/order/status</span><span class="delimiter">"</span></span>}

In [<span class="integer">22</span>]: status  <i class="conum" data-value="3"></i><b>(3)</b>
In [<span class="integer">22</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">avg_execution_price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.00</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">exchange</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">gemini</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">executed_amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">id</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">75162932</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">is_cancelled</span><span class="delimiter">'</span></span>: <span class="predefined-constant">False</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">is_hidden</span><span class="delimiter">'</span></span>: <span class="predefined-constant">False</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">is_live</span><span class="delimiter">'</span></span>: <span class="predefined-constant">True</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">order_id</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">75162932</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">original_amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0001</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">900.00</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">remaining_amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0001</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">side</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">buy</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">symbol</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">btcusd</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1484041873</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">timestampms</span><span class="delimiter">'</span></span>: <span class="integer">1484041873190</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">type</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">exchange limit</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">was_forced</span><span class="delimiter">'</span></span>: <span class="predefined-constant">False</span>}

In [<span class="integer">23</span>]: <span class="comment"># orders = con.get_active_orders() </span><i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">24</span>]: cancel = con.cancel_order(order_id)  <i class="conum" data-value="5"></i><b>(5)</b>
URL:  https://api.sandbox.gemini.com/v1/order/cancel
Payload:  {<span class="string"><span class="delimiter">"</span><span class="content">order_id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">75162932</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">nonce</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">14840436413132720128</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">request</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">/v1/order/cancel</span><span class="delimiter">"</span></span>}

In [<span class="integer">25</span>]: cancel  <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">25</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">avg_execution_price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.00</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">exchange</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">gemini</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">executed_amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">id</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">75162932</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">is_cancelled</span><span class="delimiter">'</span></span>: <span class="predefined-constant">True</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">is_hidden</span><span class="delimiter">'</span></span>: <span class="predefined-constant">False</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">is_live</span><span class="delimiter">'</span></span>: <span class="predefined-constant">False</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">order_id</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">75162932</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">original_amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0001</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">900.00</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">remaining_amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">0.0001</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">side</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">buy</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">symbol</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">btcusd</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1484041873</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">timestampms</span><span class="delimiter">'</span></span>: <span class="integer">1484041873190</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">type</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">exchange limit</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">was_forced</span><span class="delimiter">'</span></span>: <span class="predefined-constant">False</span>}

In [<span class="integer">25</span>]: <span class="comment"># cancel = con.cancel_all_session_orders()  </span> <i class="conum" data-value="7"></i><b>(7)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Picks the <code>order_id</code> for the second order.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Retrieves the status information for the order …​</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>…​ and shows it.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Alternatively, the <code>get_active_orders</code> method retrieves status information for all open orders.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Cancels the order and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>…​ and shows the result (<code>'is_cancelled': True</code>).</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Alternatively, all open orders of a session can be canceled at once via the <code>cancel_all_session_orders</code> method.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>After cancellation, Gemini sends again an email confirmation:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>Hi Yves Hilpisch,

Your limit buy order for 0.0001 BTC at $900.00 per BTC has been canceled.

If you did not initiate this transaction, or if you wish to dispute this order, you must contact us at support@gemini.com or +1 (866) 240-5113 within three (3) days.

Onward and upward,

Team Gemini</pre>
</div>
</div>
<div class="paragraph">
<p>In the sandbox account, you find information about the to transactions (one order filled, the other canceled) under <code>Transaction History</code> (see <a href="#gemini_05">Transaction history in Gemini sandbox account</a>).</p>
</div>
<div id="gemini_05" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/gemini_05.png" alt="gemini 05">
</div>
<div class="title">Figure 74. Transaction history in Gemini sandbox account</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Gemini places heavy emphasis on security. For example, it requires a 
two-way authentication process using a regular login in combination with
 a pass code sent to your mobile phone (see <a href="#gemini_06">Two way authentication with pass code via text message to mobile</a>). It also notifies you by email about every important account activity.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div id="gemini_06" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/gemini_06.png" alt="gemini 06">
</div>
<div class="title">Figure 75. Two way authentication with pass code via text message to mobile</div>
</div>
</div>
<div class="sect2">
<h3 id="_most_recent_transaction_history">10.6. Most Recent Transaction History</h3>
<div class="paragraph">
<p>The first step in automatically trading in real-time is to get 
real-time information from the API. This can be achieved, for example, 
via the <code>get_trades_history</code> method and pulling the trades history in regular time intervals.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">pygem</span>

In [<span class="integer">2</span>]: <span class="keyword">from</span> <span class="include">pygem</span> <span class="keyword">import</span> <span class="include">config</span>

In [<span class="integer">3</span>]: con = pygem.pygem(config[<span class="string"><span class="delimiter">'</span><span class="content">gemini</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">key</span><span class="delimiter">'</span></span>],
                          config[<span class="string"><span class="delimiter">'</span><span class="content">gemini</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">secret_key</span><span class="delimiter">'</span></span>],
                          debug=<span class="predefined-constant">False</span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">4</span>]: since = dt.datetime.now() - dt.timedelta(hours=<span class="float">1.1</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">5</span>]: <span class="keyword">import</span> <span class="include">time</span>

In [<span class="integer">6</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">12</span>):
            trades = con.get_trades_history(<span class="string"><span class="delimiter">'</span><span class="content">ethusd</span><span class="delimiter">'</span></span>, since=since,
                                            limit_trades=<span class="integer">500</span>, include_breaks=<span class="predefined-constant">False</span>)  <i class="conum" data-value="3"></i><b>(3)</b>
            print(<span class="integer">40</span> * <span class="string"><span class="delimiter">'</span><span class="content">-</span><span class="delimiter">'</span></span>)
            print(<span class="string"><span class="delimiter">'</span><span class="content">timestamp %s</span><span class="delimiter">'</span></span> % dt.datetime.fromtimestamp(
                                    <span class="predefined">float</span>(trades[<span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>])))  <i class="conum" data-value="4"></i><b>(4)</b>
            print(<span class="string"><span class="delimiter">'</span><span class="content">#   trades: %d</span><span class="delimiter">'</span></span> % <span class="predefined">len</span>(trades))  <i class="conum" data-value="5"></i><b>(5)</b>
            print(<span class="string"><span class="delimiter">'</span><span class="content">ave. price: %f</span><span class="delimiter">'</span></span> % <span class="predefined">float</span>(trades[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].mean()))  <i class="conum" data-value="6"></i><b>(6)</b>
            print(<span class="string"><span class="delimiter">'</span><span class="content">min  price: %f</span><span class="delimiter">'</span></span> % <span class="predefined">float</span>(trades[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].min()))  <i class="conum" data-value="7"></i><b>(7)</b>
            print(<span class="string"><span class="delimiter">'</span><span class="content">max  price: %f</span><span class="delimiter">'</span></span> % <span class="predefined">float</span>(trades[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].max()))  <i class="conum" data-value="8"></i><b>(8)</b>
            print(<span class="string"><span class="delimiter">'</span><span class="content">last price: %f</span><span class="delimiter">'</span></span> % <span class="predefined">float</span>(trades[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>]))  <i class="conum" data-value="9"></i><b>(9)</b>
            time.sleep(<span class="integer">5</span>)  <i class="conum" data-value="10"></i><b>(10)</b></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre>----------------------------------------
timestamp 2017-01-10 12:26:59
#   trades: 106
ave. price: 10.481038
min  price: 10.460000
max  price: 10.500000
last price: 10.460000
----------------------------------------
timestamp 2017-01-10 12:26:59
#   trades: 106  <i class="conum" data-value="11"></i><b>(11)</b>
ave. price: 10.481038
min  price: 10.460000
max  price: 10.500000
last price: 10.460000
----------------------------------------
timestamp 2017-01-10 12:27:16
#   trades: 114  <i class="conum" data-value="12"></i><b>(12)</b>
ave. price: 10.479561
min  price: 10.460000
max  price: 10.500000
last price: 10.460000
----------------------------------------
timestamp 2017-01-10 12:27:20
#   trades: 116
ave. price: 10.479224
min  price: 10.460000
max  price: 10.500000
last price: 10.460000
----------------------------------------
timestamp 2017-01-10 12:27:25
#   trades: 120
ave. price: 10.478583
min  price: 10.460000
max  price: 10.500000
last price: 10.460000
----------------------------------------
timestamp 2017-01-10 12:27:32
#   trades: 122
ave. price: 10.478279
min  price: 10.460000
max  price: 10.500000
last price: 10.460000</pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This time, the <code>debug</code> flag is set to <code>False</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Sets the time window a bit more than an hour.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Retrieves the maximum number of trades of Ether for the time window.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Print the last available timestamp.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Shows the number of trades in the <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Prints the average price from all trades</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>The minimum price.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>The maximum price.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>And the last available price.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>Waits for 5 seconds.</td>
</tr>
<tr>
<td><i class="conum" data-value="11"></i><b>11</b></td>
<td>No new trades.</td>
</tr>
<tr>
<td><i class="conum" data-value="12"></i><b>12</b></td>
<td>New trades are included.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Although this works in principle, the better way is using the <a href="https://docs.gemini.com/websocket-api/" target="_blank">Gemini’s web socket API</a> which is shown in the next section.</p>
</div>
</div>
<div class="sect2">
<h3 id="_implementing_trading_strategies_in_real_time_2">10.7. Implementing Trading Strategies in Real-Time</h3>
<div class="paragraph">
<p>First, a simple example of how to retrieve, collect and resample tick data for the BTC/USD pair. At the core is the <code>on_message</code>
 function which defines what to do with the data set retrieved via the 
socket. In line with the Gemini documentation, the example below uses 
the <code>websocket</code> module from the Python standard library.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">json</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

In [<span class="integer">3</span>]: data = pd.DataFrame()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">4</span>]: messages = []  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">5</span>]: <span class="keyword">def</span> <span class="function">on_message</span>(ws, message):
            <span class="keyword">global</span> data  <i class="conum" data-value="4"></i><b>(4)</b>
            <span class="keyword">global</span> resam  <i class="conum" data-value="4"></i><b>(4)</b>
            timestamp = dt.datetime.now()  <i class="conum" data-value="5"></i><b>(5)</b>
            msg = json.loads(message)  <i class="conum" data-value="6"></i><b>(6)</b>
            <span class="keyword">try</span>:
                side = msg[<span class="string"><span class="delimiter">'</span><span class="content">events</span><span class="delimiter">'</span></span>][<span class="integer">0</span>][<span class="string"><span class="delimiter">'</span><span class="content">side</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="7"></i><b>(7)</b>
                price = <span class="predefined">float</span>(msg[<span class="string"><span class="delimiter">'</span><span class="content">events</span><span class="delimiter">'</span></span>][<span class="integer">0</span>][<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>])  <i class="conum" data-value="8"></i><b>(8)</b>
                <span class="keyword">if</span> msg[<span class="string"><span class="delimiter">'</span><span class="content">type</span><span class="delimiter">'</span></span>] == <span class="string"><span class="delimiter">'</span><span class="content">update</span><span class="delimiter">'</span></span>:  <i class="conum" data-value="9"></i><b>(9)</b>
                    print(<span class="string"><span class="delimiter">'</span><span class="content">%s | %s price = %f</span><span class="delimiter">'</span></span> % (timestamp, side, price))  <i class="conum" data-value="10"></i><b>(10)</b>
                    data = data.append(pd.DataFrame({side: price},
                                       index=[timestamp]))  <i class="conum" data-value="11"></i><b>(11)</b>
                    messages.append(message)  <i class="conum" data-value="12"></i><b>(12)</b>
                    resam = data.resample(<span class="string"><span class="delimiter">'</span><span class="content">5s</span><span class="delimiter">'</span></span>).last().ffill()  <i class="conum" data-value="13"></i><b>(13)</b>
                    resam[<span class="string"><span class="delimiter">'</span><span class="content">mid</span><span class="delimiter">'</span></span>] = resam.mean(axis=<span class="integer">1</span>)  <i class="conum" data-value="14"></i><b>(14)</b>
            <span class="keyword">except</span>:
                <span class="keyword">pass</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Import the <code>json</code> module to transform text messages into <code>dict</code> objects.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Instantiates a new <code>DataFrame</code> object for the tick data.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Instantiates an empty <code>list</code> object to collect the text messages.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Defines the global variables for data collection.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Records a timestamp value.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Transforms the text message to a <code>dict</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Picks the side of the transaction (<code>bid</code> or <code>ask</code>).</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Picks the price for the BTC/USD pair.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>Selects certain message types.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>Prints <code>timestamp, side, price</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="11"></i><b>11</b></td>
<td>Appends the new tick data to the <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="12"></i><b>12</b></td>
<td>Appends the text message to the <code>list</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="13"></i><b>13</b></td>
<td>Resamples the tick data to a five second interval.</td>
</tr>
<tr>
<td><i class="conum" data-value="14"></i><b>14</b></td>
<td>Calculates mid-price points between bid and ask prices.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>This function alone does not do anything. However, in combination 
with a socket connection to the Gemini API, it shows its capabilities.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">6</span>]: <span class="keyword">import</span> <span class="include">websocket</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">7</span>]: ws = websocket.WebSocketApp(<span class="string"><span class="delimiter">'</span><span class="content">wss://api.gemini.com/v1/marketdata/BTCUSD</span><span class="delimiter">'</span></span>,
                                    on_message=on_message)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">8</span>]: ws.run_forever(ping_interval=<span class="integer">5</span>)  <i class="conum" data-value="3"></i><b>(3)</b></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre>...
2017-01-11 12:45:14.605230 | bid price = 804.620000
2017-01-11 12:45:15.029564 | bid price = 834.210000
2017-01-11 12:45:15.035579 | bid price = 833.700000
2017-01-11 12:45:15.095708 | ask price = 847.490000
2017-01-11 12:45:15.110234 | ask price = 844.080000
2017-01-11 12:45:15.168822 | ask price = 843.870000
2017-01-11 12:45:15.250911 | bid price = 837.830000
2017-01-11 12:45:15.267525 | ask price = 844.490000
2017-01-11 12:45:15.320955 | bid price = 837.830000
2017-01-11 12:45:15.345908 | ask price = 844.010000
2017-01-11 12:45:15.431703 | ask price = 844.880000
2017-01-11 12:45:15.527795 | ask price = 844.400000
2017-01-11 12:45:15.590530 | bid price = 825.380000
2017-01-11 12:45:15.642591 | bid price = 824.910000
2017-01-11 12:45:15.723908 | bid price = 822.900000
2017-01-11 12:45:15.786832 | bid price = 822.430000
2017-01-11 12:45:15.855942 | ask price = 846.910000
2017-01-11 12:45:15.909559 | ask price = 846.430000
2017-01-11 12:45:15.983058 | ask price = 848.850000
2017-01-11 12:45:16.046963 | ask price = 848.250000
2017-01-11 12:45:16.100729 | bid price = 837.920000
2017-01-11 12:45:16.356002 | bid price = 806.000000
2017-01-11 12:45:16.442509 | bid price = 806.810000
...</pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the <code>websocket</code> module.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Connects to the Gemini web socket API via the <code>wss</code> protocol.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Starts the connection and runs it until interrupted.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>During the execution and thereafter, one can access the <code>DataFrame</code> objects storing the tick data and the resampled data, respectively. It is obvious that the bid-ask spread can be significant.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">9</span>]: data.tail()  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">9</span>]:
                            ask bid
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">11</span> <span class="integer">12</span>:<span class="integer">51</span>:<span class="float">51.700220</span>  NaN <span class="float">807.72</span>
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">11</span> <span class="integer">12</span>:<span class="integer">51</span>:<span class="float">51.812274</span>  NaN <span class="float">805.93</span>
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">11</span> <span class="integer">12</span>:<span class="integer">51</span>:<span class="float">51.895677</span>  NaN <span class="float">807.23</span>
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">11</span> <span class="integer">12</span>:<span class="integer">51</span>:<span class="float">52.059027</span>  NaN <span class="float">805.46</span>
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">11</span> <span class="integer">12</span>:<span class="integer">51</span>:<span class="float">52.110015</span>  NaN <span class="float">806.59</span>

In [<span class="integer">10</span>]: resam.tail()  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">10</span>]:
                    ask     bid     mid
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">11</span> <span class="integer">12</span>:<span class="integer">51</span>:<span class="integer">30</span> <span class="float">843.89</span>  <span class="float">837.84</span>  <span class="float">840.865</span>
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">11</span> <span class="integer">12</span>:<span class="integer">51</span>:<span class="integer">35</span> <span class="float">845.44</span>  <span class="float">834.42</span>  <span class="float">839.930</span>
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">11</span> <span class="integer">12</span>:<span class="integer">51</span>:<span class="integer">40</span> <span class="float">845.44</span>  <span class="float">837.85</span>  <span class="float">841.645</span>
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">11</span> <span class="integer">12</span>:<span class="integer">51</span>:<span class="integer">45</span> <span class="float">842.81</span>  <span class="float">835.80</span>  <span class="float">839.305</span>
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">11</span> <span class="integer">12</span>:<span class="integer">51</span>:<span class="integer">50</span> <span class="float">842.81</span>  <span class="float">806.59</span>  <span class="float">824.700</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Final five rows of the tick data and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>…​ the resampled data.</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>TO BE COMPLETED: This section is not yet complete. We are going to 
provide a wrapper class for the web socket API of Gemini as well. Based 
on this class, a real-time algorithmic strategy will be illustrated.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_retrieving_account_information_2">10.8. Retrieving Account Information</h3>
<div class="paragraph">
<p>Using the <code>pygem</code> wrapper class, retrieving account information is as simple as retrieving historical trades.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: con = pygem.pygem(config[<span class="string"><span class="delimiter">'</span><span class="content">gemini</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">key</span><span class="delimiter">'</span></span>],
                          config[<span class="string"><span class="delimiter">'</span><span class="content">gemini</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">secret_key</span><span class="delimiter">'</span></span>],
                          debug=<span class="predefined-constant">False</span>)

In [<span class="integer">2</span>]: balances = con.get_available_balances()  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">3</span>]: balances  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">3</span>]: [{<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1001.031</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">available</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1001.031</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">availableForWithdrawal</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1001.031</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">currency</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">BTC</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">type</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">exchange</span><span class="delimiter">'</span></span>},
         {<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">99075.55</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">available</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">99075.55</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">availableForWithdrawal</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">99075.55</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">currency</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">USD</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">type</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">exchange</span><span class="delimiter">'</span></span>},
         {<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">20000</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">available</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">20000</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">availableForWithdrawal</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">20000</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">currency</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">ETH</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">type</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">exchange</span><span class="delimiter">'</span></span>}]

In [<span class="integer">4</span>]: volumes = con.get_trade_volume()  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">4</span>]: volumes  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">4</span>]: [[...,
         {<span class="string"><span class="delimiter">'</span><span class="content">account_id</span><span class="delimiter">'</span></span>: <span class="integer">366</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">base_currency</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">BTC</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">buy_maker_base</span><span class="delimiter">'</span></span>: <span class="float">0.62</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">buy_maker_count</span><span class="delimiter">'</span></span>: <span class="integer">3</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">buy_maker_notional</span><span class="delimiter">'</span></span>: <span class="float">558.0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">buy_taker_base</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">buy_taker_count</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">buy_taker_notional</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">data_date</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">2017-01-06</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">maker_buy_sell_ratio</span><span class="delimiter">'</span></span>: <span class="integer">1</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">notional_currency</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">USD</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">sell_maker_base</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">sell_maker_count</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">sell_maker_notional</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">sell_taker_base</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">sell_taker_count</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">sell_taker_notional</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">symbol</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">btcusd</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">total_volume_base</span><span class="delimiter">'</span></span>: <span class="float">0.62</span>},
         {<span class="string"><span class="delimiter">'</span><span class="content">account_id</span><span class="delimiter">'</span></span>: <span class="integer">366</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">base_currency</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">BTC</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">buy_maker_base</span><span class="delimiter">'</span></span>: <span class="float">0.001</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">buy_maker_count</span><span class="delimiter">'</span></span>: <span class="integer">1</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">buy_maker_notional</span><span class="delimiter">'</span></span>: <span class="float">1.0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">buy_taker_base</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">buy_taker_count</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">buy_taker_notional</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">data_date</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">2017-01-10</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">maker_buy_sell_ratio</span><span class="delimiter">'</span></span>: <span class="integer">1</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">notional_currency</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">USD</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">sell_maker_base</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">sell_maker_count</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">sell_maker_notional</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">sell_taker_base</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">sell_taker_count</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">sell_taker_notional</span><span class="delimiter">'</span></span>: <span class="integer">0</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">symbol</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">btcusd</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">total_volume_base</span><span class="delimiter">'</span></span>: <span class="float">0.001</span>},
         ...]]

In [<span class="integer">5</span>]: orders = con.get_active_orders()  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">6</span>]: orders  <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">6</span>]: []</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Retrieves current balance information and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>…​ prints it.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Retrieves trading volume information and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>…​ prints it.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Checks the currently active order …​</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>…​ which in this case returns an empty <code>list</code> object.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_conclusions_10">10.9. Conclusions</h3>
<div class="paragraph">
<p>Cryptocurrencies and blockchain technology are a fascinating filed in
 technology these days. Furthermore, cryptocurrencies represent a new, 
digital asset class that can be traded quite easily in automated, 
algorithmic fashion. To this end, the Gemini trading platform provides 
both a RESTful API as well as a web socket API for which this chapter 
introduces Python wrapper classes for more convenience and efficiency.</p>
</div>
<div class="paragraph">
<p>Algorithmic trading of cryptocurrencies offers a nice entrance to the
 field since the technology of the platforms and exchanges is 
state-of-the-art, the capital requirements are rather low and the 
trading takes place 24/7 with full transparency of the order book. In 
that sense, the field allows to get started even out of (academic) 
curiosity without putting up and/or risking larger sums of capital.</p>
</div>
</div>
<div class="sect2">
<h3 id="_further_resources_10">10.10. Further Resources</h3>
<div class="paragraph">
<p>Books cited in this chapter:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Antonopoulos, Andreas (2014): <em>Mastering Bitcoin — Unlocking Digital Cryptocurrencies.</em> O’Reilly, Bejing et al.</p>
</li>
<li>
<p>Narayanan, Arvind et al. (2016): <em>Bitcoin and Cryptocurrency Technologies — A Comprehensive Introduction.</em> Princeton University Press, Princeton and Oxford.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_python_scripts_8">10.11. Python Scripts</h3>
<div id="gemini_wrapper_class" class="exampleblock">
<div class="title">Example 23. Python wrapper class for Gemini API</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Wrapper Class for</span>
<span class="comment"># Gemini API</span>
<span class="comment"># by Michael Schwed</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="comment"># Larger parts of the  docstring texts taken</span>
<span class="comment"># from the official Gemini API documentation under</span>
<span class="comment"># https://docs.gemini.com/rest-api/</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">hmac</span>
<span class="keyword">import</span> <span class="include">hashlib</span>
<span class="keyword">import</span> <span class="include">time</span>
<span class="keyword">import</span> <span class="include">base64</span>
<span class="keyword">import</span> <span class="include">json</span>
<span class="keyword">import</span> <span class="include">requests</span>
<span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd
<span class="keyword">import</span> <span class="include">datetime</span> <span class="keyword">as</span> dt
<span class="keyword">import</span> <span class="include">configparser</span>

config = configparser.ConfigParser()
config.read(<span class="string"><span class="delimiter">'</span><span class="content">../pyalgo.cfg</span><span class="delimiter">'</span></span>)


<span class="keyword">class</span> <span class="class">pygem</span>(<span class="predefined">object</span>):
    <span class="docstring"><span class="delimiter">'''</span><span class="content"> A python wrapper for the gemini API </span><span class="delimiter">'''</span></span>

    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, key, secret_key, sandbox=<span class="predefined-constant">True</span>, debug=<span class="predefined-constant">False</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        Creates a pygem object, providing methods for all https requests</span><span class="content">
</span><span class="content">        in the Gemini API</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameter:</span><span class="content">
</span><span class="content">        key (string): Gemini API key, can be created on the account site</span><span class="content">
</span><span class="content">            of the Gemini pages.</span><span class="content">
</span><span class="content">        secret_key (string): Gemini API secret key, can also be created on</span><span class="content">
</span><span class="content">            the account site of the Gemini pages.</span><span class="content">
</span><span class="content">        sandbox (bool): Wheter to use the sandbox (True) or the live account.</span><span class="content">
</span><span class="content">            Default is True.</span><span class="content">
</span><span class="content">        debug (bool): If true, the called URLs are printed; default is False.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="predefined-constant">self</span>.key = key
        <span class="predefined-constant">self</span>.secret_key = secret_key
        <span class="keyword">if</span> sandbox:
            <span class="predefined-constant">self</span>.url = <span class="string"><span class="delimiter">'</span><span class="content">https://api.sandbox.gemini.com/v1/</span><span class="delimiter">'</span></span>
        <span class="keyword">else</span>:
            <span class="predefined-constant">self</span>.url = <span class="string"><span class="delimiter">'</span><span class="content">https://api.gemini.com/v1/</span><span class="delimiter">'</span></span>
        <span class="predefined-constant">self</span>.last_order_id = <span class="predefined-constant">None</span>
        <span class="predefined-constant">self</span>.debug = debug

    <span class="keyword">def</span> <span class="function">send_public_request</span>(<span class="predefined-constant">self</span>, method, **kwargs):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Sends all public request to the Gemini server.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        url = <span class="predefined-constant">self</span>.url + method
        paras = <span class="predefined">list</span>()
        <span class="keyword">for</span> key <span class="keyword">in</span> kwargs:
            paras.append(<span class="string"><span class="delimiter">'</span><span class="content">%s=%s</span><span class="delimiter">'</span></span> % (key, kwargs[key]))
        <span class="keyword">if</span> <span class="predefined">len</span>(paras) <span class="keyword">is</span> <span class="keyword">not</span> <span class="integer">0</span>:
            paras_string = <span class="string"><span class="delimiter">'</span><span class="content">&amp;</span><span class="delimiter">'</span></span>.join(paras)
            url = url + <span class="string"><span class="delimiter">'</span><span class="content">?</span><span class="delimiter">'</span></span> + paras_string
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.debug:
            print(<span class="string"><span class="delimiter">'</span><span class="content">URL: </span><span class="delimiter">'</span></span>, url)
        <span class="keyword">return</span> requests.get(url, timeout=<span class="integer">10</span>).json()

    <span class="keyword">def</span> <span class="function">send_privat_request</span>(<span class="predefined-constant">self</span>, method, payload):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Sends all privat requests to the Gemini server.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        payload[<span class="string"><span class="delimiter">'</span><span class="content">nonce</span><span class="delimiter">'</span></span>] = <span class="predefined">str</span>(<span class="predefined">int</span>(time.time() * <span class="integer">100000</span> ** <span class="integer">2</span>))
        payload = json.dumps(payload)

        payload_encode = base64.b64encode(<span class="predefined">bytearray</span>(payload, <span class="string"><span class="delimiter">'</span><span class="content">utf-8</span><span class="delimiter">'</span></span>))
        sig = hmac.new(<span class="predefined">bytearray</span>(<span class="predefined-constant">self</span>.secret_key, <span class="string"><span class="delimiter">'</span><span class="content">utf-8</span><span class="delimiter">'</span></span>),
                       payload_encode, hashlib.sha384).hexdigest()
        headers = {<span class="string"><span class="delimiter">'</span><span class="content">X-GEMINI-APIKEY</span><span class="delimiter">'</span></span>: <span class="predefined-constant">self</span>.key,
                   <span class="string"><span class="delimiter">'</span><span class="content">X-GEMINI-PAYLOAD</span><span class="delimiter">'</span></span>: payload_encode,
                   <span class="string"><span class="delimiter">'</span><span class="content">X-GEMINI-SIGNATURE</span><span class="delimiter">'</span></span>: sig}
        url = <span class="predefined-constant">self</span>.url + method
        <span class="keyword">if</span> <span class="predefined-constant">self</span>.debug:
            print(<span class="string"><span class="delimiter">'</span><span class="content">URL: </span><span class="delimiter">'</span></span>, url)
            print(<span class="string"><span class="delimiter">'</span><span class="content">Payload: </span><span class="delimiter">'</span></span>, payload)
        <span class="keyword">return</span> requests.post(url, headers=headers, timeout=<span class="integer">10</span>).json()

    <span class="comment"># Private requests</span>

    <span class="keyword">def</span> <span class="function">new_order</span>(<span class="predefined-constant">self</span>, symbol, amount, price, side, option=<span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>,
                  client_order_id=<span class="predefined-constant">False</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        Only limit orders are supported at this point.</span><span class="content">
</span><span class="content">        All orders on the exchange are 'Good Until Cancel' - they</span><span class="content">
</span><span class="content">        will stay active until either completely filled or cancelled.</span><span class="content">
</span><span class="content">
</span><span class="content">        If you wish orders to be automatically cancelled when your</span><span class="content">
</span><span class="content">        session ends, see the require heartbeat section, or manually</span><span class="content">
</span><span class="content">        send the cancel all session orders message.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters:</span><span class="content">
</span><span class="content">        client_order_id (string, optional): A client-specified order id.</span><span class="content">
</span><span class="content">            This is only for custom purpose, pygem methods which need an</span><span class="content">
</span><span class="content">            order_id as input (as for example cancel_order()) always use</span><span class="content">
</span><span class="content">            the Gemini order_id, which can be found in the field</span><span class="content">
</span><span class="content">            'order_id' of the return.</span><span class="content">
</span><span class="content">        symbol (string): The symbol for the new order</span><span class="content">
</span><span class="content">        amount (float): Quoted decimal amount to purchase</span><span class="content">
</span><span class="content">        price (float): Quoted decimal amount to spend per unit</span><span class="content">
</span><span class="content">        side (string): 'buy' or 'sell'</span><span class="content">
</span><span class="content">        type (string): The order type. Only 'exchange limit' supported</span><span class="content">
</span><span class="content">            through this API</span><span class="content">
</span><span class="content">        option (string, optional): An optional order execution option.</span><span class="content">
</span><span class="content">            If not given, your order will be a standard limit order,</span><span class="content">
</span><span class="content">            it will immediately fill against any open orders at an equal</span><span class="content">
</span><span class="content">            or better price, then the remainder of the order will be posted</span><span class="content">
</span><span class="content">            to the order book.</span><span class="content">
</span><span class="content">
</span><span class="content">            The available limit order options are:</span><span class="content">
</span><span class="content">            'maker-or-cancel': This order will only add liquidity to the</span><span class="content">
</span><span class="content">                order book. If any part of the order could be filled</span><span class="content">
</span><span class="content">                immediately, the whole order will instead be canceled before</span><span class="content">
</span><span class="content">                any execution occurs. If that happens, the response back</span><span class="content">
</span><span class="content">                from the API will indicate that the order has already been</span><span class="content">
</span><span class="content">                canceled ('is_cancelled': True).</span><span class="content">
</span><span class="content">            'immediate-or-cancel': This order will only remove liquidity</span><span class="content">
</span><span class="content">                from the order book. It will fill whatever part of the</span><span class="content">
</span><span class="content">                order it can immediately, then cancel any remaining amount</span><span class="content">
</span><span class="content">                so that no part of the order is added to the order book.</span><span class="content">
</span><span class="content">                If the order doesn't fully fill immediately, the response</span><span class="content">
</span><span class="content">                back from the API will indicate that the order has already</span><span class="content">
</span><span class="content">                been canceled ('is_cancelled': True).</span><span class="content">
</span><span class="content">            'auction-only': This order will be added to the auction-only</span><span class="content">
</span><span class="content">                book for the next auction for this symbol. The order will</span><span class="content">
</span><span class="content">                not show up on the public API Current Order Book.</span><span class="content">
</span><span class="content">                The order will show up in the private API Get Active Orders</span><span class="content">
</span><span class="content">                endpoint. The exchange will cancel any unfilled auction-only</span><span class="content">
</span><span class="content">                orders at the end of the auction. The order may be cancelled</span><span class="content">
</span><span class="content">                up until the the auction locks, after which cancel requests</span><span class="content">
</span><span class="content">                will be rejected.</span><span class="content">
</span><span class="content">
</span><span class="content">        Result:</span><span class="content">
</span><span class="content">        Result will be the same fields as returned by get_order_status()</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        method = <span class="string"><span class="delimiter">'</span><span class="content">order/new</span><span class="delimiter">'</span></span>
        params = {<span class="string"><span class="delimiter">'</span><span class="content">request</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">/v1/order/new</span><span class="delimiter">'</span></span>,
                  <span class="string"><span class="delimiter">'</span><span class="content">symbol</span><span class="delimiter">'</span></span>: symbol,
                  <span class="string"><span class="delimiter">'</span><span class="content">type</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">exchange limit</span><span class="delimiter">'</span></span>}
        <span class="keyword">try</span>:
            amount = <span class="predefined">float</span>(amount)
        <span class="keyword">except</span>:
            <span class="keyword">raise</span> <span class="exception">TypeError</span>(<span class="string"><span class="delimiter">'</span><span class="content">amount must be a number</span><span class="delimiter">'</span></span>)
        <span class="keyword">try</span>:
            price = <span class="predefined">float</span>(price)
        <span class="keyword">except</span>:
            <span class="keyword">raise</span> <span class="exception">TypeError</span>(<span class="string"><span class="delimiter">'</span><span class="content">price must be a number</span><span class="delimiter">'</span></span>)
        <span class="keyword">if</span> side <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string"><span class="delimiter">'</span><span class="content">buy</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">sell</span><span class="delimiter">'</span></span>]:
            <span class="keyword">raise</span> <span class="exception">ValueError</span>(<span class="string"><span class="delimiter">'</span><span class="content">side must be either "buy" or "sell"</span><span class="delimiter">'</span></span>)

        <span class="keyword">if</span> option <span class="keyword">and</span> option <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string"><span class="delimiter">'</span><span class="content">maker-or-cancel</span><span class="delimiter">'</span></span>,
                                     <span class="string"><span class="delimiter">'</span><span class="content">immediate-or-cancel</span><span class="delimiter">'</span></span>,
                                     <span class="string"><span class="delimiter">'</span><span class="content">auction-only</span><span class="delimiter">'</span></span>]:
            <span class="keyword">raise</span> <span class="exception">ValueError</span>(
                <span class="string"><span class="delimiter">'</span><span class="content">option must either be empty or one of "maker-or-cancel", </span><span class="char">\
</span><span class="content">              "immediate-or-cancel", "auction-only"</span><span class="delimiter">'</span></span>)

        params[<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>] = <span class="predefined">str</span>(amount)
        params[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>] = <span class="predefined">str</span>(price)
        params[<span class="string"><span class="delimiter">'</span><span class="content">side</span><span class="delimiter">'</span></span>] = side
        options = <span class="predefined">list</span>()
        options.append(option)
        <span class="keyword">if</span> <span class="predefined">len</span>(option) <span class="keyword">is</span> <span class="keyword">not</span> <span class="integer">0</span>:
            params[<span class="string"><span class="delimiter">'</span><span class="content">options</span><span class="delimiter">'</span></span>] = options

        <span class="keyword">if</span> client_order_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="predefined-constant">False</span>:

            <span class="keyword">if</span> <span class="predefined-constant">self</span>.last_order_id <span class="keyword">and</span> <span class="keyword">not</span> client_order_id &gt; <span class="predefined-constant">self</span>.last_order_id:
                <span class="keyword">raise</span> <span class="exception">ValueError</span>(
                    <span class="string"><span class="delimiter">'</span><span class="content">client_order_id is not increasing ( %s !&gt; %s )</span><span class="delimiter">'</span></span>
                    % (client_order_id, <span class="predefined-constant">self</span>.last_order_id))

            <span class="predefined-constant">self</span>.last_order_id = client_order_id
            params[<span class="string"><span class="delimiter">'</span><span class="content">client_order_id</span><span class="delimiter">'</span></span>] = <span class="predefined">str</span>(client_order_id)

        res = <span class="predefined-constant">self</span>.send_privat_request(method, params)
        <span class="keyword">return</span> res

    <span class="keyword">def</span> <span class="function">cancel_order</span>(<span class="predefined-constant">self</span>, order_id):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        This will cancel an order. If the order is already canceled,</span><span class="content">
</span><span class="content">        the message will succeed but have no effect.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters:</span><span class="content">
</span><span class="content">        order_id: The order ID as given in the field 'order_id' of</span><span class="content">
</span><span class="content">            the return of new_order().</span><span class="content">
</span><span class="content">
</span><span class="content">        Response:</span><span class="content">
</span><span class="content">        Result of order_status for the canceled order. If the order</span><span class="content">
</span><span class="content">        was already canceled, then the request will have no effect</span><span class="content">
</span><span class="content">        and the status will be returned.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        method = <span class="string"><span class="delimiter">'</span><span class="content">order/cancel</span><span class="delimiter">'</span></span>
        params = {<span class="string"><span class="delimiter">'</span><span class="content">request</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">/v1/order/cancel</span><span class="delimiter">'</span></span>,
                  <span class="string"><span class="delimiter">'</span><span class="content">order_id</span><span class="delimiter">'</span></span>: <span class="predefined">str</span>(order_id)}

        res = <span class="predefined-constant">self</span>.send_privat_request(method, params)
        <span class="keyword">return</span> res

    <span class="keyword">def</span> <span class="function">cancel_all_session_orders</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        This will cancel all orders opened by this session.</span><span class="content">
</span><span class="content">
</span><span class="content">        Response:</span><span class="content">
</span><span class="content">        The response will be a dictionary with the fields:</span><span class="content">
</span><span class="content">
</span><span class="content">        result (str): Will always be 'ok' if the response from the</span><span class="content">
</span><span class="content">            Gemini server is 200 OK.</span><span class="content">
</span><span class="content">        details (dict): Dictionary with two fields:</span><span class="content">
</span><span class="content">            cancelRejects (list): A list with the id's of the orders,</span><span class="content">
</span><span class="content">                which are not canceled.</span><span class="content">
</span><span class="content">            cancelledOrders (list): A list with the id's of the canceled</span><span class="content">
</span><span class="content">                orders.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        method = <span class="string"><span class="delimiter">'</span><span class="content">order/cancel/session</span><span class="delimiter">'</span></span>
        params = {<span class="string"><span class="delimiter">'</span><span class="content">request</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">/v1/order/cancel/session</span><span class="delimiter">'</span></span>}

        res = <span class="predefined-constant">self</span>.send_privat_request(method, params)
        <span class="keyword">return</span> res

    <span class="keyword">def</span> <span class="function">cancel_all_active_orders</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        This will cancel all outstanding orders created by all sessions owned</span><span class="content">
</span><span class="content">        by this account, including interactive orders placed through the UI.</span><span class="content">
</span><span class="content">        Note that this cancels orders that were not placed using this API key.</span><span class="content">
</span><span class="content">
</span><span class="content">        Typically cancel_all_session_orders is preferable, so that only orders</span><span class="content">
</span><span class="content">        related to the current connected session are cancelled.</span><span class="content">
</span><span class="content">
</span><span class="content">        Response:</span><span class="content">
</span><span class="content">        The response will be a dictionary with the fields:</span><span class="content">
</span><span class="content">
</span><span class="content">        result (str): Will always be 'ok' if the response from the</span><span class="content">
</span><span class="content">            Gemini server is 200 OK.</span><span class="content">
</span><span class="content">        details (dict): Dictionary with two fields:</span><span class="content">
</span><span class="content">            cancelRejects (list): A list with the id's of the orders,</span><span class="content">
</span><span class="content">                which are not canceled.</span><span class="content">
</span><span class="content">            cancelledOrders (list): A list with the id's of the canceled</span><span class="content">
</span><span class="content">                orders.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>

        method = <span class="string"><span class="delimiter">'</span><span class="content">order/cancel/all</span><span class="delimiter">'</span></span>
        params = {<span class="string"><span class="delimiter">'</span><span class="content">request</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">/v1/order/cancel/all</span><span class="delimiter">'</span></span>}

        res = <span class="predefined-constant">self</span>.send_privat_request(method, params)
        <span class="keyword">return</span> res

    <span class="keyword">def</span> <span class="function">get_order_status</span>(<span class="predefined-constant">self</span>, order_id):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        Gets the status for an order.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters:</span><span class="content">
</span><span class="content">        order_id: The order id to get information on.</span><span class="content">
</span><span class="content">
</span><span class="content">        Response:</span><span class="content">
</span><span class="content">        order_id (string): The order id</span><span class="content">
</span><span class="content">        client_order_id (string): The optional client-specified</span><span class="content">
</span><span class="content">            order id</span><span class="content">
</span><span class="content">        symbol (string): The symbol of the order</span><span class="content">
</span><span class="content">        exchange (string): Will always be 'gemini'</span><span class="content">
</span><span class="content">        price (string): The price the order was issued at</span><span class="content">
</span><span class="content">        avg_execution_price (string): The average price at which</span><span class="content">
</span><span class="content">            this order as been executed so far.</span><span class="content">
</span><span class="content">            0 if the order has not been executed at all.</span><span class="content">
</span><span class="content">        side (string): Either 'buy' or 'sell'.</span><span class="content">
</span><span class="content">        type (string): Will always be 'exchange limit'</span><span class="content">
</span><span class="content">        timestamp (string): The timestamp the order was submitted.</span><span class="content">
</span><span class="content">            Note that for compatibility reasons, this is returned</span><span class="content">
</span><span class="content">            as a string. We recommend using the timestampms field</span><span class="content">
</span><span class="content">            instead.</span><span class="content">
</span><span class="content">        timestampms (int): The timestamp the order was submitted in</span><span class="content">
</span><span class="content">            milliseconds.</span><span class="content">
</span><span class="content">        is_live (bool): True if the order is active on the book (has</span><span class="content">
</span><span class="content">            remaining quantity and has not been canceled)</span><span class="content">
</span><span class="content">        is_cancelled (bool): True if the order has been canceled.</span><span class="content">
</span><span class="content">            Note the spelling, 'cancelled' instead of 'canceled'.</span><span class="content">
</span><span class="content">            This is for compatibility reasons.</span><span class="content">
</span><span class="content">        was_forced (bool): Will always be False.</span><span class="content">
</span><span class="content">        executed_amount (string): The amount of the order that has</span><span class="content">
</span><span class="content">            been filled.</span><span class="content">
</span><span class="content">        remaining_amount (string): The amount of the order that has</span><span class="content">
</span><span class="content">            not been filled.</span><span class="content">
</span><span class="content">        original_amount (string): The originally submitted amount of</span><span class="content">
</span><span class="content">            the order.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        method = <span class="string"><span class="delimiter">'</span><span class="content">order/status</span><span class="delimiter">'</span></span>
        params = {<span class="string"><span class="delimiter">'</span><span class="content">request</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">/v1/order/status</span><span class="delimiter">'</span></span>,
                  <span class="string"><span class="delimiter">'</span><span class="content">order_id</span><span class="delimiter">'</span></span>: <span class="predefined">str</span>(order_id)}

        res = <span class="predefined-constant">self</span>.send_privat_request(method, params)
        <span class="keyword">return</span> res

    <span class="keyword">def</span> <span class="function">get_active_orders</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        Gets all live orders.</span><span class="content">
</span><span class="content">
</span><span class="content">        Reponse:</span><span class="content">
</span><span class="content">        A list of orders status as given by get_order_status()</span><span class="content">
</span><span class="content">        for all your live orders.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>

        method = <span class="string"><span class="delimiter">'</span><span class="content">orders</span><span class="delimiter">'</span></span>
        params = {<span class="string"><span class="delimiter">'</span><span class="content">request</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">/v1/orders</span><span class="delimiter">'</span></span>}

        res = <span class="predefined-constant">self</span>.send_privat_request(method, params)

        <span class="keyword">return</span> res

    <span class="keyword">def</span> <span class="function">get_past_trades</span>(<span class="predefined-constant">self</span>, symbol, limit_trades=<span class="integer">50</span>, since=<span class="predefined-constant">None</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        Delivers information about your trades in the past.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters:</span><span class="content">
</span><span class="content">        symbol (string): The symbol to retrieve trades for.</span><span class="content">
</span><span class="content">        limit_trades (int): The maximum number of trades to return.</span><span class="content">
</span><span class="content">            Default is 50, max is 100 (optional).</span><span class="content">
</span><span class="content">        since (int or datetime.datetime): Only return trades after</span><span class="content">
</span><span class="content">            this timestamp or date (optional).</span><span class="content">
</span><span class="content">
</span><span class="content">        Reponse:</span><span class="content">
</span><span class="content">        The response will be list of trade information items.</span><span class="content">
</span><span class="content">
</span><span class="content">        price (string): The price that the execution happened at.</span><span class="content">
</span><span class="content">        amount (string): The quantity that was executed.</span><span class="content">
</span><span class="content">        timestamp (int): The time that the trade happened.</span><span class="content">
</span><span class="content">        timestampms (int): The time that the trade happened in</span><span class="content">
</span><span class="content">            milliseconds.</span><span class="content">
</span><span class="content">        type (string): Will be either 'Buy' or 'Sell', indicating</span><span class="content">
</span><span class="content">            the side of the original order.</span><span class="content">
</span><span class="content">        aggressor (bool): If True, this order was the taker in the trade.</span><span class="content">
</span><span class="content">        fee_currency (string): Currency that the fee was paid in.</span><span class="content">
</span><span class="content">        fee_amount (string): The amount charged.</span><span class="content">
</span><span class="content">        tid (int): Unique identifier for the trade.</span><span class="content">
</span><span class="content">        order_id (string): The order that this trade executed against.</span><span class="content">
</span><span class="content">        client_order_id (string): The optional client-specified order id</span><span class="content">
</span><span class="content">            that this trade is associated with.</span><span class="content">
</span><span class="content">        break (string): Will only be present if the trade has been</span><span class="content">
</span><span class="content">            reversed (broken).</span><span class="content">
</span><span class="content">            The field will contain one of these values:</span><span class="content">
</span><span class="content">                'manual': The trade was reversed manually. This means that</span><span class="content">
</span><span class="content">                    all fees, proceeds, and debits associated with the trade</span><span class="content">
</span><span class="content">                    have been credited or debited to the account seperately.</span><span class="content">
</span><span class="content">                    That means that this reported trade must be included for</span><span class="content">
</span><span class="content">                    order for the account balance to be correct.</span><span class="content">
</span><span class="content">                'full': The trade was fully broken. The reported trade should</span><span class="content">
</span><span class="content">                    not be accounted for. It will be as though the transfer</span><span class="content">
</span><span class="content">                    of fund associated with the trade had simply not happened.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        method = <span class="string"><span class="delimiter">'</span><span class="content">mytrades</span><span class="delimiter">'</span></span>
        params = {<span class="string"><span class="delimiter">'</span><span class="content">request</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">/v1/mytrades</span><span class="delimiter">'</span></span>,
                  <span class="string"><span class="delimiter">'</span><span class="content">symbol</span><span class="delimiter">'</span></span>: symbol}
        <span class="keyword">try</span>:
            limit_trades = <span class="predefined">int</span>(limit_trades)
        <span class="keyword">except</span>:
            <span class="keyword">raise</span> <span class="exception">TypeError</span>(<span class="string"><span class="delimiter">'</span><span class="content">limit_trades must be an integer</span><span class="delimiter">'</span></span>)

        <span class="keyword">if</span> since <span class="keyword">is</span> <span class="predefined-constant">None</span>:
            since = <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
        <span class="keyword">elif</span> <span class="predefined">isinstance</span>(since, dt.date) <span class="keyword">or</span> <span class="predefined">isinstance</span>(since, dt.datetime):
            since = <span class="predefined-constant">self</span>.make_timestamp(since)
        <span class="keyword">else</span>:
            <span class="keyword">try</span>:
                since = <span class="predefined">int</span>(since)
            <span class="keyword">except</span>:
                <span class="keyword">raise</span> <span class="exception">TypeError</span>(<span class="string"><span class="delimiter">'</span><span class="content">since must be of type datetime.date, </span><span class="char">\
</span><span class="content">                                datetime.datetime or an integer</span><span class="delimiter">'</span></span>)
        params[<span class="string"><span class="delimiter">'</span><span class="content">limit_trades</span><span class="delimiter">'</span></span>] = limit_trades
        params[<span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>] = since

        res = <span class="predefined-constant">self</span>.send_privat_request(method, params)

        <span class="keyword">return</span> res

    <span class="keyword">def</span> <span class="function">get_trade_volume</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        Returns the trade volume.</span><span class="content">
</span><span class="content">
</span><span class="content">        Reponse:</span><span class="content">
</span><span class="content">        The response will be a nested list of up to 30 days of</span><span class="content">
</span><span class="content">        trade volume for each symbol.</span><span class="content">
</span><span class="content">
</span><span class="content">           - Each of the inner lists contains the data for one</span><span class="content">
</span><span class="content">               symbol.</span><span class="content">
</span><span class="content">           - Each inner list item represents 1 day of trading</span><span class="content">
</span><span class="content">               volume. All dates are UTC dates.</span><span class="content">
</span><span class="content">           - Partial trading volume for the current day is not</span><span class="content">
</span><span class="content">               supplied.</span><span class="content">
</span><span class="content">           - Days without trading volume will be omitted from</span><span class="content">
</span><span class="content">               the array.</span><span class="content">
</span><span class="content">
</span><span class="content">        The list items have the following fields:</span><span class="content">
</span><span class="content">
</span><span class="content">        account_id (int): Client account id.</span><span class="content">
</span><span class="content">        symbol (string): The symbol.</span><span class="content">
</span><span class="content">        base_currency (string): Quantity is denominated in this</span><span class="content">
</span><span class="content">            currency.</span><span class="content">
</span><span class="content">        notional_currency (string): Price is denominated as the</span><span class="content">
</span><span class="content">            amount of notional currency per one unit of base currency.</span><span class="content">
</span><span class="content">            Notional values are denominated in this currency.</span><span class="content">
</span><span class="content">        data_date (string): UTC date in yyyy-MM-dd format.</span><span class="content">
</span><span class="content">        total_volume_base (float): Total trade volume for this day.</span><span class="content">
</span><span class="content">        maker_buy_sell_ratio (float): Maker buy/sell ratio is the</span><span class="content">
</span><span class="content">            proportion of maker base volume on trades where the account</span><span class="content">
</span><span class="content">            was on the buy side versus all maker trades.</span><span class="content">
</span><span class="content">            If there is no maker base volume on the buy side, then this</span><span class="content">
</span><span class="content">            value is 0.</span><span class="content">
</span><span class="content">        buy_maker_base (float):Quantity for this day where the account</span><span class="content">
</span><span class="content">            was a maker on the buy side of the trade.</span><span class="content">
</span><span class="content">        buy_maker_notional (float): Notional value for this day where the</span><span class="content">
</span><span class="content">            account was a maker on the buy side of the trade.</span><span class="content">
</span><span class="content">        buy_maker_count (float):Number of trades for this day where the</span><span class="content">
</span><span class="content">            account was a maker on the buy side of the trade.</span><span class="content">
</span><span class="content">        sell_maker_base (float): Quantity for this day where the account</span><span class="content">
</span><span class="content">            was a maker on the sell side of the trade.</span><span class="content">
</span><span class="content">        sell_maker_notional (float): Notional value for this day where the</span><span class="content">
</span><span class="content">            account was a maker on the sell side of the trade.</span><span class="content">
</span><span class="content">        sell_maker_count (float): Number of trades for this day where the</span><span class="content">
</span><span class="content">            account was a maker on the sell side of the trade.</span><span class="content">
</span><span class="content">        buy_taker_base (float): Quantity for this day where the account was</span><span class="content">
</span><span class="content">            a taker on the buy side of the trade.</span><span class="content">
</span><span class="content">        buy_taker_notional (float): Notional value for this day where the</span><span class="content">
</span><span class="content">            account was a taker on the buy side of the trade.</span><span class="content">
</span><span class="content">        buy_taker_count (float): Number of trades for this day where the</span><span class="content">
</span><span class="content">            account was a taker on the buy side of the trade.</span><span class="content">
</span><span class="content">        sell_taker_base (float): Quantity for this day where the account</span><span class="content">
</span><span class="content">            was a taker on the sell side of the trade.</span><span class="content">
</span><span class="content">        sell_taker_notional (float): Notional value for this day where the</span><span class="content">
</span><span class="content">            account was a taker on the sell side of the trade.</span><span class="content">
</span><span class="content">        sell_taker_count (float): Number of trades for this day where the</span><span class="content">
</span><span class="content">            account was a taker on the sell side of the trade.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        method = <span class="string"><span class="delimiter">'</span><span class="content">tradevolume</span><span class="delimiter">'</span></span>
        params = {<span class="string"><span class="delimiter">'</span><span class="content">request</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">/v1/tradevolume</span><span class="delimiter">'</span></span>}

        res = <span class="predefined-constant">self</span>.send_privat_request(method, params)

        <span class="keyword">return</span> res

    <span class="keyword">def</span> <span class="function">get_available_balances</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        This will show the available balances in the supported currencies.</span><span class="content">
</span><span class="content">
</span><span class="content">        Response:</span><span class="content">
</span><span class="content">
</span><span class="content">        A list of elements, with one dictionary per currency. Each dictionary</span><span class="content">
</span><span class="content">        has the following fields:</span><span class="content">
</span><span class="content">
</span><span class="content">        currency (string): Currency symbol.</span><span class="content">
</span><span class="content">        amount (string): The current balance.</span><span class="content">
</span><span class="content">        available (string): The amount that is available to trade.</span><span class="content">
</span><span class="content">        availableWithdraw (string): The amount that is available to withdraw.</span><span class="content">
</span><span class="content">        type (string): Allways 'exchange'.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        method = <span class="string"><span class="delimiter">'</span><span class="content">balances</span><span class="delimiter">'</span></span>
        params = {<span class="string"><span class="delimiter">'</span><span class="content">request</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">/v1/balances</span><span class="delimiter">'</span></span>}

        res = <span class="predefined-constant">self</span>.send_privat_request(method, params)
        <span class="keyword">return</span> res

    <span class="keyword">def</span> <span class="function">heartbeat</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        This will prevent a session from timing out and canceling orders</span><span class="content">
</span><span class="content">        if the require heartbeat flag has been set when creating the</span><span class="content">
</span><span class="content">        sessions API key. Note that this is only required if no other</span><span class="content">
</span><span class="content">        private API requests have been made. The arrival of any message</span><span class="content">
</span><span class="content">        resets the heartbeat timer.</span><span class="content">
</span><span class="content">
</span><span class="content">        Response:</span><span class="content">
</span><span class="content">
</span><span class="content">        result (bool): Will always be True if the response from the Gemini</span><span class="content">
</span><span class="content">            server is 200 OK.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        method = <span class="string"><span class="delimiter">'</span><span class="content">heartbeat</span><span class="delimiter">'</span></span>
        params = {<span class="string"><span class="delimiter">'</span><span class="content">request</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">/v1/heartbeat</span><span class="delimiter">'</span></span>}

        res = <span class="predefined-constant">self</span>.send_privat_request(method, params)
        <span class="keyword">return</span> res

    <span class="comment"># Public request</span>

    <span class="keyword">def</span> <span class="function">get_symbols</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        Returns a list of all available symbols for trading.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        <span class="keyword">return</span> <span class="predefined-constant">self</span>.send_public_request(<span class="string"><span class="delimiter">'</span><span class="content">symbols</span><span class="delimiter">'</span></span>)

    <span class="keyword">def</span> <span class="function">get_ticker</span>(<span class="predefined-constant">self</span>, symbol):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        Returns information about recent trading activity for the symbol.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters:</span><span class="content">
</span><span class="content">        symbol (string): The symbol to retrieve trading activities for.</span><span class="content">
</span><span class="content">
</span><span class="content">        Response:</span><span class="content">
</span><span class="content">        bid (string): The highest bid currently available.</span><span class="content">
</span><span class="content">        asks (string): The lowest ask currently available.</span><span class="content">
</span><span class="content">        last (string): The price of the last executed trade.</span><span class="content">
</span><span class="content">        volume (dictionary): Information about the last 24 hour volume</span><span class="content">
</span><span class="content">            on the exchange. Information is updated every five minutes.</span><span class="content">
</span><span class="content">            It will have three fields:</span><span class="content">
</span><span class="content">
</span><span class="content">            timestamp (int): The end of the 24-hour period over which</span><span class="content">
</span><span class="content">                volume was measured in milliseconds since UNIX epoch.</span><span class="content">
</span><span class="content">            (price symbol, e.g. 'USD') (string): The volume denominated</span><span class="content">
</span><span class="content">                in the price currency.</span><span class="content">
</span><span class="content">            (quantity symbol, e.g. 'BTC') (string): The volume denominated</span><span class="content">
</span><span class="content">                in the quantity currency.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        method = <span class="string"><span class="delimiter">'</span><span class="content">pubticker/</span><span class="delimiter">'</span></span> + symbol
        kwargs = <span class="predefined">dict</span>()

        <span class="keyword">return</span> <span class="predefined-constant">self</span>.send_public_request(method, **kwargs)

    <span class="keyword">def</span> <span class="function">get_current_order_book</span>(<span class="predefined-constant">self</span>, symbol, limit_bids=<span class="integer">50</span>, limit_asks=<span class="integer">50</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        This will return the current order book as a dictionary</span><span class="content">
</span><span class="content">        of two lists, one of bids, and one of asks.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameters:</span><span class="content">
</span><span class="content">        If a limit is specified on a side, then the orders closest to the</span><span class="content">
</span><span class="content">        midpoint of the book will be the ones returned.</span><span class="content">
</span><span class="content">
</span><span class="content">        symbol (string): The symbol to retrieve the order book for.</span><span class="content">
</span><span class="content">        limit_bids (int): Limit the number of bids (offers to buy) returned.</span><span class="content">
</span><span class="content">            Default is 50. May be 0 to return the full order book on this</span><span class="content">
</span><span class="content">            side.</span><span class="content">
</span><span class="content">        limit_asks (int): Limit the number of asks (offers to sell) returned.</span><span class="content">
</span><span class="content">            Default is 50. May be 0 to return the full order book on this</span><span class="content">
</span><span class="content">            side.</span><span class="content">
</span><span class="content">
</span><span class="content">        Response:</span><span class="content">
</span><span class="content">        The response will be a dicitionary of two dictionaries:</span><span class="content">
</span><span class="content">
</span><span class="content">        bids (dict): The bids currently on the book. These are offers to buy</span><span class="content">
</span><span class="content">            at a given price.</span><span class="content">
</span><span class="content">        asks (dict): The asks currently on the book. These are offers to sell</span><span class="content">
</span><span class="content">            at a given price</span><span class="content">
</span><span class="content">
</span><span class="content">        The bids and the asks are grouped by price, so each entry may represent</span><span class="content">
</span><span class="content">        multiple orders at that price. Each element of the list is a dictionary</span><span class="content">
</span><span class="content">        with fields:</span><span class="content">
</span><span class="content">
</span><span class="content">        price (string): The price.</span><span class="content">
</span><span class="content">        amount (string): The total quantity remaining at the price.</span><span class="content">
</span><span class="content">        timestamp (string): DO NOT USE - this field is included for</span><span class="content">
</span><span class="content">            compatibility reasons only and is just populated with</span><span class="content">
</span><span class="content">            a dummy value.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        method = <span class="string"><span class="delimiter">'</span><span class="content">book/</span><span class="delimiter">'</span></span> + symbol
        <span class="keyword">try</span>:
            limit_bids = <span class="predefined">int</span>(limit_bids)
        <span class="keyword">except</span>:
            <span class="keyword">raise</span> <span class="exception">TypeError</span>(<span class="string"><span class="delimiter">'</span><span class="content">limit_bids must be an interger</span><span class="delimiter">'</span></span>)
        <span class="keyword">try</span>:
            limit_asks = <span class="predefined">int</span>(limit_asks)
        <span class="keyword">except</span>:
            <span class="keyword">raise</span> <span class="exception">TypeError</span>(<span class="string"><span class="delimiter">'</span><span class="content">limit_asks must be an interger</span><span class="delimiter">'</span></span>)
        <span class="keyword">return</span> <span class="predefined-constant">self</span>.send_public_request(method, limit_bids=limit_bids,
                                        limit_asks=limit_asks)

    <span class="keyword">def</span> <span class="function">get_trades_history</span>(<span class="predefined-constant">self</span>, symbol, since=<span class="predefined-constant">None</span>, limit_trades=<span class="integer">50</span>,
                           include_breaks=<span class="predefined-constant">False</span>, dataframe=<span class="predefined-constant">True</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        This will return the executed trades. Each request will show</span><span class="content">
</span><span class="content">        at most 500 records.</span><span class="content">
</span><span class="content">
</span><span class="content">        If no 'since' is specified, then it will show the most recent</span><span class="content">
</span><span class="content">        trades; otherwise, it will show the most recent trades that</span><span class="content">
</span><span class="content">        occurred after that timestamp.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameter:</span><span class="content">
</span><span class="content">        symbol (string): The symbol to retrieve the trades for.</span><span class="content">
</span><span class="content">        since (int or datetime.datetime, Optional): Only returns trades</span><span class="content">
</span><span class="content">            after the specified timestamp. If not present or empty, will</span><span class="content">
</span><span class="content">            show the most recent orders.</span><span class="content">
</span><span class="content">        limit_trades (int): The maximum number of trades to return. The</span><span class="content">
</span><span class="content">            default is 50.</span><span class="content">
</span><span class="content">        include_breaks (bool): Whether to display broken trades.</span><span class="content">
</span><span class="content">            False by default.</span><span class="content">
</span><span class="content">
</span><span class="content">        Response</span><span class="content">
</span><span class="content">
</span><span class="content">        The response will be a list of dictionaries, sorted by timestamp,</span><span class="content">
</span><span class="content">        with the newest trade shown first.</span><span class="content">
</span><span class="content">
</span><span class="content">        timestamp (int): The time that the trade was executed.</span><span class="content">
</span><span class="content">        timestampms (int): The time that the trade was executed in</span><span class="content">
</span><span class="content">            milliseconds.</span><span class="content">
</span><span class="content">        tid (int): The trade ID number.</span><span class="content">
</span><span class="content">        price (float): The price the trade was executed at.</span><span class="content">
</span><span class="content">        amount (float): The amount that was traded.</span><span class="content">
</span><span class="content">        exchange (string): Will always be 'gemini'.</span><span class="content">
</span><span class="content">        type (string):</span><span class="content">
</span><span class="content">            'buy' means that an ask was removed from the book by an</span><span class="content">
</span><span class="content">                incoming buy order.</span><span class="content">
</span><span class="content">            'sell' means that a bid was removed from the book by an</span><span class="content">
</span><span class="content">                incoming sell order.</span><span class="content">
</span><span class="content">            'auction' indicates a bulk trade from an auction.</span><span class="content">
</span><span class="content">
</span><span class="content">        broken (bool): Whether the trade was broken or not. Broken</span><span class="content">
</span><span class="content">            trades will not be displayed by default; use the</span><span class="content">
</span><span class="content">            include_breaks to display them.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        method = <span class="string"><span class="delimiter">'</span><span class="content">trades/</span><span class="delimiter">'</span></span> + symbol
        <span class="keyword">try</span>:
            limit_trades = <span class="predefined">int</span>(limit_trades)
        <span class="keyword">except</span>:
            <span class="keyword">raise</span> <span class="exception">TypeError</span>(<span class="string"><span class="delimiter">'</span><span class="content">limit_trades must be an interger</span><span class="delimiter">'</span></span>)
        <span class="keyword">if</span> include_breaks:
            include_breaks = <span class="string"><span class="delimiter">'</span><span class="content">true</span><span class="delimiter">'</span></span>
        <span class="keyword">else</span>:
            include_breaks = <span class="string"><span class="delimiter">'</span><span class="content">false</span><span class="delimiter">'</span></span>
        <span class="keyword">if</span> since <span class="keyword">is</span> <span class="predefined-constant">None</span>:
            since = <span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>
        <span class="keyword">elif</span> <span class="predefined">isinstance</span>(since, dt.date) <span class="keyword">or</span> <span class="predefined">isinstance</span>(since, dt.datetime):
            since = <span class="predefined-constant">self</span>.make_timestamp(since)
        <span class="keyword">else</span>:
            <span class="keyword">try</span>:
                since = <span class="predefined">int</span>(since)
            <span class="keyword">except</span>:
                <span class="keyword">raise</span> <span class="exception">TypeError</span>(<span class="string"><span class="delimiter">'</span><span class="content">since must be of type datetime.date, </span><span class="char">\
</span><span class="content">                                datetime.datetime or an integer</span><span class="delimiter">'</span></span>)

        data = <span class="predefined-constant">self</span>.send_public_request(method, since=since,
                                        limit_trades=limit_trades,
                                        include_breaks=include_breaks)

        <span class="keyword">if</span> dataframe <span class="keyword">is</span> <span class="predefined-constant">True</span>:
            data = pd.DataFrame(data)
            data[<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">amount</span><span class="delimiter">'</span></span>].astype(<span class="predefined">float</span>)
            data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">price</span><span class="delimiter">'</span></span>].astype(<span class="predefined">float</span>)
            data[<span class="string"><span class="delimiter">'</span><span class="content">datetime</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">timestamp</span><span class="delimiter">'</span></span>].apply(
                <span class="keyword">lambda</span> x: dt.datetime.fromtimestamp(x))
            data.set_index(<span class="string"><span class="delimiter">'</span><span class="content">datetime</span><span class="delimiter">'</span></span>, drop=<span class="predefined-constant">True</span>, inplace=<span class="predefined-constant">True</span>)
            data.sort_index(inplace=<span class="predefined-constant">True</span>)

        <span class="keyword">return</span> data

    <span class="keyword">def</span> <span class="function">get_current_auction</span>(<span class="predefined-constant">self</span>, symbol):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        Returns the current or next action.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameter:</span><span class="content">
</span><span class="content">        symbol (string): The symbol to retrieve the auction for.</span><span class="content">
</span><span class="content">
</span><span class="content">        Response:</span><span class="content">
</span><span class="content">        A dictionary with the following fields:</span><span class="content">
</span><span class="content">
</span><span class="content">        closed_until_ms (int): If the auction is not currently open,</span><span class="content">
</span><span class="content">            show the time at which the next auction opens.</span><span class="content">
</span><span class="content">            Not present if the auction has already opened.</span><span class="content">
</span><span class="content">        last_auction_eid (int): After an auction opens, the unique event</span><span class="content">
</span><span class="content">            ID for last specific auction event. Changes when an auction</span><span class="content">
</span><span class="content">            event occurs: the auction opens, an indicative price is published,</span><span class="content">
</span><span class="content">            and the auction itself runs. Not present before the auction opens.</span><span class="content">
</span><span class="content">        last_auction_price (string): If available, show the auction price from</span><span class="content">
</span><span class="content">            the last successful auction for this trading pair. Not present</span><span class="content">
</span><span class="content">            after current auction begins publishing indicative prices.</span><span class="content">
</span><span class="content">        last_auction_quantity (string): If available, show the auction quantity</span><span class="content">
</span><span class="content">            from the last successful auction for this trading pair. Not present</span><span class="content">
</span><span class="content">            after current auction begins publishing indicative prices.</span><span class="content">
</span><span class="content">        last_highest_bid_price (string): If available, show the highest bid</span><span class="content">
</span><span class="content">            price from the continuous trading order book at the time of the</span><span class="content">
</span><span class="content">            last successful auction for this trading pair. Not present after</span><span class="content">
</span><span class="content">            current auction begins publishing indicative prices.</span><span class="content">
</span><span class="content">        last_lowest_ask_price (string): If available, show the lowest ask price</span><span class="content">
</span><span class="content">            from the continuous trading order book at the time of the last</span><span class="content">
</span><span class="content">            successful auction for this trading pair. Not present after current</span><span class="content">
</span><span class="content">            auction begins publishing indicative prices.</span><span class="content">
</span><span class="content">        most_recent_indicative_price (string): The most recently published</span><span class="content">
</span><span class="content">            indicative price for the auction. Not present before the current</span><span class="content">
</span><span class="content">            auction begins publishing indicatives.</span><span class="content">
</span><span class="content">        most_recent_indicative_quantity (string): The most recently published</span><span class="content">
</span><span class="content">            indicative quantity for the auction. Not present before the current</span><span class="content">
</span><span class="content">            auction begins publishing indicatives.</span><span class="content">
</span><span class="content">        most_recent_highest_bid_price (string): The most recent highest bid at</span><span class="content">
</span><span class="content">            the time of the indicative price for the auction. Not present</span><span class="content">
</span><span class="content">            before the current auction begins publishing indicatives.</span><span class="content">
</span><span class="content">        most_recent_lowest_ask_price (string): The most recent lowest ask at</span><span class="content">
</span><span class="content">            the time of the indicative price for the auction. Not present</span><span class="content">
</span><span class="content">            before the current auction begins publishing indicatives.</span><span class="content">
</span><span class="content">        next_update_ms (int): Timestamp in milliseconds of the next event in</span><span class="content">
</span><span class="content">            this auction, either the publication of an indicative</span><span class="content">
</span><span class="content">            price/quantity or the auction itself.</span><span class="content">
</span><span class="content">        next_auction_ms (int) Timestamp in milliseconds of when the next</span><span class="content">
</span><span class="content">            auction will run.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        method = <span class="string"><span class="delimiter">'</span><span class="content">auction/</span><span class="delimiter">'</span></span> + symbol
        <span class="keyword">return</span> <span class="predefined-constant">self</span>.send_public_request(method)

    <span class="keyword">def</span> <span class="function">get_auction_history</span>(<span class="predefined-constant">self</span>, symbol, since=<span class="predefined-constant">None</span>, limit_auction_results=<span class="integer">50</span>,
                            include_indicative=<span class="predefined-constant">False</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        This will return the auction events, optionally including publications</span><span class="content">
</span><span class="content">        of indicative prices, since the specific timestamp.</span><span class="content">
</span><span class="content">
</span><span class="content">        Timestamps are either seconds or milliseconds since the</span><span class="content">
</span><span class="content">        epoch (1970-01-01). Each request will show at most 500 records.</span><span class="content">
</span><span class="content">
</span><span class="content">        If no since is specified, then it will show the most recent events.</span><span class="content">
</span><span class="content">        Otherwise, it will show the oldest auctions that occurred after that</span><span class="content">
</span><span class="content">        timestamp.</span><span class="content">
</span><span class="content">
</span><span class="content">        Parameter:</span><span class="content">
</span><span class="content">        symbol (string): The symbol to retrieve the auction for.</span><span class="content">
</span><span class="content">        since (int or datetime.datetime, Optional): Only returns auction events</span><span class="content">
</span><span class="content">            after the specified timestamp. If not present or empty, will show</span><span class="content">
</span><span class="content">            the most recent auction events.</span><span class="content">
</span><span class="content">        limit_auction_results (int): The maximum number of auction events to</span><span class="content">
</span><span class="content">            return. The default is 50.</span><span class="content">
</span><span class="content">        include_indicative (bool): Whether to include publication of indicative</span><span class="content">
</span><span class="content">            prices and quantities. True by default, True to explicitly enable</span><span class="content">
</span><span class="content">            and False to disable.</span><span class="content">
</span><span class="content">
</span><span class="content">        Response:</span><span class="content">
</span><span class="content">
</span><span class="content">        The response will be a list of dictionaries, sorted by timestamp, with</span><span class="content">
</span><span class="content">        the newest event shown first.</span><span class="content">
</span><span class="content">
</span><span class="content">        timestamp (int): The time that the auction event ran.</span><span class="content">
</span><span class="content">        timestampms (int):The time that the auction event ran in milliseconds.</span><span class="content">
</span><span class="content">        auction_id (int): The auction ID number.</span><span class="content">
</span><span class="content">        eid (int): Unique event ID for this specific auction event.</span><span class="content">
</span><span class="content">        event_type (string): Indicative for the publication of an indicative</span><span class="content">
</span><span class="content">            price or auction for the auction result.</span><span class="content">
</span><span class="content">        auction_result (string): 'success' or 'failure', indicating whether the</span><span class="content">
</span><span class="content">            auction has found a price.</span><span class="content">
</span><span class="content">        auction_price (string): If auction_result is success, the price at</span><span class="content">
</span><span class="content">            which orders were filled. Zero if result is failure.</span><span class="content">
</span><span class="content">        auction_quantity (string): If auction_result is success, the quantity</span><span class="content">
</span><span class="content">            that was filled. Zero if result is failure.</span><span class="content">
</span><span class="content">        highest_bid_price (string): Highest bid price from the continuous</span><span class="content">
</span><span class="content">            trading order book at the time of the auction event, if available.</span><span class="content">
</span><span class="content">        lowest_ask_price (string): Lowest ask price from the continuous trading</span><span class="content">
</span><span class="content">            order book at the time of the auction event, if available.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>
        method = <span class="string"><span class="delimiter">'</span><span class="content">auction/%s/history</span><span class="delimiter">'</span></span> % symbol
        <span class="keyword">try</span>:
            limit_auction_results = <span class="predefined">int</span>(limit_auction_results)
        <span class="keyword">except</span>:
            <span class="keyword">raise</span> <span class="exception">TypeError</span>(<span class="string"><span class="delimiter">'</span><span class="content">limit_auction_results must be an interger</span><span class="delimiter">'</span></span>)
        <span class="keyword">if</span> <span class="keyword">not</span> include_indicative:
            include_indicative = <span class="string"><span class="delimiter">'</span><span class="content">false</span><span class="delimiter">'</span></span>
        <span class="keyword">else</span>:
            include_indicative = <span class="string"><span class="delimiter">'</span><span class="content">true</span><span class="delimiter">'</span></span>
        <span class="keyword">if</span> since <span class="keyword">is</span> <span class="predefined-constant">None</span>:
            since = <span class="string"><span class="delimiter">'</span><span class="content">0</span><span class="delimiter">'</span></span>
        <span class="keyword">elif</span> <span class="predefined">isinstance</span>(since, dt.date) <span class="keyword">or</span> <span class="predefined">isinstance</span>(since, dt.datetime):
            since = <span class="predefined-constant">self</span>.make_timestamp(since)
        <span class="keyword">else</span>:
            <span class="keyword">try</span>:
                since = <span class="predefined">int</span>(since)
            <span class="keyword">except</span>:
                <span class="keyword">raise</span> <span class="exception">TypeError</span>(<span class="string"><span class="delimiter">'</span><span class="content">since must be of type datetime.date, </span><span class="char">\
</span><span class="content">                                 datatime.datetime or an integer</span><span class="delimiter">'</span></span>)

        <span class="keyword">return</span> <span class="predefined-constant">self</span>.send_public_request(
            method,
            since=since,
            limit_auction_results=limit_auction_results,
            include_indicative=include_indicative)

    <span class="comment"># Helper functions</span>

    <span class="keyword">def</span> <span class="function">make_timestamp</span>(<span class="predefined-constant">self</span>, date):
        <span class="docstring"><span class="delimiter">'''</span><span class="content">
</span><span class="content">        Helper function, generates a timestamp in milliseconds from UNIX epoch</span><span class="content">
</span><span class="content">        from a datetime.datetime or datetime.date object.</span><span class="content">
</span><span class="content">        </span><span class="delimiter">'''</span></span>

        <span class="keyword">if</span> <span class="predefined">isinstance</span>(date, dt.date) <span class="keyword">and</span> <span class="keyword">not</span> <span class="predefined">isinstance</span>(date, dt.datetime):
            delta = date - dt.date(<span class="integer">1970</span>, <span class="integer">1</span>, <span class="integer">1</span>)
        <span class="keyword">elif</span> <span class="predefined">isinstance</span>(date, dt.date) <span class="keyword">and</span> <span class="predefined">isinstance</span>(date, dt.datetime):
            delta = date - dt.datetime(<span class="integer">1970</span>, <span class="integer">1</span>, <span class="integer">1</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">0</span>)
        <span class="keyword">else</span>:
            <span class="keyword">raise</span> <span class="exception">TypeError</span>(<span class="string"><span class="delimiter">'</span><span class="content">date must be of type datetime.date </span><span class="char">\
</span><span class="content">                            or datetime.datetime</span><span class="delimiter">'</span></span>)
        <span class="keyword">return</span> <span class="predefined">int</span>(delta.total_seconds() * <span class="integer">1000</span>)</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="automating_trading">11. Automating Trading Operations</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph align_me_right">
<p>People worry that computers will get too smart and take over the 
world, but the real problem is that they’re too stupid and they’ve 
already taken over the world.</p>
</div>
</blockquote>
<div class="attribution">
— Pedro Domingos
</div>
</div>
<div class="sect2">
<h3 id="_introduction_11">11.1. Introduction</h3>
<div class="paragraph">
<p>"Now what?", you might think. You have developed and tested you 
algorithmic trading strategy. You are convinced that you found one that 
will generate profits consistently. You know how to place orders 
automatically with different (types of) online brokers. But how do you 
set up your automated trading operation properly? Indeed, this is a good
 question that probably cannot be answered in a generally satisfying 
way. Therefore, we assume in what follows that you want to implement a 
single automated strategy only. This simplifies, among others, aspects 
like capital and risk management.</p>
</div>
</div>
<div class="sect2">
<h3 id="_capital_management">11.2. Capital Management</h3>
<div class="paragraph">
<p>One of the first questions that need to get answered in an automated 
trading context is what proportion of your available capital should be 
deployed to the trading strategy at any point in time. The answer to 
this question depends on the main goal you are trying to achieve by 
algorithmic trading. Many will agree that maximization of long-term 
wealth might be a good candidate. This is what Edward Thorpe had in mind
 when he derived the Kelly criterion to investing, as described in the 
paper Rotando and Thorp (1992).</p>
</div>
<div class="sect3">
<h4 id="_deriving_the_kelly_criterion_in_a_binomial_setting">11.2.1. Deriving the Kelly Criterion in a Binomial Setting</h4>
<div class="paragraph">
<p>The common way of introducing the theory of the Kelly criterion to 
investing is on the basis of a coin tossing game or more generally a 
binomial setting (only two outcomes are possible). We will follow that 
route as well. Assume you are playing a coin tossing game against an 
infinitely rich bank or casino. Say that the probability for heads is 
some value <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-131"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-132">p</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-19-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-19">p</script> for which <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-133"><span class="MJXp-mfrac" id="MJXp-Span-134" style="vertical-align: 0.25em;"><span class="MJXp-box MJXp-script"><span class="MJXp-mn" id="MJXp-Span-135">1</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box MJXp-script"><span class="MJXp-mn" id="MJXp-Span-136">2</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-137" style="margin-left: 0.333em; margin-right: 0.333em;">&lt;</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-138">p</span><span class="MJXp-mo" id="MJXp-Span-139" style="margin-left: 0.333em; margin-right: 0.333em;">&lt;</span><span class="MJXp-mn" id="MJXp-Span-140">1</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-20-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-20">\frac{1}{2} < p < 1</script> holds. Probability for tails is defined as <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-141"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-142">q</span><span class="MJXp-mo" id="MJXp-Span-143" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mn" id="MJXp-Span-144">1</span><span class="MJXp-mo" id="MJXp-Span-145" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-146">p</span><span class="MJXp-mo" id="MJXp-Span-147" style="margin-left: 0.333em; margin-right: 0.333em;">&lt;</span><span class="MJXp-mfrac" id="MJXp-Span-148" style="vertical-align: 0.25em;"><span class="MJXp-box MJXp-script"><span class="MJXp-mn" id="MJXp-Span-149">1</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box MJXp-script"><span class="MJXp-mn" id="MJXp-Span-150">2</span></span></span></span></span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-21-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-21">q = 1-p < \frac{1}{2}</script>. You can place bets <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-151"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-152">b</span><span class="MJXp-mo" id="MJXp-Span-153" style="margin-left: 0.333em; margin-right: 0.333em;">&gt;</span><span class="MJXp-mn" id="MJXp-Span-154">0</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-22-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-22">b > 0</script>
 of arbitrary size, whereby you win the same amount if you are right and
 lose it all if you are wrong. Given the assumptions about the 
probabilities, you would of course want to bet on heads. Therefore, the 
expected value for this betting game <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-155"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-156">B</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-23-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-23">B</script> (i.e., the random variable representing this game) in a one-shot setting is</p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-157"><span class="MJXp-mrow" id="MJXp-Span-158"><span class="MJXp-mi MJXp-bold" id="MJXp-Span-159">E</span></span><span class="MJXp-mo" id="MJXp-Span-160" style="margin-left: 0em; margin-right: 0em;">[</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-161">B</span><span class="MJXp-mo" id="MJXp-Span-162" style="margin-left: 0em; margin-right: 0em;">]</span><span class="MJXp-mo" id="MJXp-Span-163" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-164">p</span><span class="MJXp-mo" id="MJXp-Span-165" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-166">b</span><span class="MJXp-mo" id="MJXp-Span-167" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-168">q</span><span class="MJXp-mo" id="MJXp-Span-169" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-170">b</span><span class="MJXp-mo" id="MJXp-Span-171" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mo" id="MJXp-Span-172" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-173">p</span><span class="MJXp-mo" id="MJXp-Span-174" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-175">q</span><span class="MJXp-mo" id="MJXp-Span-176" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-177" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-178">b</span><span class="MJXp-mo" id="MJXp-Span-179" style="margin-left: 0.333em; margin-right: 0.333em;">&gt;</span><span class="MJXp-mn" id="MJXp-Span-180">0</span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-24-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-24">\begin{equation}
\mathbf{E}[B] = p \cdot b - q \cdot b = (p - q) \cdot b > 0
\end{equation}</script>
</div>
</div>
<div class="paragraph">
<p>A risk-neutral investor with unlimited funds would like to bet as 
large an amount as possible since this would maximize the expected 
payoff. However, trading in financial markets is not a one-shot game in 
general. It is a repeated one. Therefore, assume that <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-181"><span class="MJXp-msubsup" id="MJXp-Span-182"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-183" style="margin-right: 0.05em;">b</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-184" style="vertical-align: -0.4em;">i</span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-25-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-25">b_i</script> represents the amount that is bet on day <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-185"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-186">i</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-26-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-26">i</script> and that <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-187"><span class="MJXp-msubsup" id="MJXp-Span-188"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-189" style="margin-right: 0.05em;">c</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-190" style="vertical-align: -0.4em;">0</span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-27-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-27">c_0</script> represents the initial capital. The capital <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-191"><span class="MJXp-msubsup" id="MJXp-Span-192"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-193" style="margin-right: 0.05em;">c</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-194" style="vertical-align: -0.4em;">1</span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-28-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-28">c_1</script> at the end of day one depends on your betting success on that day and might be either <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-195"><span class="MJXp-msubsup" id="MJXp-Span-196"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-197" style="margin-right: 0.05em;">c</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-198" style="vertical-align: -0.4em;">0</span></span><span class="MJXp-mo" id="MJXp-Span-199" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-msubsup" id="MJXp-Span-200"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-201" style="margin-right: 0.05em;">b</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-202" style="vertical-align: -0.4em;">1</span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-29-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-29">c_0 + b_1</script> or <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-203"><span class="MJXp-msubsup" id="MJXp-Span-204"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-205" style="margin-right: 0.05em;">c</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-206" style="vertical-align: -0.4em;">0</span></span><span class="MJXp-mo" id="MJXp-Span-207" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-msubsup" id="MJXp-Span-208"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-209" style="margin-right: 0.05em;">b</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-210" style="vertical-align: -0.4em;">1</span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-30-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-30">c_0 - b_1</script>. The expected value for a gamble that is repeated <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-211"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-212">n</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-31-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-31">n</script> times then is</p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-213"><span class="MJXp-mrow" id="MJXp-Span-214"><span class="MJXp-mi MJXp-bold" id="MJXp-Span-215">E</span></span><span class="MJXp-mo" id="MJXp-Span-216" style="margin-left: 0em; margin-right: 0em;">[</span><span class="MJXp-msubsup" id="MJXp-Span-217"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-218" style="margin-right: 0.05em;">B</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-219" style="vertical-align: 0.5em;">n</span></span><span class="MJXp-mo" id="MJXp-Span-220" style="margin-left: 0em; margin-right: 0em;">]</span><span class="MJXp-mo" id="MJXp-Span-221" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-msubsup" id="MJXp-Span-222"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-223" style="margin-right: 0.05em;">c</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-224" style="vertical-align: -0.4em;">0</span></span><span class="MJXp-mo" id="MJXp-Span-225" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-munderover" id="MJXp-Span-226"><span><span class="MJXp-over"><span class=" MJXp-script"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-232" style="margin-right: 0px; margin-left: 0px;">n</span></span><span class=""><span class="MJXp-mo" id="MJXp-Span-227" style="margin-left: 0.111em; margin-right: 0.167em;"><span class="MJXp-largeop">∑</span></span></span></span></span><span class=" MJXp-script"><span class="MJXp-mrow" id="MJXp-Span-228" style="margin-left: 0px;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-229">i</span><span class="MJXp-mo" id="MJXp-Span-230">=</span><span class="MJXp-mn" id="MJXp-Span-231">1</span></span></span></span><span class="MJXp-mo" id="MJXp-Span-233" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-234">p</span><span class="MJXp-mo" id="MJXp-Span-235" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-236">q</span><span class="MJXp-mo" id="MJXp-Span-237" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-238" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-msubsup" id="MJXp-Span-239"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-240" style="margin-right: 0.05em;">b</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-241" style="vertical-align: -0.4em;">i</span></span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-32-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-32">\begin{equation}
\mathbf{E}[B^n] = c_0 + \sum_{i=1}^n (p - q) \cdot b_i
\end{equation}</script>
</div>
</div>
<div class="paragraph">
<p>In classical economic theory, with risk-neutral, expected 
utility-maximizing agents, one would try to maximize the above 
expression. It is easily seen that it is maximized by — like in the 
one-shot scenario — betting all available funds, i.e. <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-242"><span class="MJXp-msubsup" id="MJXp-Span-243"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-244" style="margin-right: 0.05em;">b</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-245" style="vertical-align: -0.4em;">i</span></span><span class="MJXp-mo" id="MJXp-Span-246" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-msubsup" id="MJXp-Span-247"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-248" style="margin-right: 0.05em;">c</span><span class="MJXp-mrow MJXp-script" id="MJXp-Span-249" style="vertical-align: -0.4em;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-250">i</span><span class="MJXp-mo" id="MJXp-Span-251">−</span><span class="MJXp-mn" id="MJXp-Span-252">1</span></span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-33-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-33">b_i = c_{i-1}</script>.
 However, this in turn implies that a single loss will wipe out all 
available funds and will lead to ruin (unless unlimited borrowing is 
possible). Therefore, this strategy does not really help in maximizing 
long-term wealth.</p>
</div>
<div class="paragraph">
<p>While betting the maximum capital available might lead to sudden 
ruin, betting nothing at all avoids any kind of loss but does not help 
in benefiting from the advantageous gamble either. This is where the 
Kelly criterion enters the stage since it derives the <em>optimal fraction</em> <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-253"><span class="MJXp-msubsup" id="MJXp-Span-254"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-255" style="margin-right: 0.05em;">f</span><span class="MJXp-mo MJXp-script" id="MJXp-Span-256" style="vertical-align: 0.5em;">∗</span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-34-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-34">f^*</script> of the available capital to bet per round of betting. Assume that <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-257"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-258">n</span><span class="MJXp-mo" id="MJXp-Span-259" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-260">h</span><span class="MJXp-mo" id="MJXp-Span-261" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-262">t</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-35-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-35">n = h + t</script> where <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-263"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-264">h</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-36-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-36">h</script> stands for the number of heads observed during <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-265"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-266">n</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-37-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-37">n</script> rounds of betting and where <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-267"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-268">t</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-38-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-38">t</script> stands for the number of tails. With these definitions, the available capital after <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-269"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-270">n</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-39-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-39">n</script> rounds is</p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-271"><span class="MJXp-msubsup" id="MJXp-Span-272"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-273" style="margin-right: 0.05em;">c</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-274" style="vertical-align: -0.4em;">n</span></span><span class="MJXp-mo" id="MJXp-Span-275" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-msubsup" id="MJXp-Span-276"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-277" style="margin-right: 0.05em;">c</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-278" style="vertical-align: -0.4em;">0</span></span><span class="MJXp-mo" id="MJXp-Span-279" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mo" id="MJXp-Span-280" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-281">1</span><span class="MJXp-mo" id="MJXp-Span-282" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-283">f</span><span class="MJXp-msubsup" id="MJXp-Span-284"><span class="MJXp-mo" id="MJXp-Span-285" style="margin-left: 0em; margin-right: 0.05em;">)</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-286" style="vertical-align: 0.5em;">h</span></span><span class="MJXp-mo" id="MJXp-Span-287" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mo" id="MJXp-Span-288" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-289">1</span><span class="MJXp-mo" id="MJXp-Span-290" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-291">f</span><span class="MJXp-msubsup" id="MJXp-Span-292"><span class="MJXp-mo" id="MJXp-Span-293" style="margin-left: 0em; margin-right: 0.05em;">)</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-294" style="vertical-align: 0.5em;">t</span></span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-40-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-40">\begin{equation}
c_n = c_0 \cdot (1 + f)^h \cdot (1 - f)^t
\end{equation}</script>
</div>
</div>
<div class="paragraph">
<p>In such a context, long-term wealth maximization boils down to 
maximizing the average geometric growth rate per bet which is given as</p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-295"><span class="MJXp-mtable" id="MJXp-Span-296"><span><span class="MJXp-mtr" id="MJXp-Span-297" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-298" style="text-align: right;"><span class="MJXp-msubsup" id="MJXp-Span-299"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-300" style="margin-right: 0.05em;">r</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-301" style="vertical-align: 0.5em;">g</span></span></span><span class="MJXp-mtd" id="MJXp-Span-302" style="padding-left: 0em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-303"></span><span class="MJXp-mo" id="MJXp-Span-304" style="margin-left: 0.333em; margin-right: 0.333em;">=</span></span><span class="MJXp-mtd" id="MJXp-Span-305" style="padding-left: 0.278em; text-align: left;"><span class="MJXp-mi" id="MJXp-Span-306">log</span><span class="MJXp-mo" id="MJXp-Span-307" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-msubsup" id="MJXp-Span-308"><span class="MJXp-mrow" id="MJXp-Span-309" style="margin-right: 0.05em;"><span class="MJXp-mo" id="MJXp-Span-310" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.689em;"><span style="font-size: 3.756em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">(</span></span><span class="MJXp-mfrac" id="MJXp-Span-311" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-msubsup" id="MJXp-Span-312"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-313" style="margin-right: 0.05em;">c</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-314" style="vertical-align: -0.4em;">n</span></span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-msubsup" id="MJXp-Span-315"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-316" style="margin-right: 0.05em;">c</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-317" style="vertical-align: -0.4em;">0</span></span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-318" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.689em;"><span style="font-size: 3.756em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">)</span></span></span><span class="MJXp-mrow MJXp-script" id="MJXp-Span-319" style="vertical-align: 1.54em;"><span class="MJXp-mn" id="MJXp-Span-320">1</span><span class="MJXp-mrow" id="MJXp-Span-321"><span class="MJXp-mo" id="MJXp-Span-322">/</span></span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-323">n</span></span></span></span></span><span class="MJXp-mtr" id="MJXp-Span-324" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-325" style="padding-top: 0.3em; text-align: right;"></span><span class="MJXp-mtd" id="MJXp-Span-326" style="padding-left: 0em; padding-top: 0.3em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-327"></span><span class="MJXp-mo" id="MJXp-Span-328" style="margin-left: 0.333em; margin-right: 0.333em;">=</span></span><span class="MJXp-mtd" id="MJXp-Span-329" style="padding-left: 0.278em; padding-top: 0.3em; text-align: left;"><span class="MJXp-mi" id="MJXp-Span-330">log</span><span class="MJXp-mo" id="MJXp-Span-331" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-msubsup" id="MJXp-Span-332"><span class="MJXp-mrow" id="MJXp-Span-333" style="margin-right: 0.05em;"><span class="MJXp-mo" id="MJXp-Span-334" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.867em;"><span style="font-size: 4.467em; margin-left: -0.21em;" class="MJXp-right MJXp-scale3">(</span></span><span class="MJXp-mfrac" id="MJXp-Span-335" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-msubsup" id="MJXp-Span-336"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-337" style="margin-right: 0.05em;">c</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-338" style="vertical-align: -0.4em;">0</span></span><span class="MJXp-mo" id="MJXp-Span-339" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mo" id="MJXp-Span-340" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-341">1</span><span class="MJXp-mo" id="MJXp-Span-342" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-343">f</span><span class="MJXp-msubsup" id="MJXp-Span-344"><span class="MJXp-mo" id="MJXp-Span-345" style="margin-left: 0em; margin-right: 0.05em;">)</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-346" style="vertical-align: 0.5em;">h</span></span><span class="MJXp-mo" id="MJXp-Span-347" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mo" id="MJXp-Span-348" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-349">1</span><span class="MJXp-mo" id="MJXp-Span-350" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-351">f</span><span class="MJXp-msubsup" id="MJXp-Span-352"><span class="MJXp-mo" id="MJXp-Span-353" style="margin-left: 0em; margin-right: 0.05em;">)</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-354" style="vertical-align: 0.5em;">t</span></span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-msubsup" id="MJXp-Span-355"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-356" style="margin-right: 0.05em;">c</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-357" style="vertical-align: -0.4em;">0</span></span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-358" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.867em;"><span style="font-size: 4.467em; margin-left: -0.21em;" class="MJXp-right MJXp-scale3">)</span></span></span><span class="MJXp-mrow MJXp-script" id="MJXp-Span-359" style="vertical-align: 1.86em;"><span class="MJXp-mn" id="MJXp-Span-360">1</span><span class="MJXp-mrow" id="MJXp-Span-361"><span class="MJXp-mo" id="MJXp-Span-362">/</span></span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-363">n</span></span></span></span></span><span class="MJXp-mtr" id="MJXp-Span-364" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-365" style="padding-top: 0.3em; text-align: right;"></span><span class="MJXp-mtd" id="MJXp-Span-366" style="padding-left: 0em; padding-top: 0.3em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-367"></span><span class="MJXp-mo" id="MJXp-Span-368" style="margin-left: 0.333em; margin-right: 0.333em;">=</span></span><span class="MJXp-mtd" id="MJXp-Span-369" style="padding-left: 0.278em; padding-top: 0.3em; text-align: left;"><span class="MJXp-mi" id="MJXp-Span-370">log</span><span class="MJXp-mo" id="MJXp-Span-371" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-msubsup" id="MJXp-Span-372"><span class="MJXp-mrow" id="MJXp-Span-373" style="margin-right: 0.05em;"><span class="MJXp-mo" id="MJXp-Span-374" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.289em;"><span style="font-size: 2.156em; margin-left: -0.09em;" class="MJXp-right MJXp-scale6">(</span></span><span class="MJXp-mo" id="MJXp-Span-375" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-376">1</span><span class="MJXp-mo" id="MJXp-Span-377" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-378">f</span><span class="MJXp-msubsup" id="MJXp-Span-379"><span class="MJXp-mo" id="MJXp-Span-380" style="margin-left: 0em; margin-right: 0.05em;">)</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-381" style="vertical-align: 0.5em;">h</span></span><span class="MJXp-mo" id="MJXp-Span-382" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mo" id="MJXp-Span-383" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-384">1</span><span class="MJXp-mo" id="MJXp-Span-385" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-386">f</span><span class="MJXp-msubsup" id="MJXp-Span-387"><span class="MJXp-mo" id="MJXp-Span-388" style="margin-left: 0em; margin-right: 0.05em;">)</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-389" style="vertical-align: 0.5em;">t</span></span><span class="MJXp-mo" id="MJXp-Span-390" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.289em;"><span style="font-size: 2.156em; margin-left: -0.09em;" class="MJXp-right MJXp-scale6">)</span></span></span><span class="MJXp-mrow MJXp-script" id="MJXp-Span-391" style="vertical-align: 0.82em;"><span class="MJXp-mn" id="MJXp-Span-392">1</span><span class="MJXp-mrow" id="MJXp-Span-393"><span class="MJXp-mo" id="MJXp-Span-394">/</span></span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-395">n</span></span></span></span></span><span class="MJXp-mtr" id="MJXp-Span-396" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-397" style="padding-top: 0.3em; text-align: right;"></span><span class="MJXp-mtd" id="MJXp-Span-398" style="padding-left: 0em; padding-top: 0.3em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-399"></span><span class="MJXp-mo" id="MJXp-Span-400" style="margin-left: 0.333em; margin-right: 0.333em;">=</span></span><span class="MJXp-mtd" id="MJXp-Span-401" style="padding-left: 0.278em; padding-top: 0.3em; text-align: left;"><span class="MJXp-mfrac" id="MJXp-Span-402" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-403">h</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-404">n</span></span></span></span></span></span><span class="MJXp-mi" id="MJXp-Span-405">log</span><span class="MJXp-mo" id="MJXp-Span-406" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mo" id="MJXp-Span-407" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-408">1</span><span class="MJXp-mo" id="MJXp-Span-409" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-410">f</span><span class="MJXp-mo" id="MJXp-Span-411" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-412" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mfrac" id="MJXp-Span-413" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-414">t</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-415">n</span></span></span></span></span></span><span class="MJXp-mi" id="MJXp-Span-416">log</span><span class="MJXp-mo" id="MJXp-Span-417" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mo" id="MJXp-Span-418" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-419">1</span><span class="MJXp-mo" id="MJXp-Span-420" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-421">f</span><span class="MJXp-mo" id="MJXp-Span-422" style="margin-left: 0em; margin-right: 0em;">)</span></span></span></span></span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-41-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-41">\begin{eqnarray}
r^g &=& \log \left( \frac{c_n}{c_0} \right)^{1/n} \\
    &=& \log \left( \frac{c_0 \cdot (1 + f)^h \cdot (1 - f)^t}{c_0} \right)^{1/n} \\
    &=& \log \left( (1 + f)^h \cdot (1 - f)^t \right)^{1/n} \\
    &=& \frac{h}{n}\log (1 + f) + \frac{t}{n} \log(1 - f)
\end{eqnarray}</script>
</div>
</div>
<div class="paragraph">
<p>The problem then formally is to maximize the <em>expected</em> average rate of growth by choosing <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-423"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-424">f</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-42-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-42">f</script> optimally. With <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-425"><span class="MJXp-mrow" id="MJXp-Span-426"><span class="MJXp-mi MJXp-bold" id="MJXp-Span-427">E</span></span><span class="MJXp-mo" id="MJXp-Span-428" style="margin-left: 0em; margin-right: 0em;">[</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-429">h</span><span class="MJXp-mo" id="MJXp-Span-430" style="margin-left: 0em; margin-right: 0em;">]</span><span class="MJXp-mo" id="MJXp-Span-431" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-432">n</span><span class="MJXp-mo" id="MJXp-Span-433" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-434">p</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-43-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-43">\mathbf{E}[h] = n \cdot p</script> and <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-435"><span class="MJXp-mrow" id="MJXp-Span-436"><span class="MJXp-mi MJXp-bold" id="MJXp-Span-437">E</span></span><span class="MJXp-mo" id="MJXp-Span-438" style="margin-left: 0em; margin-right: 0em;">[</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-439">t</span><span class="MJXp-mo" id="MJXp-Span-440" style="margin-left: 0em; margin-right: 0em;">]</span><span class="MJXp-mo" id="MJXp-Span-441" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-442">n</span><span class="MJXp-mo" id="MJXp-Span-443" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-444">q</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-44-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-44">\mathbf{E}[t] = n \cdot q</script>, we get</p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-445"><span class="MJXp-mtable" id="MJXp-Span-446"><span><span class="MJXp-mtr" id="MJXp-Span-447" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-448" style="text-align: right;"><span class="MJXp-mrow" id="MJXp-Span-449"><span class="MJXp-mi MJXp-bold" id="MJXp-Span-450">E</span></span><span class="MJXp-mo" id="MJXp-Span-451" style="margin-left: 0em; margin-right: 0em;">[</span><span class="MJXp-msubsup" id="MJXp-Span-452"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-453" style="margin-right: 0.05em;">r</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-454" style="vertical-align: 0.5em;">g</span></span><span class="MJXp-mo" id="MJXp-Span-455" style="margin-left: 0em; margin-right: 0em;">]</span></span><span class="MJXp-mtd" id="MJXp-Span-456" style="padding-left: 0em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-457"></span><span class="MJXp-mo" id="MJXp-Span-458" style="margin-left: 0.333em; margin-right: 0.333em;">=</span></span><span class="MJXp-mtd" id="MJXp-Span-459" style="padding-left: 0.278em; text-align: left;"><span class="MJXp-mrow" id="MJXp-Span-460"><span class="MJXp-mi MJXp-bold" id="MJXp-Span-461">E</span></span><span class="MJXp-mrow" id="MJXp-Span-462"><span class="MJXp-mo" id="MJXp-Span-463" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.5em;"><span style="font-size: 3em; margin-left: -0.13em;" class="MJXp-right MJXp-scale5">[</span></span><span class="MJXp-mfrac" id="MJXp-Span-464" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-465">h</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-466">n</span></span></span></span></span></span><span class="MJXp-mi" id="MJXp-Span-467">log</span><span class="MJXp-mo" id="MJXp-Span-468" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mo" id="MJXp-Span-469" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-470">1</span><span class="MJXp-mo" id="MJXp-Span-471" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-472">f</span><span class="MJXp-mo" id="MJXp-Span-473" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-474" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mfrac" id="MJXp-Span-475" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-476">t</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-477">n</span></span></span></span></span></span><span class="MJXp-mi" id="MJXp-Span-478">log</span><span class="MJXp-mo" id="MJXp-Span-479" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mo" id="MJXp-Span-480" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-481">1</span><span class="MJXp-mo" id="MJXp-Span-482" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-483">f</span><span class="MJXp-mo" id="MJXp-Span-484" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-485" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.5em;"><span style="font-size: 3em; margin-left: -0.13em;" class="MJXp-right MJXp-scale5">]</span></span></span></span></span><span class="MJXp-mtr" id="MJXp-Span-486" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-487" style="padding-top: 0.3em; text-align: right;"></span><span class="MJXp-mtd" id="MJXp-Span-488" style="padding-left: 0em; padding-top: 0.3em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-489"></span><span class="MJXp-mo" id="MJXp-Span-490" style="margin-left: 0.333em; margin-right: 0.333em;">=</span></span><span class="MJXp-mtd" id="MJXp-Span-491" style="padding-left: 0.278em; padding-top: 0.3em; text-align: left;"><span class="MJXp-mrow" id="MJXp-Span-492"><span class="MJXp-mi MJXp-bold" id="MJXp-Span-493">E</span></span><span class="MJXp-mo" id="MJXp-Span-494" style="margin-left: 0em; margin-right: 0em;">[</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-495">p</span><span class="MJXp-mi" id="MJXp-Span-496">log</span><span class="MJXp-mo" id="MJXp-Span-497" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mo" id="MJXp-Span-498" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-499">1</span><span class="MJXp-mo" id="MJXp-Span-500" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-501">f</span><span class="MJXp-mo" id="MJXp-Span-502" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-503" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-504">q</span><span class="MJXp-mi" id="MJXp-Span-505">log</span><span class="MJXp-mo" id="MJXp-Span-506" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mo" id="MJXp-Span-507" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-508">1</span><span class="MJXp-mo" id="MJXp-Span-509" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-510">f</span><span class="MJXp-mo" id="MJXp-Span-511" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-512" style="margin-left: 0em; margin-right: 0em;">]</span></span></span><span class="MJXp-mtr" id="MJXp-Span-513" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-514" style="padding-top: 0.3em; text-align: right;"></span><span class="MJXp-mtd" id="MJXp-Span-515" style="padding-left: 0em; padding-top: 0.3em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-516"></span><span class="MJXp-mo" id="MJXp-Span-517" style="margin-left: 0.333em; margin-right: 0.333em;">=</span></span><span class="MJXp-mtd" id="MJXp-Span-518" style="padding-left: 0.278em; padding-top: 0.3em; text-align: left;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-519">p</span><span class="MJXp-mi" id="MJXp-Span-520">log</span><span class="MJXp-mo" id="MJXp-Span-521" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mo" id="MJXp-Span-522" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-523">1</span><span class="MJXp-mo" id="MJXp-Span-524" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-525">f</span><span class="MJXp-mo" id="MJXp-Span-526" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-527" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-528">q</span><span class="MJXp-mi" id="MJXp-Span-529">log</span><span class="MJXp-mo" id="MJXp-Span-530" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mo" id="MJXp-Span-531" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-532">1</span><span class="MJXp-mo" id="MJXp-Span-533" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-534">f</span><span class="MJXp-mo" id="MJXp-Span-535" style="margin-left: 0em; margin-right: 0em;">)</span></span></span><span class="MJXp-mtr" id="MJXp-Span-536" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-537" style="padding-top: 0.3em; text-align: right;"></span><span class="MJXp-mtd" id="MJXp-Span-538" style="padding-left: 0em; padding-top: 0.3em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-539"></span><span class="MJXp-mo" id="MJXp-Span-540" style="margin-left: 0.333em; margin-right: 0.333em;">≡</span></span><span class="MJXp-mtd" id="MJXp-Span-541" style="padding-left: 0.278em; padding-top: 0.3em; text-align: left;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-542">G</span><span class="MJXp-mo" id="MJXp-Span-543" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-544">f</span><span class="MJXp-mo" id="MJXp-Span-545" style="margin-left: 0em; margin-right: 0em;">)</span></span></span></span></span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-45-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-45">\begin{eqnarray}
\mathbf{E}[r^g] &=& \mathbf{E}\left[\frac{h}{n}\log (1 + f) + \frac{t}{n} \log(1 - f)\right] \\
    &=& \mathbf{E}[p\log (1 + f) + q \log(1 - f)] \\
    &=& p\log (1 + f) + q \log(1 - f) \\
    &\equiv& G(f)
\end{eqnarray}</script>
</div>
</div>
<div class="paragraph">
<p>We can now maximize the term by choosing the optimal fraction <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-546"><span class="MJXp-msubsup" id="MJXp-Span-547"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-548" style="margin-right: 0.05em;">f</span><span class="MJXp-mo MJXp-script" id="MJXp-Span-549" style="vertical-align: 0.5em;">∗</span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-46-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-46">f^*</script> according to the first order condition. The first derivative is given by</p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-550"><span class="MJXp-mtable" id="MJXp-Span-551"><span><span class="MJXp-mtr" id="MJXp-Span-552" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-553" style="text-align: right;"><span class="MJXp-msup" id="MJXp-Span-554"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-555" style="margin-right: 0.05em;">G</span><span class="MJXp-mo MJXp-script" id="MJXp-Span-556" style="vertical-align: 0.5em;">′</span></span><span class="MJXp-mo" id="MJXp-Span-557" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-558">f</span><span class="MJXp-mo" id="MJXp-Span-559" style="margin-left: 0em; margin-right: 0em;">)</span></span><span class="MJXp-mtd" id="MJXp-Span-560" style="padding-left: 0em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-561"></span><span class="MJXp-mo" id="MJXp-Span-562" style="margin-left: 0.333em; margin-right: 0.333em;">=</span></span><span class="MJXp-mtd" id="MJXp-Span-563" style="padding-left: 0.278em; text-align: left;"><span class="MJXp-mfrac" id="MJXp-Span-564" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-565">p</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mn" id="MJXp-Span-566">1</span><span class="MJXp-mo" id="MJXp-Span-567" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-568">f</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-569" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mfrac" id="MJXp-Span-570" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-571">q</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mn" id="MJXp-Span-572">1</span><span class="MJXp-mo" id="MJXp-Span-573" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-574">f</span></span></span></span></span></span></span></span><span class="MJXp-mtr" id="MJXp-Span-575" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-576" style="padding-top: 0.3em; text-align: right;"></span><span class="MJXp-mtd" id="MJXp-Span-577" style="padding-left: 0em; padding-top: 0.3em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-578"></span><span class="MJXp-mo" id="MJXp-Span-579" style="margin-left: 0.333em; margin-right: 0.333em;">=</span></span><span class="MJXp-mtd" id="MJXp-Span-580" style="padding-left: 0.278em; padding-top: 0.3em; text-align: left;"><span class="MJXp-mfrac" id="MJXp-Span-581" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-582">p</span><span class="MJXp-mo" id="MJXp-Span-583" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-584">p</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-585">f</span><span class="MJXp-mo" id="MJXp-Span-586" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-587">q</span><span class="MJXp-mo" id="MJXp-Span-588" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-589">q</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-590">f</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mo" id="MJXp-Span-591" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-592">1</span><span class="MJXp-mo" id="MJXp-Span-593" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-594">f</span><span class="MJXp-mo" id="MJXp-Span-595" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-596" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-597">1</span><span class="MJXp-mo" id="MJXp-Span-598" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-599">f</span><span class="MJXp-mo" id="MJXp-Span-600" style="margin-left: 0em; margin-right: 0em;">)</span></span></span></span></span></span></span></span><span class="MJXp-mtr" id="MJXp-Span-601" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-602" style="padding-top: 0.3em; text-align: right;"></span><span class="MJXp-mtd" id="MJXp-Span-603" style="padding-left: 0em; padding-top: 0.3em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-604"></span><span class="MJXp-mo" id="MJXp-Span-605" style="margin-left: 0.333em; margin-right: 0.333em;">=</span></span><span class="MJXp-mtd" id="MJXp-Span-606" style="padding-left: 0.278em; padding-top: 0.3em; text-align: left;"><span class="MJXp-mfrac" id="MJXp-Span-607" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-608">p</span><span class="MJXp-mo" id="MJXp-Span-609" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-610">q</span><span class="MJXp-mo" id="MJXp-Span-611" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-612">f</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mo" id="MJXp-Span-613" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-614">1</span><span class="MJXp-mo" id="MJXp-Span-615" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-616">f</span><span class="MJXp-mo" id="MJXp-Span-617" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-618" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-619">1</span><span class="MJXp-mo" id="MJXp-Span-620" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-621">f</span><span class="MJXp-mo" id="MJXp-Span-622" style="margin-left: 0em; margin-right: 0em;">)</span></span></span></span></span></span></span></span></span></span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-47-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-47">\begin{eqnarray}
G'(f) &=& \frac{p}{1+f} - \frac{q}{1-f} \\
      &=& \frac{p-pf-q-qf}{(1+f)(1-f)} \\
      &=& \frac{p-q-f}{(1+f)(1-f)}
\end{eqnarray}</script>
</div>
</div>
<div class="paragraph">
<p>From the first order condition, we then finally get</p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-623"><span class="MJXp-msup" id="MJXp-Span-624"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-625" style="margin-right: 0.05em;">G</span><span class="MJXp-mo MJXp-script" id="MJXp-Span-626" style="vertical-align: 0.5em;">′</span></span><span class="MJXp-mo" id="MJXp-Span-627" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-628">f</span><span class="MJXp-mo" id="MJXp-Span-629" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mrow" id="MJXp-Span-630"><span class="MJXp-munderover" id="MJXp-Span-631"><span><span class="MJXp-over"><span class=" MJXp-script"><span class="MJXp-mrow" id="MJXp-Span-634" style="margin-right: 0px; margin-left: 0px;"><span class="MJXp-mo" id="MJXp-Span-635">!</span></span></span><span class=""><span class="MJXp-mrow" id="MJXp-Span-632"><span class="MJXp-mo" id="MJXp-Span-633" style="margin-left: 0.333em; margin-right: 0.333em;">=</span></span></span></span></span></span></span><span class="MJXp-mn" id="MJXp-Span-636">0</span><span class="MJXp-mo" id="MJXp-Span-637" style="margin-left: 0.333em; margin-right: 0.333em;">⇒</span><span class="MJXp-msubsup" id="MJXp-Span-638"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-639" style="margin-right: 0.05em;">f</span><span class="MJXp-mo MJXp-script" id="MJXp-Span-640" style="vertical-align: 0.5em;">∗</span></span><span class="MJXp-mo" id="MJXp-Span-641" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-642">p</span><span class="MJXp-mo" id="MJXp-Span-643" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-644">q</span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-48-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-48">G'(f)\stackrel{!}{=}0 \Rightarrow f^* = p - q</script>
</div>
</div>
<div class="paragraph">
<p>If we trust this to be the maximum (and not the minimum), this result implies that it is optimal to invest a fraction <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-645"><span class="MJXp-msubsup" id="MJXp-Span-646"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-647" style="margin-right: 0.05em;">f</span><span class="MJXp-mo MJXp-script" id="MJXp-Span-648" style="vertical-align: 0.5em;">∗</span></span><span class="MJXp-mo" id="MJXp-Span-649" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-650">p</span><span class="MJXp-mo" id="MJXp-Span-651" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-652">q</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-49-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-49">f^* = p - q</script> per round of betting. With, for example, <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-653"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-654">p</span><span class="MJXp-mo" id="MJXp-Span-655" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mn" id="MJXp-Span-656">0.55</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-50-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-50">p = 0.55</script> one has <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-657"><span class="MJXp-msubsup" id="MJXp-Span-658"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-659" style="margin-right: 0.05em;">f</span><span class="MJXp-mo MJXp-script" id="MJXp-Span-660" style="vertical-align: 0.5em;">∗</span></span><span class="MJXp-mo" id="MJXp-Span-661" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mn" id="MJXp-Span-662">0.55</span><span class="MJXp-mo" id="MJXp-Span-663" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mn" id="MJXp-Span-664">0.45</span><span class="MJXp-mo" id="MJXp-Span-665" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mn" id="MJXp-Span-666">0.1</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-51-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-51">f^* = 0.55 - 0.45 = 0.1</script> or that the optimal fraction is 10%.</p>
</div>
<div class="paragraph">
<p>Let us formalize these concepts by the use of Python and simulation 
techniques. The idea is to simulate, for example, 50 series with 100 
coin tosses per series. The Python code is quite simple.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

In [<span class="integer">2</span>]: np.random.seed(<span class="integer">1000</span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">3</span>]: p = <span class="float">0.55</span>  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">4</span>]: f = p - (<span class="integer">1</span> - p)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">5</span>]: f  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">5</span>]: <span class="float">0.10000000000000009</span>

In [<span class="integer">6</span>]: I = <span class="integer">50</span>  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">7</span>]: n = <span class="integer">100</span>  <i class="conum" data-value="6"></i><b>(6)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Fixes the seed of the random number generator.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Fixes the probability for heads.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Calculates the optimal fraction according to the Kelly criterion.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>It is 10% given the assumptions.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The number of series to be simulated.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The number of trials per series.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The major part is the Python function <code>run_simulation</code> which achieves the simulation according to the above assumptions. <a href="#kelly_01">50 simulated series with 100 trials each (red line = average)</a> shows the simulation results.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">8</span>]: <span class="keyword">def</span> <span class="function">run_simulation</span>(f):
            c = np.zeros((n, I))  <i class="conum" data-value="1"></i><b>(1)</b>
            c[<span class="integer">0</span>] = <span class="integer">100</span>  <i class="conum" data-value="2"></i><b>(2)</b>
            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(I):  <i class="conum" data-value="3"></i><b>(3)</b>
                <span class="keyword">for</span> t <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">1</span>, n):  <i class="conum" data-value="4"></i><b>(4)</b>
                    o = np.random.binomial(<span class="integer">1</span>, p)  <i class="conum" data-value="5"></i><b>(5)</b>
                    <span class="keyword">if</span> o &gt; <span class="integer">0</span>:  <i class="conum" data-value="6"></i><b>(6)</b>
                        c[t, i] = (<span class="integer">1</span> + f) * c[t - <span class="integer">1</span>, i]  <i class="conum" data-value="7"></i><b>(7)</b>
                    <span class="keyword">else</span>:  <i class="conum" data-value="8"></i><b>(8)</b>
                        c[t, i] = (<span class="integer">1</span> - f) * c[t - <span class="integer">1</span>, i]  <i class="conum" data-value="9"></i><b>(9)</b>
            <span class="keyword">return</span> c

In [<span class="integer">9</span>]: c_1 = run_simulation(f)  <i class="conum" data-value="10"></i><b>(10)</b>

In [<span class="integer">10</span>]: plt.plot(c_1, <span class="string"><span class="delimiter">'</span><span class="content">b</span><span class="delimiter">'</span></span>, lw=<span class="float">0.5</span>)  <i class="conum" data-value="11"></i><b>(11)</b>
         plt.plot(c_1.mean(axis=<span class="integer">1</span>), <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>, lw=<span class="float">2.5</span>)  <i class="conum" data-value="12"></i><b>(12)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Instantiates a new <code>ndarray</code> object to store the simulation results.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Initializes the starting capital with 100.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Outer loop for the series simulations.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Inner loop for the series itself.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Simulates the tossing of a coin.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>If 1, i.e. heads, …​</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>…​ then add the win to the capital.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>If 0, i.e tails, …​</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>…​ subtract the loss from the capital.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>This runs the simulation.</td>
</tr>
<tr>
<td><i class="conum" data-value="11"></i><b>11</b></td>
<td>Plots all 50 series.</td>
</tr>
<tr>
<td><i class="conum" data-value="12"></i><b>12</b></td>
<td>Plots the average over all 50 series.</td>
</tr>
</tbody></table>
</div>
<div id="kelly_01" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/kelly_01.png" alt="kelly 01">
</div>
<div class="title">Figure 76. 50 simulated series with 100 trials each (red line = average)</div>
</div>
<div class="paragraph">
<p>The following code repeats the simulation for different values for <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-667"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-668">f</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-52-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-52">f</script>. As shown in <a href="#kelly_02">Average capital over time for different fractions</a>,
 a lower fraction leads to a lower growth rate on average. Higher values
 might be both to a higher average capital at the end of the simulation (<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-669"><span class="MJXp-mstyle" id="MJXp-Span-670"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-671">f</span><span class="MJXp-mo" id="MJXp-Span-672" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mn" id="MJXp-Span-673">0.25</span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-53-Frame" tabindex="0"></span><script type="math/asciimath" id="MathJax-Element-53">f=0.25</script>) or lead to a much lower average capital (<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-674"><span class="MJXp-mstyle" id="MJXp-Span-675"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-676">f</span><span class="MJXp-mo" id="MJXp-Span-677" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mn" id="MJXp-Span-678">0.5</span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-54-Frame" tabindex="0"></span><script type="math/asciimath" id="MathJax-Element-54">f=0.5</script>). In both cases where the fraction <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-679"><span class="MJXp-mstyle" id="MJXp-Span-680"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-681">f</span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-55-Frame" tabindex="0"></span><script type="math/asciimath" id="MathJax-Element-55">f</script> is higher, the volatility increases considerably.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">12</span>]: c_2 = run_simulation(<span class="float">0.05</span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">13</span>]: c_3 = run_simulation(<span class="float">0.25</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">14</span>]: c_4 = run_simulation(<span class="float">0.5</span>)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">15</span>]: plt.plot(c_1.mean(axis=<span class="integer">1</span>), <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>, label=<span class="string"><span class="delimiter">'</span><span class="content">$f^*=0.1$</span><span class="delimiter">'</span></span>)
         plt.plot(c_2.mean(axis=<span class="integer">1</span>), <span class="string"><span class="delimiter">'</span><span class="content">b</span><span class="delimiter">'</span></span>, label=<span class="string"><span class="delimiter">'</span><span class="content">$f=0.05$</span><span class="delimiter">'</span></span>)
         plt.plot(c_3.mean(axis=<span class="integer">1</span>), <span class="string"><span class="delimiter">'</span><span class="content">y</span><span class="delimiter">'</span></span>, label=<span class="string"><span class="delimiter">'</span><span class="content">$f=0.25$</span><span class="delimiter">'</span></span>)
         plt.plot(c_4.mean(axis=<span class="integer">1</span>), <span class="string"><span class="delimiter">'</span><span class="content">m</span><span class="delimiter">'</span></span>, label=<span class="string"><span class="delimiter">'</span><span class="content">$f=0.5$</span><span class="delimiter">'</span></span>)
         plt.legend(loc=<span class="integer">0</span>)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Simulation with <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-682"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-683">f</span><span class="MJXp-mo" id="MJXp-Span-684" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mn" id="MJXp-Span-685">0.05</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-56-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-56">f = 0.05</script>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Simulation with <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-686"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-687">f</span><span class="MJXp-mo" id="MJXp-Span-688" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mn" id="MJXp-Span-689">0.25</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-57-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-57">f = 0.25</script>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Simulation with <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-690"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-691">f</span><span class="MJXp-mo" id="MJXp-Span-692" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mn" id="MJXp-Span-693">0.5</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-58-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-58">f = 0.5</script>.</td>
</tr>
</tbody></table>
</div>
<div id="kelly_02" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/kelly_02.png" alt="kelly 02">
</div>
<div class="title">Figure 77. Average capital over time for different fractions</div>
</div>
</div>
<div class="sect3">
<h4 id="_deriving_the_kelly_criterion_for_stocks_and_indices">11.2.2. Deriving the Kelly Criterion for Stocks and Indices</h4>
<div class="paragraph">
<p>Let us now turn to a stock market setting for which we again assume 
that the relevant stock (index) can take on only two values after a 
period of one year from today, given its known value today. The setting 
is again binomial, but this time a bit closer on the modeling side to 
stock market realities.<sup class="footnote">[<a id="_footnoteref_35" class="footnote" href="#_footnote_35" title="View footnote.">35</a>]</sup> Specifically, assume that</p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-694"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-695">P</span><span class="MJXp-mrow" id="MJXp-Span-696"><span class="MJXp-mo" id="MJXp-Span-697" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.289em;"><span style="font-size: 2.156em; margin-left: -0.09em;" class="MJXp-right MJXp-scale6">(</span></span><span class="MJXp-msubsup" id="MJXp-Span-698"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-699" style="margin-right: 0.05em;">r</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-700" style="vertical-align: 0.5em;">S</span></span><span class="MJXp-mo" id="MJXp-Span-701" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-702">μ</span><span class="MJXp-mo" id="MJXp-Span-703" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-704">σ</span><span class="MJXp-mo" id="MJXp-Span-705" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.289em;"><span style="font-size: 2.156em; margin-left: -0.09em;" class="MJXp-right MJXp-scale6">)</span></span></span><span class="MJXp-mo" id="MJXp-Span-706" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-707">P</span><span class="MJXp-mrow" id="MJXp-Span-708"><span class="MJXp-mo" id="MJXp-Span-709" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.289em;"><span style="font-size: 2.156em; margin-left: -0.09em;" class="MJXp-right MJXp-scale6">(</span></span><span class="MJXp-msubsup" id="MJXp-Span-710"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-711" style="margin-right: 0.05em;">r</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-712" style="vertical-align: 0.5em;">S</span></span><span class="MJXp-mo" id="MJXp-Span-713" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-714">μ</span><span class="MJXp-mo" id="MJXp-Span-715" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-716">σ</span><span class="MJXp-mo" id="MJXp-Span-717" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.289em;"><span style="font-size: 2.156em; margin-left: -0.09em;" class="MJXp-right MJXp-scale6">)</span></span></span><span class="MJXp-mo" id="MJXp-Span-718" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mfrac" id="MJXp-Span-719" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mn" id="MJXp-Span-720">1</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mn" id="MJXp-Span-721">2</span></span></span></span></span></span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-59-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-59">P \left(r^S = \mu + \sigma \right) = P \left(r^S = \mu - \sigma \right) = \frac{1}{2}</script>
</div>
</div>
<div class="paragraph">
<p>with <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-722"><span class="MJXp-mrow" id="MJXp-Span-723"><span class="MJXp-mi MJXp-bold" id="MJXp-Span-724">E</span></span><span class="MJXp-mo" id="MJXp-Span-725" style="margin-left: 0em; margin-right: 0em;">[</span><span class="MJXp-msubsup" id="MJXp-Span-726"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-727" style="margin-right: 0.05em;">r</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-728" style="vertical-align: 0.5em;">S</span></span><span class="MJXp-mo" id="MJXp-Span-729" style="margin-left: 0em; margin-right: 0em;">]</span><span class="MJXp-mo" id="MJXp-Span-730" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-731">μ</span><span class="MJXp-mo" id="MJXp-Span-732" style="margin-left: 0.333em; margin-right: 0.333em;">&gt;</span><span class="MJXp-mn" id="MJXp-Span-733">0</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-60-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-60">\mathbf{E}[r^S] = \mu>0</script> being the expected return of the stock over one year and <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-734"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-735">σ</span><span class="MJXp-mo" id="MJXp-Span-736" style="margin-left: 0.333em; margin-right: 0.333em;">&gt;</span><span class="MJXp-mn" id="MJXp-Span-737">0</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-61-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-61">\sigma>0</script>
 being the standard deviation of returns (volatility). In a one-period 
setting, we get for the available capital after one year (with <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-738"><span class="MJXp-msubsup" id="MJXp-Span-739"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-740" style="margin-right: 0.05em;">c</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-741" style="vertical-align: -0.4em;">0</span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-62-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-62">c_0</script> and <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-742"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-743">f</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-63-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-63">f</script> defined as before)</p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-744"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-745">c</span><span class="MJXp-mo" id="MJXp-Span-746" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-747">f</span><span class="MJXp-mo" id="MJXp-Span-748" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-749" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-msubsup" id="MJXp-Span-750"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-751" style="margin-right: 0.05em;">c</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-752" style="vertical-align: -0.4em;">0</span></span><span class="MJXp-mo" id="MJXp-Span-753" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mrow" id="MJXp-Span-754"><span class="MJXp-mo" id="MJXp-Span-755" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.289em;"><span style="font-size: 2.156em; margin-left: -0.09em;" class="MJXp-right MJXp-scale6">(</span></span><span class="MJXp-mn" id="MJXp-Span-756">1</span><span class="MJXp-mo" id="MJXp-Span-757" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mo" id="MJXp-Span-758" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-759">1</span><span class="MJXp-mo" id="MJXp-Span-760" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-761">f</span><span class="MJXp-mo" id="MJXp-Span-762" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-763" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-764">r</span><span class="MJXp-mo" id="MJXp-Span-765" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-766">f</span><span class="MJXp-mo" id="MJXp-Span-767" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-msubsup" id="MJXp-Span-768"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-769" style="margin-right: 0.05em;">r</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-770" style="vertical-align: 0.5em;">S</span></span><span class="MJXp-mo" id="MJXp-Span-771" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.289em;"><span style="font-size: 2.156em; margin-left: -0.09em;" class="MJXp-right MJXp-scale6">)</span></span></span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-64-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-64">c(f) = c_0 \cdot \left(1 + (1 - f) \cdot r + f \cdot r^S \right)</script>
</div>
</div>
<div class="paragraph">
<p>Here, <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-772"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-773">r</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-65-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-65">r</script>
 is the constant short rate earned on cash not invested in the stock. 
Maximizing the geometric growth rate means maximizing the following 
term:</p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-774"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-775">G</span><span class="MJXp-mo" id="MJXp-Span-776" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-777">f</span><span class="MJXp-mo" id="MJXp-Span-778" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-779" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mrow" id="MJXp-Span-780"><span class="MJXp-mi MJXp-bold" id="MJXp-Span-781">E</span></span><span class="MJXp-mrow" id="MJXp-Span-782"><span class="MJXp-mo" id="MJXp-Span-783" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.689em;"><span style="font-size: 3.756em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">[</span></span><span class="MJXp-mi" id="MJXp-Span-784">log</span><span class="MJXp-mo" id="MJXp-Span-785" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mfrac" id="MJXp-Span-786" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-787">c</span><span class="MJXp-mo" id="MJXp-Span-788" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-789">f</span><span class="MJXp-mo" id="MJXp-Span-790" style="margin-left: 0em; margin-right: 0em;">)</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-msubsup" id="MJXp-Span-791"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-792" style="margin-right: 0.05em;">c</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-793" style="vertical-align: -0.4em;">0</span></span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-794" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.689em;"><span style="font-size: 3.756em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">]</span></span></span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-66-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-66">G(f) = \mathbf{E}\left[ \log \frac{c(f)}{c_0} \right]</script>
</div>
</div>
<div class="paragraph">
<p>Assume now that there are <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-795"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-796">n</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-67-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-67">n</script> relevant trading days in the year so that for each such trading day <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-797"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-798">i</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-68-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-68">i</script></p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-799"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-800">P</span><span class="MJXp-mrow" id="MJXp-Span-801"><span class="MJXp-mo" id="MJXp-Span-802" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.6em;"><span style="font-size: 3.4em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">(</span></span><span class="MJXp-msubsup" id="MJXp-Span-803"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-804" style="margin-right: 0.05em;">r</span><span class="MJXp-script-box" style="height: 1.86em; vertical-align: -0.64em;"><span class=" MJXp-script"><span><span style="margin-bottom: -0.25em;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-806">S</span></span></span></span><span class=" MJXp-script"><span><span style="margin-top: -0.85em;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-805">i</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-807" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mfrac" id="MJXp-Span-808" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-809">μ</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-810">n</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-811" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mfrac" id="MJXp-Span-812" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-813">σ</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-msqrt" id="MJXp-Span-814"><span class="MJXp-surd"><span style="font-size: 134%; margin-top: 0.104em;">√</span></span><span class="MJXp-root"><span class="MJXp-rule" style="border-top: 0.08em solid;"></span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-815">n</span></span></span></span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-816" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.6em;"><span style="font-size: 3.4em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">)</span></span></span><span class="MJXp-mo" id="MJXp-Span-817" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-818">P</span><span class="MJXp-mrow" id="MJXp-Span-819"><span class="MJXp-mo" id="MJXp-Span-820" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.6em;"><span style="font-size: 3.4em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">(</span></span><span class="MJXp-msubsup" id="MJXp-Span-821"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-822" style="margin-right: 0.05em;">r</span><span class="MJXp-script-box" style="height: 1.86em; vertical-align: -0.64em;"><span class=" MJXp-script"><span><span style="margin-bottom: -0.25em;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-824">S</span></span></span></span><span class=" MJXp-script"><span><span style="margin-top: -0.85em;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-823">i</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-825" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mfrac" id="MJXp-Span-826" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-827">μ</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-828">n</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-829" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mfrac" id="MJXp-Span-830" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-831">σ</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-msqrt" id="MJXp-Span-832"><span class="MJXp-surd"><span style="font-size: 134%; margin-top: 0.104em;">√</span></span><span class="MJXp-root"><span class="MJXp-rule" style="border-top: 0.08em solid;"></span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-833">n</span></span></span></span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-834" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.6em;"><span style="font-size: 3.4em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">)</span></span></span><span class="MJXp-mo" id="MJXp-Span-835" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mfrac" id="MJXp-Span-836" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mn" id="MJXp-Span-837">1</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mn" id="MJXp-Span-838">2</span></span></span></span></span></span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-69-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-69">P \left( r^S_i = \frac{\mu}{n} + \frac{\sigma}{\sqrt{n}} \right) = P \left(r^S_i = \frac{\mu}{n} - \frac{\sigma}{\sqrt{n}} \right) = \frac{1}{2}</script>
</div>
</div>
<div class="paragraph">
<p>Note that volatility scales with the square root of the number of 
trading days. Under these assumptions, the daily values scale up to the 
yearly ones from before and one gets</p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-839"><span class="MJXp-msubsup" id="MJXp-Span-840"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-841" style="margin-right: 0.05em;">c</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-842" style="vertical-align: -0.4em;">n</span></span><span class="MJXp-mo" id="MJXp-Span-843" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-844">f</span><span class="MJXp-mo" id="MJXp-Span-845" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-846" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-msubsup" id="MJXp-Span-847"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-848" style="margin-right: 0.05em;">c</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-849" style="vertical-align: -0.4em;">0</span></span><span class="MJXp-mo" id="MJXp-Span-850" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-munderover" id="MJXp-Span-851"><span><span class="MJXp-over"><span class=" MJXp-script"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-857" style="margin-right: 0px; margin-left: 0px;">n</span></span><span class=""><span class="MJXp-mo" id="MJXp-Span-852" style="margin-left: 0.111em; margin-right: 0.167em;"><span class="MJXp-largeop">∏</span></span></span></span></span><span class=" MJXp-script"><span class="MJXp-mrow" id="MJXp-Span-853" style="margin-left: 0px;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-854">i</span><span class="MJXp-mo" id="MJXp-Span-855">=</span><span class="MJXp-mn" id="MJXp-Span-856">1</span></span></span></span><span class="MJXp-mrow" id="MJXp-Span-858"><span class="MJXp-mo" id="MJXp-Span-859" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.5em;"><span style="font-size: 3em; margin-left: -0.13em;" class="MJXp-right MJXp-scale5">(</span></span><span class="MJXp-mn" id="MJXp-Span-860">1</span><span class="MJXp-mo" id="MJXp-Span-861" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mo" id="MJXp-Span-862" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-863">1</span><span class="MJXp-mo" id="MJXp-Span-864" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-865">f</span><span class="MJXp-mo" id="MJXp-Span-866" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-867" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mfrac" id="MJXp-Span-868" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-869">r</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-870">n</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-871" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-872">f</span><span class="MJXp-mo" id="MJXp-Span-873" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-msubsup" id="MJXp-Span-874"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-875" style="margin-right: 0.05em;">r</span><span class="MJXp-script-box" style="height: 1.86em; vertical-align: -0.64em;"><span class=" MJXp-script"><span><span style="margin-bottom: -0.25em;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-877">S</span></span></span></span><span class=" MJXp-script"><span><span style="margin-top: -0.85em;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-876">i</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-878" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.5em;"><span style="font-size: 3em; margin-left: -0.13em;" class="MJXp-right MJXp-scale5">)</span></span></span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-70-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-70">c_n(f) = c_0 \cdot \prod_{i=1}^n \left(1 + (1 - f) \cdot \frac{r}{n} + f \cdot r^S_i \right)</script>
</div>
</div>
<div class="paragraph">
<p>One now has to maximize the following quantity to achieve maximum long-term wealth when investing in the stock:</p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-879"><span class="MJXp-mtable" id="MJXp-Span-880"><span><span class="MJXp-mtr" id="MJXp-Span-881" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-882" style="text-align: right;"><span class="MJXp-msubsup" id="MJXp-Span-883"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-884" style="margin-right: 0.05em;">G</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-885" style="vertical-align: -0.4em;">n</span></span><span class="MJXp-mo" id="MJXp-Span-886" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-887">f</span><span class="MJXp-mo" id="MJXp-Span-888" style="margin-left: 0em; margin-right: 0em;">)</span></span><span class="MJXp-mtd" id="MJXp-Span-889" style="padding-left: 0em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-890"></span><span class="MJXp-mo" id="MJXp-Span-891" style="margin-left: 0.333em; margin-right: 0.333em;">=</span></span><span class="MJXp-mtd" id="MJXp-Span-892" style="padding-left: 0.278em; text-align: left;"><span class="MJXp-mrow" id="MJXp-Span-893"><span class="MJXp-mi MJXp-bold" id="MJXp-Span-894">E</span></span><span class="MJXp-mrow" id="MJXp-Span-895"><span class="MJXp-mo" id="MJXp-Span-896" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.689em;"><span style="font-size: 3.756em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">[</span></span><span class="MJXp-mi" id="MJXp-Span-897">log</span><span class="MJXp-mo" id="MJXp-Span-898" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mfrac" id="MJXp-Span-899" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-msubsup" id="MJXp-Span-900"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-901" style="margin-right: 0.05em;">c</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-902" style="vertical-align: -0.4em;">n</span></span><span class="MJXp-mo" id="MJXp-Span-903" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-904">f</span><span class="MJXp-mo" id="MJXp-Span-905" style="margin-left: 0em; margin-right: 0em;">)</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-msubsup" id="MJXp-Span-906"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-907" style="margin-right: 0.05em;">c</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-908" style="vertical-align: -0.4em;">0</span></span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-909" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.689em;"><span style="font-size: 3.756em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">]</span></span></span></span></span><span class="MJXp-mtr" id="MJXp-Span-910" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-911" style="padding-top: 0.3em; text-align: right;"></span><span class="MJXp-mtd" id="MJXp-Span-912" style="padding-left: 0em; padding-top: 0.3em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-913"></span><span class="MJXp-mo" id="MJXp-Span-914" style="margin-left: 0.333em; margin-right: 0.333em;">=</span></span><span class="MJXp-mtd" id="MJXp-Span-915" style="padding-left: 0.278em; padding-top: 0.3em; text-align: left;"><span class="MJXp-mrow" id="MJXp-Span-916"><span class="MJXp-mi MJXp-bold" id="MJXp-Span-917">E</span></span><span class="MJXp-mrow" id="MJXp-Span-918"><span class="MJXp-mo" id="MJXp-Span-919" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.744em;"><span style="font-size: 3.978em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">[</span></span><span class="MJXp-munderover" id="MJXp-Span-920"><span><span class="MJXp-over"><span class=" MJXp-script"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-926" style="margin-right: 0px; margin-left: 0px;">n</span></span><span class=""><span class="MJXp-mo" id="MJXp-Span-921" style="margin-left: 0.111em; margin-right: 0.167em;"><span class="MJXp-largeop">∑</span></span></span></span></span><span class=" MJXp-script"><span class="MJXp-mrow" id="MJXp-Span-922" style="margin-left: 0px;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-923">i</span><span class="MJXp-mo" id="MJXp-Span-924">=</span><span class="MJXp-mn" id="MJXp-Span-925">1</span></span></span></span><span class="MJXp-mi" id="MJXp-Span-927">log</span><span class="MJXp-mo" id="MJXp-Span-928" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mrow" id="MJXp-Span-929"><span class="MJXp-mo" id="MJXp-Span-930" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.5em;"><span style="font-size: 3em; margin-left: -0.13em;" class="MJXp-right MJXp-scale5">(</span></span><span class="MJXp-mn" id="MJXp-Span-931">1</span><span class="MJXp-mo" id="MJXp-Span-932" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mo" id="MJXp-Span-933" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-934">1</span><span class="MJXp-mo" id="MJXp-Span-935" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-936">f</span><span class="MJXp-mo" id="MJXp-Span-937" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-938" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mfrac" id="MJXp-Span-939" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-940">r</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-941">n</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-942" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-943">f</span><span class="MJXp-mo" id="MJXp-Span-944" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-msubsup" id="MJXp-Span-945"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-946" style="margin-right: 0.05em;">r</span><span class="MJXp-script-box" style="height: 1.86em; vertical-align: -0.64em;"><span class=" MJXp-script"><span><span style="margin-bottom: -0.25em;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-948">S</span></span></span></span><span class=" MJXp-script"><span><span style="margin-top: -0.85em;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-947">i</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-949" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.5em;"><span style="font-size: 3em; margin-left: -0.13em;" class="MJXp-right MJXp-scale5">)</span></span></span><span class="MJXp-mo" id="MJXp-Span-950" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.744em;"><span style="font-size: 3.978em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">]</span></span></span></span></span><span class="MJXp-mtr" id="MJXp-Span-951" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-952" style="padding-top: 0.3em; text-align: right;"></span><span class="MJXp-mtd" id="MJXp-Span-953" style="padding-left: 0em; padding-top: 0.3em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-954"></span><span class="MJXp-mo" id="MJXp-Span-955" style="margin-left: 0.333em; margin-right: 0.333em;">=</span></span><span class="MJXp-mtd" id="MJXp-Span-956" style="padding-left: 0.278em; padding-top: 0.3em; text-align: left;"><span class="MJXp-mfrac" id="MJXp-Span-957" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mn" id="MJXp-Span-958">1</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mn" id="MJXp-Span-959">2</span></span></span></span></span></span><span class="MJXp-munderover" id="MJXp-Span-960"><span><span class="MJXp-over"><span class=" MJXp-script"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-966" style="margin-right: 0px; margin-left: 0px;">n</span></span><span class=""><span class="MJXp-mo" id="MJXp-Span-961" style="margin-left: 0.111em; margin-right: 0.167em;"><span class="MJXp-largeop">∑</span></span></span></span></span><span class=" MJXp-script"><span class="MJXp-mrow" id="MJXp-Span-962" style="margin-left: 0px;"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-963">i</span><span class="MJXp-mo" id="MJXp-Span-964">=</span><span class="MJXp-mn" id="MJXp-Span-965">1</span></span></span></span><span class="MJXp-mi" id="MJXp-Span-967">log</span><span class="MJXp-mo" id="MJXp-Span-968" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mrow" id="MJXp-Span-969"><span class="MJXp-mo" id="MJXp-Span-970" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.6em;"><span style="font-size: 3.4em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">(</span></span><span class="MJXp-mn" id="MJXp-Span-971">1</span><span class="MJXp-mo" id="MJXp-Span-972" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mo" id="MJXp-Span-973" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-974">1</span><span class="MJXp-mo" id="MJXp-Span-975" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-976">f</span><span class="MJXp-mo" id="MJXp-Span-977" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-978" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mfrac" id="MJXp-Span-979" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-980">r</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-981">n</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-982" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-983">f</span><span class="MJXp-mo" id="MJXp-Span-984" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mrow" id="MJXp-Span-985"><span class="MJXp-mo" id="MJXp-Span-986" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.6em;"><span style="font-size: 3.4em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">(</span></span><span class="MJXp-mfrac" id="MJXp-Span-987" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-988">μ</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-989">n</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-990" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mfrac" id="MJXp-Span-991" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-992">σ</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-msqrt" id="MJXp-Span-993"><span class="MJXp-surd"><span style="font-size: 134%; margin-top: 0.104em;">√</span></span><span class="MJXp-root"><span class="MJXp-rule" style="border-top: 0.08em solid;"></span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-994">n</span></span></span></span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-995" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.6em;"><span style="font-size: 3.4em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">)</span></span></span><span class="MJXp-mo" id="MJXp-Span-996" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.6em;"><span style="font-size: 3.4em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">)</span></span></span></span></span><span class="MJXp-mtr" id="MJXp-Span-997" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-998" style="padding-top: 0.3em; text-align: right;"></span><span class="MJXp-mtd" id="MJXp-Span-999" style="padding-left: 0em; padding-top: 0.3em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-1000"></span><span class="MJXp-mo" id="MJXp-Span-1001" style="margin-left: 0.267em; margin-right: 0.267em;">+</span></span><span class="MJXp-mtd" id="MJXp-Span-1002" style="padding-left: 0.278em; padding-top: 0.3em; text-align: left;"><span class="MJXp-mi" id="MJXp-Span-1003">log</span><span class="MJXp-mo" id="MJXp-Span-1004" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mrow" id="MJXp-Span-1005"><span class="MJXp-mo" id="MJXp-Span-1006" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.6em;"><span style="font-size: 3.4em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">(</span></span><span class="MJXp-mn" id="MJXp-Span-1007">1</span><span class="MJXp-mo" id="MJXp-Span-1008" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mo" id="MJXp-Span-1009" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-1010">1</span><span class="MJXp-mo" id="MJXp-Span-1011" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1012">f</span><span class="MJXp-mo" id="MJXp-Span-1013" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-1014" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mfrac" id="MJXp-Span-1015" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1016">r</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1017">n</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-1018" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1019">f</span><span class="MJXp-mo" id="MJXp-Span-1020" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mrow" id="MJXp-Span-1021"><span class="MJXp-mo" id="MJXp-Span-1022" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.6em;"><span style="font-size: 3.4em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">(</span></span><span class="MJXp-mfrac" id="MJXp-Span-1023" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1024">μ</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1025">n</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-1026" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mfrac" id="MJXp-Span-1027" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1028">σ</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-msqrt" id="MJXp-Span-1029"><span class="MJXp-surd"><span style="font-size: 134%; margin-top: 0.104em;">√</span></span><span class="MJXp-root"><span class="MJXp-rule" style="border-top: 0.08em solid;"></span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1030">n</span></span></span></span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-1031" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.6em;"><span style="font-size: 3.4em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">)</span></span></span><span class="MJXp-mo" id="MJXp-Span-1032" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.6em;"><span style="font-size: 3.4em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">)</span></span></span></span></span><span class="MJXp-mtr" id="MJXp-Span-1033" style="vertical-align: baseline;"><span class="MJXp-mtd" id="MJXp-Span-1034" style="padding-top: 0.3em; text-align: right;"></span><span class="MJXp-mtd" id="MJXp-Span-1035" style="padding-left: 0em; padding-top: 0.3em; text-align: center;"><span class="MJXp-mi" id="MJXp-Span-1036"></span><span class="MJXp-mo" id="MJXp-Span-1037" style="margin-left: 0.333em; margin-right: 0.333em;">=</span></span><span class="MJXp-mtd" id="MJXp-Span-1038" style="padding-left: 0.278em; padding-top: 0.3em; text-align: left;"><span class="MJXp-mfrac" id="MJXp-Span-1039" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1040">n</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mn" id="MJXp-Span-1041">2</span></span></span></span></span></span><span class="MJXp-mi" id="MJXp-Span-1042">log</span><span class="MJXp-mo" id="MJXp-Span-1043" style="margin-left: 0em; margin-right: 0em;"></span><span class="MJXp-mrow" id="MJXp-Span-1044"><span class="MJXp-mo" id="MJXp-Span-1045" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.678em;"><span style="font-size: 3.711em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">(</span></span><span class="MJXp-msubsup" id="MJXp-Span-1046"><span class="MJXp-mrow" id="MJXp-Span-1047" style="margin-right: 0.05em;"><span class="MJXp-mo" id="MJXp-Span-1048" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.5em;"><span style="font-size: 3em; margin-left: -0.13em;" class="MJXp-right MJXp-scale5">(</span></span><span class="MJXp-mn" id="MJXp-Span-1049">1</span><span class="MJXp-mo" id="MJXp-Span-1050" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mo" id="MJXp-Span-1051" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mn" id="MJXp-Span-1052">1</span><span class="MJXp-mo" id="MJXp-Span-1053" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1054">f</span><span class="MJXp-mo" id="MJXp-Span-1055" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-1056" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mfrac" id="MJXp-Span-1057" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1058">r</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1059">n</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-1060" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1061">f</span><span class="MJXp-mo" id="MJXp-Span-1062" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mfrac" id="MJXp-Span-1063" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1064">μ</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1065">n</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-1066" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.5em;"><span style="font-size: 3em; margin-left: -0.13em;" class="MJXp-right MJXp-scale5">)</span></span></span><span class="MJXp-mn MJXp-script" id="MJXp-Span-1067" style="vertical-align: 1.2em;">2</span></span><span class="MJXp-mo" id="MJXp-Span-1068" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mfrac" id="MJXp-Span-1069" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-msubsup" id="MJXp-Span-1070"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1071" style="margin-right: 0.05em;">f</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-1072" style="vertical-align: 0.5em;">2</span></span><span class="MJXp-msubsup" id="MJXp-Span-1073"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1074" style="margin-right: 0.05em;">σ</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-1075" style="vertical-align: 0.5em;">2</span></span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1076">n</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-1077" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.678em;"><span style="font-size: 3.711em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">)</span></span></span></span></span></span></span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-71-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-71">\begin{eqnarray}
G_n(f) &=& \mathbf{E}\left[ \log \frac{c_n(f)}{c_0} \right] \\
    &=& \mathbf{E}\left[ \sum_{i=1}^n \log \left(1 + (1 - f) \cdot \frac{r}{n} + f \cdot r^S_i \right) \right] \\
    &=& \frac{1}{2} \sum_{i=1}^n \log \left(1 + (1 - f) \cdot \frac{r}{n} + f \cdot \left( \frac{\mu}{n} + \frac{\sigma}{\sqrt{n}} \right) \right) \\
    &+& \log \left(1 + (1 - f) \cdot \frac{r}{n} + f \cdot \left( \frac{\mu}{n} - \frac{\sigma}{\sqrt{n}} \right) \right) \\
    &=& \frac{n}{2} \log \left( \left(1 + (1 - f) \cdot \frac{r}{n} + f \cdot \frac{\mu}{n} \right)^2 - \frac{f^2 \sigma^2}{n} \right)
\end{eqnarray}</script>
</div>
</div>
<div class="paragraph">
<p>Using a Taylor series expansion, one finally arrives at</p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-1078"><span class="MJXp-msubsup" id="MJXp-Span-1079"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1080" style="margin-right: 0.05em;">G</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-1081" style="vertical-align: -0.4em;">n</span></span><span class="MJXp-mo" id="MJXp-Span-1082" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1083">f</span><span class="MJXp-mo" id="MJXp-Span-1084" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-1085" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1086">r</span><span class="MJXp-mo" id="MJXp-Span-1087" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mo" id="MJXp-Span-1088" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1089">μ</span><span class="MJXp-mo" id="MJXp-Span-1090" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1091">r</span><span class="MJXp-mo" id="MJXp-Span-1092" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-1093" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1094">f</span><span class="MJXp-mo" id="MJXp-Span-1095" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mfrac" id="MJXp-Span-1096" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-msubsup" id="MJXp-Span-1097"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1098" style="margin-right: 0.05em;">σ</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-1099" style="vertical-align: 0.5em;">2</span></span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mn" id="MJXp-Span-1100">2</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-1101" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-msubsup" id="MJXp-Span-1102"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1103" style="margin-right: 0.05em;">f</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-1104" style="vertical-align: 0.5em;">2</span></span><span class="MJXp-mo" id="MJXp-Span-1105" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mrow" id="MJXp-Span-1106"><span class="MJXp-mi MJXp-cal" id="MJXp-Span-1107">O</span></span><span class="MJXp-mrow" id="MJXp-Span-1108"><span class="MJXp-mo" id="MJXp-Span-1109" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.6em;"><span style="font-size: 3.4em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">(</span></span><span class="MJXp-mfrac" id="MJXp-Span-1110" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mn" id="MJXp-Span-1111">1</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-msqrt" id="MJXp-Span-1112"><span class="MJXp-surd"><span style="font-size: 134%; margin-top: 0.104em;">√</span></span><span class="MJXp-root"><span class="MJXp-rule" style="border-top: 0.08em solid;"></span><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1113">n</span></span></span></span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-1114" style="margin-left: 0em; margin-right: 0em; vertical-align: -0.6em;"><span style="font-size: 3.4em; margin-left: -0.17em;" class="MJXp-right MJXp-scale4">)</span></span></span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-72-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-72">G_n(f) = r + (\mu - r) \cdot f - \frac{\sigma^2}{2} \cdot f^2 + \mathcal{O} \left(\frac{1}{\sqrt{n}} \right)</script>
</div>
</div>
<div class="paragraph">
<p>or for infinitely many trading points in time, i.e. for continuous trading, at</p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-1115"><span class="MJXp-msubsup" id="MJXp-Span-1116"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1117" style="margin-right: 0.05em;">G</span><span class="MJXp-mi MJXp-script" id="MJXp-Span-1118" style="vertical-align: -0.4em;">∞</span></span><span class="MJXp-mo" id="MJXp-Span-1119" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1120">f</span><span class="MJXp-mo" id="MJXp-Span-1121" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-1122" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1123">r</span><span class="MJXp-mo" id="MJXp-Span-1124" style="margin-left: 0.267em; margin-right: 0.267em;">+</span><span class="MJXp-mo" id="MJXp-Span-1125" style="margin-left: 0em; margin-right: 0em;">(</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1126">μ</span><span class="MJXp-mo" id="MJXp-Span-1127" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1128">r</span><span class="MJXp-mo" id="MJXp-Span-1129" style="margin-left: 0em; margin-right: 0em;">)</span><span class="MJXp-mo" id="MJXp-Span-1130" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1131">f</span><span class="MJXp-mo" id="MJXp-Span-1132" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mfrac" id="MJXp-Span-1133" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-msubsup" id="MJXp-Span-1134"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1135" style="margin-right: 0.05em;">σ</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-1136" style="vertical-align: 0.5em;">2</span></span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-mn" id="MJXp-Span-1137">2</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-1138" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-msubsup" id="MJXp-Span-1139"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1140" style="margin-right: 0.05em;">f</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-1141" style="vertical-align: 0.5em;">2</span></span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-73-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-73">G_\infty(f) = r + (\mu - r) \cdot f - \frac{\sigma^2}{2} \cdot f^2</script>
</div>
</div>
<div class="paragraph">
<p>The optimal fraction <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-1142"><span class="MJXp-msubsup" id="MJXp-Span-1143"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1144" style="margin-right: 0.05em;">f</span><span class="MJXp-mo MJXp-script" id="MJXp-Span-1145" style="vertical-align: 0.5em;">∗</span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-74-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-74">f^*</script> then is given through the first order condition by the expression (which looks similar to the Sharpe ratio)</p>
</div>
<div class="stemblock">
<div class="content">
<span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math MJXp-display" id="MJXp-Span-1146"><span class="MJXp-msubsup" id="MJXp-Span-1147"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1148" style="margin-right: 0.05em;">f</span><span class="MJXp-mo MJXp-script" id="MJXp-Span-1149" style="vertical-align: 0.5em;">∗</span></span><span class="MJXp-mo" id="MJXp-Span-1150" style="margin-left: 0.333em; margin-right: 0.333em;">=</span><span class="MJXp-mfrac" id="MJXp-Span-1151" style="vertical-align: 0.25em;"><span class="MJXp-box"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1152">μ</span><span class="MJXp-mo" id="MJXp-Span-1153" style="margin-left: 0.267em; margin-right: 0.267em;">−</span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1154">r</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box"><span class="MJXp-msubsup" id="MJXp-Span-1155"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1156" style="margin-right: 0.05em;">σ</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-1157" style="vertical-align: 0.5em;">2</span></span></span></span></span></span></span></span></span><div class="MathJax_Display MathJax_Processing"><span class="MathJax" id="MathJax-Element-75-Frame" tabindex="0"></span></div><script type="math/tex; mode=display" id="MathJax-Element-75">f^* = \frac{\mu - r}{\sigma^2}</script>
</div>
</div>
<div class="paragraph">
<p>i.e. the expected excess return of the stock over the risk-free rate divided by the variance of the returns.</p>
</div>
</div>
<div class="sect3">
<h4 id="_applying_the_kelly_criterion_to_the_s_p_500_index">11.2.3. Applying the Kelly Criterion to the S&amp;P 500 Index</h4>
<div class="paragraph">
<p>A real world example shall illustrate the application of the above 
formula and their role in leveraging equity deployed to trading 
strategies. The trading strategy under consideration is simply a <em>long position in the S&amp;P 500 index</em>. To this end, base data is quickly retrieved and required statistics are easily derived.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

In [<span class="integer">2</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd

In [<span class="integer">3</span>]: h5 = pd.HDFStore(<span class="string"><span class="delimiter">'</span><span class="content">../data/equities.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>)

In [<span class="integer">4</span>]: data = pd.DataFrame(h5[<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>])  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">5</span>]: data = data[(data.index &gt; <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>) &amp; (data.index &lt;= <span class="string"><span class="delimiter">'</span><span class="content">2017-1-24</span><span class="delimiter">'</span></span>)]  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">6</span>]: data.columns = [<span class="string"><span class="delimiter">'</span><span class="content">prices</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">7</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(data / data.shift(<span class="integer">1</span>))  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">8</span>]: data.fillna(<span class="integer">0</span>, inplace=<span class="predefined-constant">True</span>)  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">9</span>]: mu = data.returns.mean() * <span class="integer">252</span>  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">10</span>]: mu
Out[<span class="integer">10</span>]: <span class="float">0.099175688693563899</span>

In [<span class="integer">11</span>]: sigma = data.returns.std() * <span class="integer">252</span> ** <span class="float">0.5</span>  <i class="conum" data-value="7"></i><b>(7)</b>

In [<span class="integer">12</span>]: sigma
Out[<span class="integer">12</span>]: <span class="float">0.15497630801339229</span>

In [<span class="integer">13</span>]: r = <span class="float">0.0</span>  <i class="conum" data-value="8"></i><b>(8)</b>

In [<span class="integer">14</span>]: f = (mu - r) / sigma ** <span class="integer">2</span>  <i class="conum" data-value="9"></i><b>(9)</b>

In [<span class="integer">15</span>]: f
Out[<span class="integer">15</span>]: <span class="float">4.1292825788594483</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Reads data from the database file.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Picks out the data sub-set for the S&amp;P 500 index.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Renames the single column of the <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Calculates and stores the log returns.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Fills <code>NaN</code> values with 0.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Calculates the annualized return.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Calculates the annualized volatility.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Sets the risk-free rate to 0 (for simplicity).</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>Calculates the optimal Kelly fraction to be invested in the strategy.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The statistical properties of the S&amp;P 500 index over the period 
covered suggest an optimal fraction of about 4.13 to be invested in the 
long position in the index. In other words, for every dollar available 
4.13 dollars shall be invested — implying a <em>leverage ratio</em> of 
4.13 in accordance with the optimal Kelly fraction or rather factor in 
this case. Ceteris paribus, the Kelly criterion implies a higher 
leverage the higher the expected return and the lower the volatility 
(variance).</p>
</div>
<div class="paragraph">
<p>The code below simulates the application of the Kelly criterion and 
the optimal leverage ratio. For simplicity and comparison reasons, the 
initial equity is set to 1 while the initially invested total capital is
 set to <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-1158"><span class="MJXp-mn" id="MJXp-Span-1159">1</span><span class="MJXp-mo" id="MJXp-Span-1160" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-msubsup" id="MJXp-Span-1161"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1162" style="margin-right: 0.05em;">f</span><span class="MJXp-mo MJXp-script" id="MJXp-Span-1163" style="vertical-align: 0.5em;">∗</span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-76-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-76">1 \cdot f^*</script>.
 Depending on the performance of the total capital deployed to the 
strategy, the total capital itself is adjusted daily according to the 
available equity. After a loss, the capital is reduced, after a profit, 
the capital is increased. The evolution of the equity position compared 
to the index itself is shown in <a href="#kelly_03">Cumulative performance of S&amp;P 500 compared to equity position given Kelly leverage</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">16</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">equity</span><span class="delimiter">'</span></span>] = <span class="integer">1</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">17</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">capital</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">equity</span><span class="delimiter">'</span></span>] * f  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">18</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">1</span>, <span class="predefined">len</span>(data)):
             data.ix[i, <span class="string"><span class="delimiter">'</span><span class="content">capital</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">capital</span><span class="delimiter">'</span></span>].ix[i - <span class="integer">1</span>] * \
                                     exp(data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].ix[i])  <i class="conum" data-value="3"></i><b>(3)</b>
             data.ix[i, <span class="string"><span class="delimiter">'</span><span class="content">equity</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">capital</span><span class="delimiter">'</span></span>].ix[i] - \
                                    data[<span class="string"><span class="delimiter">'</span><span class="content">capital</span><span class="delimiter">'</span></span>].ix[i - <span class="integer">1</span>] + \
                                    data[<span class="string"><span class="delimiter">'</span><span class="content">equity</span><span class="delimiter">'</span></span>].ix[i - <span class="integer">1</span>]  <i class="conum" data-value="4"></i><b>(4)</b>
             data.ix[i, <span class="string"><span class="delimiter">'</span><span class="content">capital</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">equity</span><span class="delimiter">'</span></span>].ix[i] * f  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">19</span>]: data.head()  <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">19</span>]:
            prices      returns     equity      capital
Date
<span class="integer">2010</span>-<span class="octal">01</span>-<span class="octal">04</span>  <span class="float">1132.989990</span> <span class="float">0.000000</span>    <span class="float">1.000000</span>    <span class="float">4.129283</span>
<span class="integer">2010</span>-<span class="octal">01</span>-<span class="octal">05</span>  <span class="float">1136.520020</span> <span class="float">0.003111</span>    <span class="float">1.012866</span>    <span class="float">4.182408</span>
<span class="integer">2010</span>-<span class="octal">01</span>-<span class="octal">06</span>  <span class="float">1137.140015</span> <span class="float">0.000545</span>    <span class="float">1.015147</span>    <span class="float">4.191829</span>
<span class="integer">2010</span>-<span class="octal">01</span>-<span class="octal">07</span>  <span class="float">1141.689941</span> <span class="float">0.003993</span>    <span class="float">1.031919</span>    <span class="float">4.261087</span>
<span class="integer">2010</span>-<span class="octal">01</span>-<span class="integer">08</span>  <span class="float">1144.979980</span> <span class="float">0.002878</span>    <span class="float">1.044199</span>    <span class="float">4.311792</span>

In [<span class="integer">20</span>]: ax = data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].cumsum().apply(np.exp).plot(legend=<span class="predefined-constant">True</span>)  <i class="conum" data-value="7"></i><b>(7)</b>
         data[<span class="string"><span class="delimiter">'</span><span class="content">equity</span><span class="delimiter">'</span></span>].plot(ax=ax, legend=<span class="predefined-constant">True</span>)  <i class="conum" data-value="8"></i><b>(8)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Generates a new column for <code>equity</code> and sets the initial value to 1.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Generates a new column for <code>capital</code> and sets the initial value to <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-1164"><span class="MJXp-mn" id="MJXp-Span-1165">1</span><span class="MJXp-mo" id="MJXp-Span-1166" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-msubsup" id="MJXp-Span-1167"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1168" style="margin-right: 0.05em;">f</span><span class="MJXp-mo MJXp-script" id="MJXp-Span-1169" style="vertical-align: 0.5em;">∗</span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-77-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-77">1 \cdot f^*</script>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Calculates the new capital position given the return.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Adjusts the equity value according to the capital position performance.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Adjusts the capital position given the new equity position and the fixed leverage ratio.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Shows the first five rows of the resulting data set.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Plots the cumulative geometric growth of the base instrument.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Plots the equity position over time given the leveraged investment.</td>
</tr>
</tbody></table>
</div>
<div id="kelly_03" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/kelly_03.png" alt="kelly 03">
</div>
<div class="title">Figure 78. Cumulative performance of S&amp;P 500 compared to equity position given Kelly leverage</div>
</div>
<div class="paragraph">
<p>As <a href="#kelly_03">Cumulative performance of S&amp;P 500 compared to equity position given Kelly leverage</a>
 illustrates, applying the optimal Kelly leverage leads to a rather 
erratic evolution (high volatility) of the equity position which 
is — given the leverage ratio of 4.13 — intuitively understandable. One 
would expect the volatility of the equity position to increase with 
increasing leverage. Therefore, practitioners often reduce the leverage 
to, for example, “half Kelly” — in the current example to <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-1170"><span class="MJXp-mfrac" id="MJXp-Span-1171" style="vertical-align: 0.25em;"><span class="MJXp-box MJXp-script"><span class="MJXp-mn" id="MJXp-Span-1172">1</span></span><span class="MJXp-box" style="margin-top: -0.9em;"><span class="MJXp-denom"><span><span class="MJXp-rule" style="height: 1em; border-top: medium none; border-bottom: 1px solid; margin: 0.1em 0px;"></span></span><span><span class="MJXp-box MJXp-script"><span class="MJXp-mn" id="MJXp-Span-1173">2</span></span></span></span></span></span><span class="MJXp-mo" id="MJXp-Span-1174" style="margin-left: 0.267em; margin-right: 0.267em;">⋅</span><span class="MJXp-msubsup" id="MJXp-Span-1175"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1176" style="margin-right: 0.05em;">f</span><span class="MJXp-mo MJXp-script" id="MJXp-Span-1177" style="vertical-align: 0.5em;">∗</span></span><span class="MJXp-mo" id="MJXp-Span-1178" style="margin-left: 0.333em; margin-right: 0.333em;">≈</span><span class="MJXp-mn" id="MJXp-Span-1179">2.065</span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-78-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-78">\frac{1}{2} \cdot f^* \approx 2.065</script>. <a href="#kelly_04">Cumulative performance of S&amp;P 500 compared to equity position given half Kelly leverage</a>
 shows how the equity position evolves over time given this reduced 
leverage ratio. The final outperformance is not as good as will “full 
Kelly” but the risk seems to be significantly reduced.</p>
</div>
<div id="kelly_04" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/kelly_04.png" alt="kelly 04">
</div>
<div class="title">Figure 79. Cumulative performance of S&amp;P 500 compared to equity position given half Kelly leverage</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_risk_analysis_and_management">11.3. Risk Analysis and Management</h3>
<div class="paragraph">
<p>This section addresses several important topics in risk analysis and 
management. The first is the selection of the strategy itself. The 
second is the leverage that should be applied. Third, the resulting risk
 characteristics given the leverage. Fourth, Value-at-Risk measures. 
Fifth, tail risk. Sixth, exit triggers. Finally, potential hedging 
strategies. The discussion in this chapter centers around a SMA-based 
strategy for the CFD of Oanda based on the S&amp;P 500 index.</p>
</div>
<div class="sect3">
<h4 id="_strategy_characteristics">11.3.1. Strategy Characteristics</h4>
<div class="paragraph">
<p>One of the major factors that influence risk-return in trading is the
 selection of the algorithmic trading strategy itself. This can 
therefore be considered the most important risk management task and 
respective considerations should early influence the analytics and 
decision tasks. Assume that we want to trade the <code>DE30_EUR</code> instrument from Oanda based on simple moving averages (for the details of CFD trading with Oanda see <a href="#trading_oanda">CFD Trading with Oanda</a>).</p>
</div>
<div class="paragraph">
<p>The first task is the backtesting of the SMA-based strategy which 
shall be based on bars of length 10 seconds. The parameters for the SMAs
 shall be 5 and 10, respectively, which translate into 50 and 100 
seconds given the length of the bars. The strategy shall be implemented 
as a <em>long-short strategy</em> — which of course also influences risk-return characteristics compared to a long-only strategy, for instance.</p>
</div>
<div class="paragraph">
<p>The following code retrieves intraday data from Oanda for 01. 
February 2017 and implements the backtesting. The example intentionally 
uses data for one day only to keep the exposition and analysis simple 
and focused. In practice, you would of course do the backtesting on much
 larger data sets, for a multitude of different parameter combinations, 
etc. The exposition here highlights the aspects relevant for automation 
and risk management. First, the preparations and the data retrieval.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">configparser</span>

In [<span class="integer">2</span>]: config = configparser.ConfigParser()

In [<span class="integer">3</span>]: config.read(<span class="string"><span class="delimiter">'</span><span class="content">../pyalgo.cfg</span><span class="delimiter">'</span></span>)

In [<span class="integer">4</span>]: <span class="keyword">import</span> <span class="include">v20</span>

In [<span class="integer">5</span>]: ctx = v20.Context(
            <span class="string"><span class="delimiter">'</span><span class="content">api-fxpractice.oanda.com</span><span class="delimiter">'</span></span>,
            <span class="integer">443</span>,
            <span class="predefined-constant">True</span>,
            application=<span class="string"><span class="delimiter">'</span><span class="content">sample_code</span><span class="delimiter">'</span></span>,
            token=config[<span class="string"><span class="delimiter">'</span><span class="content">oanda_v20</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">access_token</span><span class="delimiter">'</span></span>],
            datetime_format=<span class="string"><span class="delimiter">'</span><span class="content">RFC3339</span><span class="delimiter">'</span></span>)

In [<span class="integer">6</span>]: suffix = <span class="string"><span class="delimiter">'</span><span class="content">.000000000Z</span><span class="delimiter">'</span></span>

In [<span class="integer">7</span>]: fromTime = dt.datetime(<span class="integer">2017</span>, <span class="integer">2</span>, <span class="integer">1</span>, <span class="integer">8</span>, <span class="integer">0</span>, <span class="integer">0</span>).isoformat(<span class="string"><span class="delimiter">'</span><span class="content">T</span><span class="delimiter">'</span></span>) + suffix

In [<span class="integer">8</span>]: toTime = dt.datetime(<span class="integer">2017</span>, <span class="integer">2</span>, <span class="integer">1</span>, <span class="integer">21</span>, <span class="integer">0</span>, <span class="integer">0</span>).isoformat(<span class="string"><span class="delimiter">'</span><span class="content">T</span><span class="delimiter">'</span></span>) + suffix

In [<span class="integer">9</span>]: %%time
        res = ctx.instrument.candles(instrument=<span class="string"><span class="delimiter">'</span><span class="content">DE30_EUR</span><span class="delimiter">'</span></span>,
                                     fromTime=fromTime,
                                     toTime=toTime,
                                     granularity=<span class="string"><span class="delimiter">'</span><span class="content">S10</span><span class="delimiter">'</span></span>,
                                     price=<span class="string"><span class="delimiter">'</span><span class="content">A</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>
CPU times: user <span class="integer">157</span> ms, sys: <span class="float">23.7</span> ms, total: <span class="integer">180</span> ms
Wall time: <span class="float">3.32</span> s

In [<span class="integer">10</span>]: raw = res.get(<span class="string"><span class="delimiter">'</span><span class="content">candles</span><span class="delimiter">'</span></span>)

In [<span class="integer">11</span>]: raw = [cs.dict() <span class="keyword">for</span> cs <span class="keyword">in</span> raw]

In [<span class="integer">12</span>]: <span class="keyword">for</span> cs <span class="keyword">in</span> raw:
             cs.update(cs[<span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>])
             <span class="keyword">del</span> cs[<span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>]
In [<span class="integer">13</span>]: raw[<span class="integer">0</span>]
Out[<span class="integer">13</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">11634.3</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">complete</span><span class="delimiter">'</span></span>: <span class="predefined-constant">True</span>,
          <span class="string"><span class="delimiter">'</span><span class="content">h</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">11641.6</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">l</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">11634.3</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">o</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">11641.0</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">1485936000.000000000</span><span class="delimiter">'</span></span>,
          <span class="string"><span class="delimiter">'</span><span class="content">volume</span><span class="delimiter">'</span></span>: <span class="integer">177</span>}

In [<span class="integer">14</span>]: data = pd.DataFrame(raw)

In [<span class="integer">15</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>]= pd.to_datetime(data[<span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>], unit=<span class="string"><span class="delimiter">'</span><span class="content">s</span><span class="delimiter">'</span></span>)

In [<span class="integer">16</span>]: data = data.set_index(<span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>)

In [<span class="integer">17</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">l</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">h</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">o</span><span class="delimiter">'</span></span>]] = data[
                [<span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">l</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">h</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">o</span><span class="delimiter">'</span></span>]].astype(<span class="string"><span class="delimiter">'</span><span class="content">float64</span><span class="delimiter">'</span></span>)

In [<span class="integer">18</span>]: data.info()  <i class="conum" data-value="2"></i><b>(2)</b>
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">4406</span> entries, <span class="integer">2017</span>-<span class="octal">02</span>-<span class="octal">01</span> <span class="integer">08</span>:<span class="octal">00</span>:<span class="octal">00</span> to <span class="integer">2017</span>-<span class="octal">02</span>-<span class="octal">01</span> <span class="integer">20</span>:<span class="integer">59</span>:<span class="octal">00</span>
Data columns (total <span class="integer">6</span> columns):
c           <span class="integer">4406</span> non-null float64
complete    <span class="integer">4406</span> non-null <span class="predefined">bool</span>
h           <span class="integer">4406</span> non-null float64
l           <span class="integer">4406</span> non-null float64
o           <span class="integer">4406</span> non-null float64
volume      <span class="integer">4406</span> non-null int64
dtypes: <span class="predefined">bool</span>(<span class="integer">1</span>), float64(<span class="integer">4</span>), int64(<span class="integer">1</span>)
memory usage: <span class="float">210.8</span> KB

In [<span class="integer">19</span>]: data.tail()  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">19</span>]:
                    c       complete    h       l       o       volume
time
<span class="integer">2017</span>-<span class="octal">02</span>-<span class="octal">01</span> <span class="integer">20</span>:<span class="integer">58</span>:<span class="integer">20</span> <span class="float">11663.0</span> <span class="predefined-constant">True</span>        <span class="float">11663.5</span> <span class="float">11662.5</span> <span class="float">11663.5</span> <span class="integer">6</span>
<span class="integer">2017</span>-<span class="octal">02</span>-<span class="octal">01</span> <span class="integer">20</span>:<span class="integer">58</span>:<span class="integer">30</span> <span class="float">11662.5</span> <span class="predefined-constant">True</span>        <span class="float">11663.0</span> <span class="float">11662.5</span> <span class="float">11663.0</span> <span class="integer">3</span>
<span class="integer">2017</span>-<span class="octal">02</span>-<span class="octal">01</span> <span class="integer">20</span>:<span class="integer">58</span>:<span class="integer">40</span> <span class="float">11663.5</span> <span class="predefined-constant">True</span>        <span class="float">11663.5</span> <span class="float">11662.7</span> <span class="float">11662.7</span> <span class="integer">5</span>
<span class="integer">2017</span>-<span class="octal">02</span>-<span class="octal">01</span> <span class="integer">20</span>:<span class="integer">58</span>:<span class="integer">50</span> <span class="float">11662.5</span> <span class="predefined-constant">True</span>        <span class="float">11664.0</span> <span class="float">11662.5</span> <span class="float">11663.7</span> <span class="integer">14</span>
<span class="integer">2017</span>-<span class="octal">02</span>-<span class="octal">01</span> <span class="integer">20</span>:<span class="integer">59</span>:<span class="octal">00</span> <span class="float">11662.5</span> <span class="predefined-constant">True</span>        <span class="float">11662.5</span> <span class="float">11662.5</span> <span class="float">11662.5</span> <span class="integer">1</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Retrieves the intraday data from the Oanda API.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The <code>DataFrame</code> object with all the data rows as retrieved.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Final few lines of the data set.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The second step then is to enrich the data and to implement the 
backtesting based on the enriched data. The (un-leveraged) performance 
results are shown in <a href="#strategy_01">Cumulative performance of <code>DE30_EUR</code> CFD compared to SMA-based strategy</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">20</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

In [<span class="integer">21</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(data[<span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>] / data[<span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>))  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">22</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>].rolling(<span class="integer">5</span>).mean()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">23</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>].rolling(<span class="integer">10</span>).mean()  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">24</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.where(data[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] &gt; data[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>], <span class="integer">1</span>, -<span class="integer">1</span>)  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">25</span>]: data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] = data[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>) * data[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">26</span>]: data.dropna(inplace=<span class="predefined-constant">True</span>)  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">27</span>]: data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].cumsum(
                                    ).apply(np.exp).plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the mid prices between bid and ask.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates the log returns based on mid prices.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Calculates the two SMA time series.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Derives the positionings based on the SMA-based strategy.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Derives the strategy performance based on the positionings.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Drops rows with <code>NaN</code> values.</td>
</tr>
</tbody></table>
</div>
<div id="strategy_01" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/strategy_01.png" alt="strategy 01">
</div>
<div class="title">Figure 80. Cumulative performance of <code>DE30_EUR</code> CFD compared to SMA-based strategy</div>
</div>
<div class="paragraph">
<p>Let us calculate certain base statistics, like <em>annualized mean return</em> and <em>annualized variance and volatility</em>. Based on these statistics, the optimal (half) <em>Kelly leverage</em> is easily derived.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">28</span>]: mean = data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].mean() * <span class="integer">6</span> * <span class="integer">60</span> * <span class="integer">24</span> * <span class="integer">252</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">29</span>]: mean  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">29</span>]: returns     <span class="float">0.964751</span>
         strategy    <span class="float">4.075758</span>
         dtype: float64

In [<span class="integer">30</span>]: var = data[[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]].var() * <span class="integer">6</span> * <span class="integer">60</span> * <span class="integer">24</span> * <span class="integer">252</span>  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">31</span>]: var  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">31</span>]: returns     <span class="float">0.020297</span>
         strategy    <span class="float">0.020290</span>
         dtype: float64

In [<span class="integer">32</span>]: var ** <span class="float">0.5</span>  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">32</span>]: returns      <span class="float">47.530573</span>
         strategy    <span class="float">200.872525</span>
         dtype: float64

In [<span class="integer">33</span>]: mean / var  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">33</span>]: returns      <span class="float">47.530573</span>
         strategy    <span class="float">200.872525</span>
         dtype: float64

In [<span class="integer">34</span>]: mean / var * <span class="float">0.5</span>  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">34</span>]: returns      <span class="float">23.765287</span>
         strategy    <span class="float">100.436263</span>
         dtype: float64</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the annualized mean return.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates the annualized variance.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Calculates the annualized volatility.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Calculates the optimal Kelly leverage.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Calculates the optimal half Kelly leverage.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_leverage">11.3.2. Leverage</h4>
<div class="paragraph">
<p>The optimal half Kelly leverage is about 100 in this example which is
 really high. Such a leverage ratio is possible on Oanda (for accounts 
in Europe, for instance). What does such a leverage ratio imply for the 
performance over the backtesting period? The code below does the 
calculations without adjusting the position size. <a href="#strategy_02">Cumulative performance of <code>DE30_EUR</code> CFD compared to leveraged SMA-based strategy</a>
 shows the impact of leverage clearly: the higher the leverage the lower
 the lows and the higher the highs (among others). The leverage in many 
cases is the most important risk influencing strategy parameter — it 
allows, for example, to create a high-risk-and-reward strategy out of a 
low-risk-and-reward strategy.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">35</span>]: to_plot = [<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">36</span>]: <span class="keyword">for</span> l <span class="keyword">in</span> [<span class="integer">10</span>, <span class="integer">20</span>, <span class="integer">30</span>, <span class="integer">40</span>, <span class="integer">50</span>, <span class="integer">100</span>]:  <i class="conum" data-value="2"></i><b>(2)</b>
             label = <span class="string"><span class="delimiter">'</span><span class="content">lstrategy_%d</span><span class="delimiter">'</span></span> % l  <i class="conum" data-value="3"></i><b>(3)</b>
             data[label] = data[<span class="string"><span class="delimiter">'</span><span class="content">strategy</span><span class="delimiter">'</span></span>] * l  <i class="conum" data-value="4"></i><b>(4)</b>
             to_plot.append(label)  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">37</span>]: data[to_plot].cumsum().apply(np.exp).plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="6"></i><b>(6)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Creates a <code>list</code> object for the columns to be plotted.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Iterates over different leverage ratios.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Customizes a label string.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Creates a new column for each leverage ratio.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Appends the label string to the <code>list</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Plots all relevant columns in a single plot.</td>
</tr>
</tbody></table>
</div>
<div id="strategy_02" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/strategy_02.png" alt="strategy 02">
</div>
<div class="title">Figure 81. Cumulative performance of <code>DE30_EUR</code> CFD compared to leveraged SMA-based strategy</div>
</div>
<div class="paragraph">
<p>Given the data available, we can inspect the distribution between 
long and short positions as well as the number of changes in the 
position, i.e. the number of trades.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">38</span>]: data.position.value_counts()  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">38</span>]:   <span class="integer">1</span>    <span class="integer">2217</span>
          -<span class="integer">1</span>    <span class="integer">2180</span>
          Name: position, dtype: int64

In [<span class="integer">39</span>]: <span class="predefined">sum</span>(<span class="predefined">abs</span>(data.position.diff()) &gt; <span class="float">1.5</span>)  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">39</span>]: <span class="integer">471</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Counts long and short positions over all intervals.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Counts the number of trades (i.e. changes from +1 to -1 and -1 to +1).</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_resulting_risk_statistics">11.3.3. Resulting Risk Statistics</h4>
<div class="paragraph">
<p>Once the leverage ratio is fixed, say to 30, the resulting risk 
statistics for the leveraged trading strategy can be calculated. Assume 
that the equity to be allocated to the strategy is 5,000 EUR. The 
initial, leveraged position size then is 150,000 EUR.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">40</span>]: risk = pd.DataFrame(data[<span class="string"><span class="delimiter">'</span><span class="content">lstrategy_30</span><span class="delimiter">'</span></span>])  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">41</span>]: risk[<span class="string"><span class="delimiter">'</span><span class="content">equity</span><span class="delimiter">'</span></span>] = risk[<span class="string"><span class="delimiter">'</span><span class="content">lstrategy_30</span><span class="delimiter">'</span></span>].cumsum().apply(np.exp) * <span class="integer">5000</span>  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">42</span>]: risk[[<span class="string"><span class="delimiter">'</span><span class="content">equity</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">cummax</span><span class="delimiter">'</span></span>]].plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="3"></i><b>(3)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Creates a new <code>DataFrame</code> object for risk analysis.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates the equity position values over time given the leverage ratio.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Plots the evolution of the equity position and the running maximum over time.</td>
</tr>
</tbody></table>
</div>
<div id="strategy_03" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/strategy_03.png" alt="strategy 03">
</div>
<div class="title">Figure 82. Evolution of equity and running maximum over time given a leverage of 30</div>
</div>
<div class="paragraph">
<p>Next, the calculation of the maximum drawdown and the longest drawdown period.<sup class="footnote">[<a id="_footnoteref_36" class="footnote" href="#_footnote_36" title="View footnote.">36</a>]</sup>
 The maximum drawdown is in the range of 10% which is quite high for a 
one day period — and probably nothing that the majority of traders would
 like to accept.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">43</span>]: risk[<span class="string"><span class="delimiter">'</span><span class="content">drawdown</span><span class="delimiter">'</span></span>] = risk[<span class="string"><span class="delimiter">'</span><span class="content">cummax</span><span class="delimiter">'</span></span>] - risk[<span class="string"><span class="delimiter">'</span><span class="content">equity</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">44</span>]: risk[<span class="string"><span class="delimiter">'</span><span class="content">drawdown</span><span class="delimiter">'</span></span>].max()  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">44</span>]: <span class="float">733.96518291511529</span>

In [<span class="integer">45</span>]: temp = risk[<span class="string"><span class="delimiter">'</span><span class="content">drawdown</span><span class="delimiter">'</span></span>][risk[<span class="string"><span class="delimiter">'</span><span class="content">drawdown</span><span class="delimiter">'</span></span>] == <span class="integer">0</span>]  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">46</span>]: periods = (temp.index[<span class="integer">1</span>:].to_pydatetime() -
                    temp.index[:-<span class="integer">1</span>].to_pydatetime())  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">47</span>]: periods.max()  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">47</span>]: datetime.timedelta(<span class="integer">0</span>, <span class="integer">19230</span>)

In [<span class="integer">48</span>]: t.seconds / <span class="integer">60</span> / <span class="integer">60</span>  <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">48</span>]: <span class="float">5.341666666666667</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the absolute drawdown over time.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Identifies the maximum drawdown value.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Identifies all those points in time where there is a new running maximum in the equity value.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Calculates the <code>timedelta</code> values for all those points.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Identifies the longest period between two such points (in seconds).</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Transforms the seconds to hours.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_value_at_risk">11.3.4. Value-at-Risk</h4>
<div class="paragraph">
<p>The base data set is not too large, but it can nevertheless serve to illustrate the calculation of Value-at-Risk (VaR) measures.<sup class="footnote">[<a id="_footnoteref_37" class="footnote" href="#_footnote_37" title="View footnote.">37</a>]</sup>
 The code below calculates the VaR values in EUR for the single day 
under consideration — and for multiple confidence levels. For example, 
at a confidence level of 99% the VaR is 153.70 EUR. In other words, 
there is a 1% chance that an equity position of 5,000 EUR loses more 
that 153.70 EUR during a (here, “the”) trading day.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">49</span>]: <span class="keyword">import</span> <span class="include">scipy.stats</span> <span class="keyword">as</span> scs  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">50</span>]: percs = [<span class="float">0.01</span>, <span class="float">0.1</span>, <span class="float">1.</span>, <span class="float">2.5</span>, <span class="float">5.0</span>, <span class="float">10.0</span>]  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">51</span>]: VaR = scs.scoreatpercentile(risk[<span class="string"><span class="delimiter">'</span><span class="content">equity</span><span class="delimiter">'</span></span>] - <span class="integer">5000</span>, percs)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">52</span>]: VaR.round(<span class="integer">2</span>)  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">52</span>]: array([-<span class="float">184.83</span>, -<span class="float">178.62</span>, -<span class="float">153.7</span> , -<span class="float">111.54</span>,  -<span class="float">39.98</span>,   <span class="float">10.45</span>])

In [<span class="integer">53</span>]: <span class="keyword">def</span> <span class="function">print_var</span>():
             print(<span class="string"><span class="delimiter">'</span><span class="content">%16s %16s</span><span class="delimiter">'</span></span> % (<span class="string"><span class="delimiter">'</span><span class="content">Confidence Level</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Value-at-Risk</span><span class="delimiter">'</span></span>))
             print(<span class="integer">33</span> * <span class="string"><span class="delimiter">'</span><span class="content">-</span><span class="delimiter">'</span></span>)
             <span class="keyword">for</span> pair <span class="keyword">in</span> <span class="predefined">zip</span>(percs, VaR):
                 print(<span class="string"><span class="delimiter">'</span><span class="content">%16.2f %16.3f</span><span class="delimiter">'</span></span> % (<span class="integer">100</span> - pair[<span class="integer">0</span>], -pair[<span class="integer">1</span>]))  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">54</span>]: print_var()  <i class="conum" data-value="5"></i><b>(5)</b>

Confidence Level    Value-at-Risk
---------------------------------
           <span class="float">99.99</span>          <span class="float">184.830</span>
           <span class="float">99.90</span>          <span class="float">178.619</span>
           <span class="float">99.00</span>          <span class="float">153.699</span>
           <span class="float">97.50</span>          <span class="float">111.540</span>
           <span class="float">95.00</span>           <span class="float">39.977</span>
           <span class="float">90.00</span>          -<span class="float">10.455</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the <code>stats</code> sub-package of <code>SciPy</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Defines the relevant percentile values (i.e. 100% - confidence level).</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Does the sorting, ranking and identifies the respective (loss) values; uses interpolation if necessary.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Prints the absolute (loss) values.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Prints confidence intervals and the positive VaR values (according to convention).</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Another approach is to work with the observed log returns during that
 trading day and to put these in relation to the initial capital to come
 up with VaR numbers. <a href="#strategy_04">Frequency distribution of the equity position’s log returns (10 second interval)</a>
 shows the log returns for the original 10 second interval. The VaR 
values are now to be understood for the 10 second interval as well.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">55</span>]: risk[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(risk[<span class="string"><span class="delimiter">'</span><span class="content">equity</span><span class="delimiter">'</span></span>] / risk[<span class="string"><span class="delimiter">'</span><span class="content">equity</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>))  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">56</span>]: risk[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>].hist(bins=<span class="integer">35</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">57</span>]: VaR = scs.scoreatpercentile(<span class="integer">5000</span> * risk[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>], percs)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">58</span>]: print_var()

Confidence Level    Value-at-Risk
---------------------------------
           <span class="float">99.99</span>           <span class="float">74.430</span>
           <span class="float">99.90</span>           <span class="float">61.668</span>
           <span class="float">99.00</span>           <span class="float">38.604</span>
           <span class="float">97.50</span>           <span class="float">25.790</span>
           <span class="float">95.00</span>           <span class="float">19.353</span>
           <span class="float">90.00</span>           <span class="float">12.888</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the log returns.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Plots them as a histogram.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Relates the log returns to the initial capital.</td>
</tr>
</tbody></table>
</div>
<div id="strategy_04" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/strategy_04.png" alt="strategy 04">
</div>
<div class="title">Figure 83. Frequency distribution of the equity position’s log returns (10 second interval)</div>
</div>
<div class="paragraph">
<p>One can also change the interval length to come up with VaR values 
for different (i.e. longer) time intervals (“VaR horizons”). With a 
longer time interval, the VaR values increase — but generally not 
propotionally with the interval length. For example, take the original 
value for the 99% confidence level which is 38.604 EUR. Simply 
multiplying this value to get from 10 seconds to 5 minutes would imply a
 value of 38.604 x 6 x 5 = 1,158.12 EUR. The value based on the 
resampled time interval is much lower with 199.72 EUR.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">55</span>]: risk_resam = risk.resample(<span class="string"><span class="delimiter">'</span><span class="content">5min</span><span class="delimiter">'</span></span>).last()  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">56</span>]: risk_resam[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(risk_resam[<span class="string"><span class="delimiter">'</span><span class="content">equity</span><span class="delimiter">'</span></span>] /
                                        risk_resam[<span class="string"><span class="delimiter">'</span><span class="content">equity</span><span class="delimiter">'</span></span>].shift(<span class="integer">1</span>))  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">57</span>]: (<span class="integer">5000</span> * risk_resam[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>]).hist(bins=<span class="integer">35</span>)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">58</span>]: VaR = scs.scoreatpercentile(<span class="integer">5000</span> * risk_resam[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>], percs)  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">59</span>]: print_var()

Confidence Level    Value-at-Risk
---------------------------------
           <span class="float">99.99</span>          <span class="float">269.891</span>
           <span class="float">99.90</span>          <span class="float">263.414</span>
           <span class="float">99.00</span>          <span class="float">199.720</span>
           <span class="float">97.50</span>          <span class="float">142.935</span>
           <span class="float">95.00</span>          <span class="float">117.412</span>
           <span class="float">90.00</span>           <span class="float">74.016</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Resamples the data set, mainly to have end of interval values for the <code>equity</code> column.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates the log returns over the resampled time intervals.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Plots the log returns over the resampled time intervals scaled by the initial capital.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Calculates the VaR values for the longer time interval.</td>
</tr>
</tbody></table>
</div>
<div id="strategy_05" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/strategy_05.png" alt="strategy 05">
</div>
<div class="title">Figure 84. Frequency distribution of the equity position’s log returns times initial capital (5 minute interval)</div>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The VaR calculations in this section rely on a rather small data set.
 In practical applications, larger data sets should be used. Note also 
that the <code>scoreatpercentile</code> function uses interpolation whenever the data set is too small to have the percentile values reflected exactly.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_tail_risk">11.3.5. Tail Risk</h4>
<div class="paragraph">
<p>In the most simple case, one can identify tail risk as the largest 
negative return observed. For example, the largest drop in the S&amp;P 
500 for the data set used in this chapter occurrs on 15. October 2008 
with about -10% (the largest ever was on 19. October 1987 with -22.9%). 
This is easy to figure out with Python.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">60</span>]: h5 = pd.HDFStore(<span class="string"><span class="delimiter">'</span><span class="content">../data/equities.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>)

In [<span class="integer">61</span>]: sp500 = pd.DataFrame(h5[<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>])

In [<span class="integer">62</span>]: sp500[<span class="string"><span class="delimiter">'</span><span class="content">returns</span><span class="delimiter">'</span></span>] = np.log(sp500 / sp500.shift(<span class="integer">1</span>))

In [<span class="integer">63</span>]: sp500.returns.min()  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">63</span>]: -<span class="float">0.094695124959873936</span>

In [<span class="integer">64</span>]: sp500.returns.argmin()  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">64</span>]: Timestamp(<span class="string"><span class="delimiter">'</span><span class="content">2008-10-15 00:00:00</span><span class="delimiter">'</span></span>)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Identifies the lowest return over the complete time interval of the data set.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Identifies the day for which the lowest return is observed.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>We can do the same with the intraday data.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">65</span>]: risk[<span class="string"><span class="delimiter">'</span><span class="content">lstrategy_30</span><span class="delimiter">'</span></span>].min()  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">65</span>]: -<span class="float">0.01544136604391819</span>

In [<span class="integer">66</span>]: risk[<span class="string"><span class="delimiter">'</span><span class="content">lstrategy_30</span><span class="delimiter">'</span></span>].argmin()  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">66</span>]: Timestamp(<span class="string"><span class="delimiter">'</span><span class="content">2017-02-01 19:04:50</span><span class="delimiter">'</span></span>)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This gives the lowest return given the time interval of the data set (10 seconds).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>This gives the time interval for which the lowest return is observed.</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>As pointed out earlier, the data set used for the example is 
intentionally kept small for illustration purposes. This needs to be 
kept in mind when considering the resulting statistics, relative and 
absolute values, etc.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_exit_triggers">11.3.6. Exit Triggers</h4>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>If there was one article of faith that John Meriwether discovered at 
Salomon Brothers, it was to ride your losses until they turned into 
gains.</p>
</div>
</blockquote>
<div class="attribution">
— Roger Lownstein (When Genius Failed)
</div>
</div>
<div class="paragraph">
<p>Although the quote above indicates differently, the major risk 
management instrument is the exiting of market positions. For human 
traders, exiting a market position is not only a technical issue — it is
 a major psychological issue which is well documented by the wealth of 
literature dealing with the psychology of trading. Leaving psychology 
aside, an exit might be triggered by different events:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>signal</strong>: in the context of this chapter, given the 
SMA-based strategy, most trades are initiated by signals from the 
algorithm embodying the strategy; this is generally not considered a 
risk management event</p>
</li>
<li>
<p><strong>time</strong>: there might be a time frame associated with 
the trading strategy after which any position is being closed; e.g. at 6
 pm every evening</p>
</li>
<li>
<p><strong>profit</strong>: there might be a profit target associated with the trading strategy that triggers an exit; e.g. 5% or 1,250 USD</p>
</li>
<li>
<p><strong>loss</strong>: similarly, and often more importantly, there 
might be a stop loss level associated with the trading strategy that 
triggers an early exit to avoid further losses; e.g. -2.5% or 2,000 USD</p>
</li>
<li>
<p><strong>external</strong>: in a broader context, there might be any 
other number of reasons why a market position might be liquidated; one 
such event might a larger loss in a different trading strategy that 
makes it necessary to reduce risks overall or to generate liquidity to 
be able to cover margin calls</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_hedging">11.3.7. Hedging</h4>
<div class="paragraph">
<p>Depending on the instruments an algorithmic trading strategy is based
 on, there are also static as well as dynamic hedging strategies 
available. For example, a long-only strategy based on the S&amp;P 500 
might be hedged against larger drops in the index by the use of put 
options. For a more detailed account of derivatives analytics and 
hedging with Python refer to Hilpisch (2015).</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_automating_strategy_implementation">11.4. Automating Strategy Implementation</h3>
<div class="paragraph">
<p>This section puts together a few elements from previous chapters to 
set up the automated trading operation. The strategy to be implemented 
is the one backtested in the previous section: SMA-based trading of the <code>DE30_EUR</code> CFD of Oanda. The major ingredients are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>infrastructure</strong>: a DigitalOcean cloud instance 
(something similar from a comparable provider) with an appropriate 
Python 3.5 environment plus required packages</p>
</li>
<li>
<p><strong>Python codes</strong>: the Python code files implementing the automated, algorithmic trading strategy plus monitoring and logging</p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="_setting_up_the_infrastructure">11.4.1. Setting Up The Infrastructure</h4>
<div class="paragraph">
<p><a href="#python_environment">Setting up the Python Environment</a> 
shows in detail how to set up an appropriate technological 
infrastructure in the cloud to deploy Python code for algorithmic 
trading. We therefore only need to make use of the respective scripts as
 introduced there. All scripts — like the main one <a href="#cloud_install">Bash script to install Python and to run the Jupyter Notebook server</a> 
— can and should of course be customized to satisfy the specific 
requirements at hand. In what follows, it is assumed that a cloud 
instance has been set up and that the installation script <a href="#cloud_install">Bash script to install Python and to run the Jupyter Notebook server</a> has been used to provide the Python environment.</p>
</div>
</div>
<div class="sect3">
<h4 id="_deploying_the_code">11.4.2. Deploying the Code</h4>
<div class="paragraph">
<p>Once the infrastructure is ready, the Python code that implements the automated, algorithmic trading strategy can be deployed. <a href="#oanda_sma_trader">Oanda custom streaming class that automatically trades a SMA-based strategy</a> presents a script for the automated trading of the SMA-based strategy. In the beginning, there are a few preparations.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="keyword">import</span> <span class="include">q</span>  <i class="conum" data-value="1"></i><b>(1)</b>
<span class="keyword">import</span> <span class="include">v20</span>
<span class="keyword">import</span> <span class="include">zmq</span>
<span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np
<span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd
<span class="keyword">import</span> <span class="include">datetime</span> <span class="keyword">as</span> dt
<span class="keyword">import</span> <span class="include">configparser</span>

<span class="comment"># loading credentials</span>
config = configparser.ConfigParser()
config.read(<span class="string"><span class="delimiter">'</span><span class="content">pyalgo.cfg</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>

<span class="comment"># setting up socket server</span>
context = zmq.Context()
socket = context.socket(zmq.PUB)
socket.bind(<span class="string"><span class="delimiter">'</span><span class="content">tcp://0.0.0.0:5555</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="3"></i><b>(3)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td><code>q</code> is a light weight logging and debugging package (see <a href="https://pypi.python.org/pypi/q" target="_blank" class="bare">https://pypi.python.org/pypi/q</a>)</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The script assumes here that the configuration file is in the same directory.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>A socket server is initialized on port 5555 to allow for real-time monitoring.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The <code>SMATrader</code> class can be customized with regard to all strategy parameters.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="keyword">class</span> <span class="class">SMATrader</span>(<span class="predefined">object</span>):
    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, instrument, interval, SMA1, SMA2, units,
                 *args, **kwargs):
        <span class="predefined-constant">self</span>.ticks = <span class="integer">0</span>
        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>
        <span class="predefined-constant">self</span>.data = pd.DataFrame()
        <span class="predefined-constant">self</span>.instrument = instrument  <i class="conum" data-value="1"></i><b>(1)</b>
        <span class="predefined-constant">self</span>.interval = interval  <i class="conum" data-value="2"></i><b>(2)</b>
        <span class="predefined-constant">self</span>.SMA1 = SMA1  <i class="conum" data-value="3"></i><b>(3)</b>
        <span class="predefined-constant">self</span>.SMA2 = SMA2  <i class="conum" data-value="4"></i><b>(4)</b>
        <span class="predefined-constant">self</span>.units = units  <i class="conum" data-value="5"></i><b>(5)</b>
        <span class="predefined-constant">self</span>.account_id = config[<span class="string"><span class="delimiter">'</span><span class="content">oanda_v20</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">account_id</span><span class="delimiter">'</span></span>]
        <span class="predefined-constant">self</span>.ctx = v20.Context(
            <span class="string"><span class="delimiter">'</span><span class="content">api-fxpractice.oanda.com</span><span class="delimiter">'</span></span>,
            <span class="integer">443</span>,
            <span class="predefined-constant">True</span>,
            application=<span class="string"><span class="delimiter">'</span><span class="content">sample_code</span><span class="delimiter">'</span></span>,
            token=config[<span class="string"><span class="delimiter">'</span><span class="content">oanda_v20</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">access_token</span><span class="delimiter">'</span></span>],
            datetime_format=<span class="string"><span class="delimiter">'</span><span class="content">RFC3339</span><span class="delimiter">'</span></span>
        )
        <span class="predefined-constant">self</span>.ctx_stream = v20.Context(
            <span class="string"><span class="delimiter">'</span><span class="content">stream-fxpractice.oanda.com</span><span class="delimiter">'</span></span>,
            <span class="integer">443</span>,
            <span class="predefined-constant">True</span>,
            application=<span class="string"><span class="delimiter">'</span><span class="content">sample_code</span><span class="delimiter">'</span></span>,
            token=config[<span class="string"><span class="delimiter">'</span><span class="content">oanda_v20</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">access_token</span><span class="delimiter">'</span></span>],
            datetime_format=<span class="string"><span class="delimiter">'</span><span class="content">RFC3339</span><span class="delimiter">'</span></span>
        )</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Defines the instrument to be traded.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Fixes the time interval for the data resampling.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Fixes the parameter value for the first simple moving average.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Fixes the parameter value for the second simple moving average.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Fixes the number of units of the instrument to be bought/sold.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The <code>start</code> method starts the streaming and runs the trading algorithm (via <code>on_success</code>). It also stops the streaming and trading.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">start</span>(<span class="predefined-constant">self</span>):
        response = <span class="predefined-constant">self</span>.ctx_stream.pricing.stream(
            <span class="predefined-constant">self</span>.account_id,
            snapshot=<span class="predefined-constant">True</span>,
            instruments=<span class="predefined-constant">self</span>.instrument
        )
        <span class="keyword">for</span> msg_type, msg <span class="keyword">in</span> response.parts():
            <span class="keyword">if</span> msg_type == <span class="string"><span class="delimiter">'</span><span class="content">pricing.Price</span><span class="delimiter">'</span></span>:
                <span class="predefined-constant">self</span>.on_success(msg.time, msg.bids[<span class="integer">0</span>].price, msg.asks[<span class="integer">0</span>].price)
            <span class="keyword">if</span> <span class="predefined-constant">self</span>.ticks == <span class="integer">500</span>:
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:
                    <span class="predefined-constant">self</span>.create_order(-<span class="predefined-constant">self</span>.units)
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == -<span class="integer">1</span>:
                    <span class="predefined-constant">self</span>.create_order(<span class="predefined-constant">self</span>.units)
                <span class="keyword">return</span> <span class="string"><span class="delimiter">'</span><span class="content">Finished</span><span class="delimiter">'</span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The method <code>create_order</code> sends order information and market data information to different channels (socket, <code>stdout</code>,
 log file). This allows the real-time monitoring as well as — via 
logging — the exact reconstruction of all such events later on (in 
addition to the capabilities that the platform itself offers in this 
regard).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">create_order</span>(<span class="predefined-constant">self</span>, units):
        request = <span class="predefined-constant">self</span>.ctx.order.market(
            <span class="predefined-constant">self</span>.account_id,
            instrument=<span class="predefined-constant">self</span>.instrument,
            units=units,
        )
        order = request.get(<span class="string"><span class="delimiter">'</span><span class="content">orderFillTransaction</span><span class="delimiter">'</span></span>)
        <span class="comment"># order data</span>
        socket.send_string(<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="char">\n</span><span class="delimiter">'</span></span> + <span class="predefined">str</span>(order))  <i class="conum" data-value="1"></i><b>(1)</b>
        print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="delimiter">'</span></span>, <span class="predefined">str</span>(order))  <i class="conum" data-value="2"></i><b>(2)</b>
        q(<span class="predefined">str</span>(order))  <i class="conum" data-value="3"></i><b>(3)</b>
        <span class="comment"># market data</span>
        msg = <span class="string"><span class="delimiter">'</span><span class="content">SMA | Market data:</span><span class="char">\n</span><span class="content">%s</span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.resam.iloc[-<span class="integer">1</span>]  <i class="conum" data-value="4"></i><b>(4)</b>
        socket.send_string(msg)  <i class="conum" data-value="5"></i><b>(5)</b>
        print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="delimiter">'</span></span>, msg)  <i class="conum" data-value="5"></i><b>(5)</b>
        q(msg)  <i class="conum" data-value="5"></i><b>(5)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Sends the order information over the socket; all socket messages start with <code>SMA</code> as the channel.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Prints it to the <code>stdout</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Logs the order information.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Creates a <code>str</code> object with the last data row from the market data <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Sends it to the socket, <code>stdout</code> and log file.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The major method of the automated trading class is the <code>on_success</code> method. This is where the trading itself is taken care of.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">on_success</span>(<span class="predefined-constant">self</span>, time, bid, ask):
        <span class="predefined-constant">self</span>.ticks += <span class="integer">1</span>
        msg = <span class="string"><span class="delimiter">'</span><span class="content">SMA | %s | retrieved new data | %5d</span><span class="delimiter">'</span></span> % (<span class="predefined">str</span>(dt.datetime.now()),
                                                       <span class="predefined-constant">self</span>.ticks)
        socket.send_string(msg)  <i class="conum" data-value="1"></i><b>(1)</b>
        print(msg)
        <span class="predefined-constant">self</span>.data = <span class="predefined-constant">self</span>.data.append(
            pd.DataFrame({<span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>: [time], <span class="string"><span class="delimiter">'</span><span class="content">bid</span><span class="delimiter">'</span></span>: [bid], <span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>: [ask]}))
        <span class="predefined-constant">self</span>.data.index = pd.DatetimeIndex(<span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>])
        <span class="predefined-constant">self</span>.resam = <span class="predefined-constant">self</span>.data.resample(<span class="predefined-constant">self</span>.interval).last().ffill()  <i class="conum" data-value="2"></i><b>(2)</b>
        <span class="keyword">if</span> <span class="predefined">len</span>(<span class="predefined-constant">self</span>.resam) &gt; <span class="predefined-constant">self</span>.SMA2:  <i class="conum" data-value="3"></i><b>(3)</b>
            <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">mid</span><span class="delimiter">'</span></span>] = (<span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">bid</span><span class="delimiter">'</span></span>] +
                                 <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>]) / <span class="integer">2</span>  <i class="conum" data-value="4"></i><b>(4)</b>
            <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">mid</span><span class="delimiter">'</span></span>].rolling(<span class="predefined-constant">self</span>.SMA1).mean()  <i class="conum" data-value="5"></i><b>(5)</b>
            <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">mid</span><span class="delimiter">'</span></span>].rolling(<span class="predefined-constant">self</span>.SMA2).mean()  <i class="conum" data-value="5"></i><b>(5)</b>
            <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.where(<span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] &gt;
                                              <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>], <span class="integer">1</span>, -<span class="integer">1</span>)  <i class="conum" data-value="6"></i><b>(6)</b>
            <span class="comment"># print(self.resam[['bid', 'ask', 'SMA1', 'SMA2',</span>
            <span class="comment">#                   'position']].tail())</span>
            <span class="keyword">if</span> <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>] == <span class="integer">1</span>:
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">0</span>:
                    <span class="predefined-constant">self</span>.create_order(<span class="predefined-constant">self</span>.units)
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == -<span class="integer">1</span>:
                    <span class="predefined-constant">self</span>.create_order(<span class="predefined-constant">self</span>.units * <span class="integer">2</span>)
                <span class="predefined-constant">self</span>.position = <span class="integer">1</span>
            <span class="keyword">elif</span> <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>] == -<span class="integer">1</span>:
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">0</span>:
                    <span class="predefined-constant">self</span>.create_order(-<span class="predefined-constant">self</span>.units)
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:
                    <span class="predefined-constant">self</span>.create_order(-<span class="predefined-constant">self</span>.units * <span class="integer">2</span>)
                <span class="predefined-constant">self</span>.position = -<span class="integer">1</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Sends the message about new data retrieval to the socket.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Resamples the tick data to the defined time interval.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>If there is enough data available, the trading begins.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Calculates the mid prices from the <code>bid</code> and <code>ask</code> values (this might be refined to make use of <code>bid</code> and <code>ask</code> directly).</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The SMA values are calculated.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The signal is derived from the last two SMA values for <code>SMA1</code> and <code>SMA2</code>.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The <code>on_error</code> method currently does nothing of 
importance. This method can be used to initiate any desired messaging, 
risk mitigation task, etc. in case of an error. For example, it could be
 used to send an alert via email or text message to the trader.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">    <span class="keyword">def</span> <span class="function">on_error</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Call this method in case of any error/exception. </span><span class="delimiter">'''</span></span>
        socket.send_string(<span class="string"><span class="delimiter">'</span><span class="content">A serious error occured.</span><span class="delimiter">'</span></span>)
        print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="content">A serious error occured.</span><span class="delimiter">'</span></span>)
        q(<span class="string"><span class="delimiter">'</span><span class="content">A serious error occured.</span><span class="delimiter">'</span></span>)
        <span class="comment"># initiate any required/desired risk mitigation task</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Finally the <code>__main__</code> part instantiates a <code>SMATrader</code> object and starts the trading.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="keyword">if</span> __name__ == <span class="string"><span class="delimiter">'</span><span class="content">__main__</span><span class="delimiter">'</span></span>:
    sma = SMATrader(instrument=<span class="string"><span class="delimiter">'</span><span class="content">DE30_EUR</span><span class="delimiter">'</span></span>, interval=<span class="string"><span class="delimiter">'</span><span class="content">10s</span><span class="delimiter">'</span></span>,
                    SMA1=<span class="integer">5</span>, SMA2=<span class="integer">10</span>, units=<span class="integer">10</span>)
    sma.start()</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_real_time_monitoring">11.4.3. Real-Time Monitoring</h4>
<div class="paragraph">
<p>Once the code is deployed and running, it sends a plethora of 
messages to inform the trader (or maybe other programs) of what is going
 on. In the simplest case, a local socket client script, like the one in
 <a href="#oanda_sma_monitor">Socket client script to monitor activity of the automated trading class</a>,
 can be used to follow the stream of new messages and to see if 
“everything is in order”. Of course, the Oanda desktop trading 
application can also be used to monitor trades by the Python script. 
However, this does not allow, for example, to inspect in detail what the
 last available market data was that triggered a trade in the first 
place.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_visual_step_by_step_overview">11.5. Visual Step-by-Step Overview</h3>
<div class="paragraph">
<p>This final section provides a step-by-step overview in screenshots.</p>
</div>
<div class="sect3">
<h4 id="_configuring_oanda_account">11.5.1. Configuring Oanda Account</h4>
<div class="paragraph">
<p>The first step is set the correct leverage ratio for the Oanda account according to the Kelly criterion and as shown in <a href="#auto_00">Setting leverage on Oanda</a>.</p>
</div>
<div id="auto_00" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/auto_00.png" alt="auto 00">
</div>
<div class="title">Figure 85. Setting leverage on Oanda</div>
</div>
</div>
<div class="sect3">
<h4 id="_setting_up_the_hardware">11.5.2. Setting Up the Hardware</h4>
<div class="paragraph">
<p>The second step is to create a DigitalOcean droplet as shown in <a href="#auto_01">DigitalOcean droplet</a>.</p>
</div>
<div id="auto_01" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/auto_01.png" alt="auto 01">
</div>
<div class="title">Figure 86. DigitalOcean droplet</div>
</div>
</div>
<div class="sect3">
<h4 id="_setting_up_the_python_environment">11.5.3. Setting Up the Python Environment</h4>
<div class="paragraph">
<p>The third step is to put all the software on the droplet (see <a href="#auto_02">Installing Python and packages</a>).</p>
</div>
<div id="auto_02" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/auto_02.png" alt="auto 02">
</div>
<div class="title">Figure 87. Installing Python and packages</div>
</div>
<div class="paragraph">
<p>When it all works fine, you can create a new Jupyter Notebook and start you interactive Python session (see <a href="#auto_03">Testing Jupyter Notebook</a>).</p>
</div>
<div id="auto_03" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/auto_03.png" alt="auto 03">
</div>
<div class="title">Figure 88. Testing Jupyter Notebook</div>
</div>
</div>
<div class="sect3">
<h4 id="_uploading_the_code">11.5.4. Uploading the Code</h4>
<div class="paragraph">
<p>The fourth step is to upload the Python scripts for automated trading and real-time monitoring as shown in <a href="#auto_04">Uploading Python code files</a>.</p>
</div>
<div id="auto_04" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/auto_04.png" alt="auto 04">
</div>
<div class="title">Figure 89. Uploading Python code files</div>
</div>
</div>
<div class="sect3">
<h4 id="_running_the_code">11.5.5. Running the Code</h4>
<div class="paragraph">
<p>The fifth step is to run the Python script for automated trading as shown in <a href="#auto_05">Running the Python script</a>.</p>
</div>
<div id="auto_05" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/auto_05.png" alt="auto 05">
</div>
<div class="title">Figure 90. Running the Python script</div>
</div>
<div class="paragraph">
<p><a href="#auto_06">A trade initiated by the Python script</a> shows a trade that the Python script has initiated.</p>
</div>
<div id="auto_06" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/auto_06.png" alt="auto 06">
</div>
<div class="title">Figure 91. A trade initiated by the Python script</div>
</div>
</div>
<div class="sect3">
<h4 id="_real_time_monitoring_2">11.5.6. Real-Time Monitoring</h4>
<div class="paragraph">
<p>The final step is to run the monitoring script locally (provided you have set the correct IP in the local script) as seen in <a href="#auto_07">Local real-time monitoring via socket</a>. In practice, this means that you can monitor locally in real-time what exactly is going on on your cloud instance.</p>
</div>
<div id="auto_07" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/auto_07.png" alt="auto 07">
</div>
<div class="title">Figure 92. Local real-time monitoring via socket</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_conclusions_11">11.6. Conclusions</h3>
<div class="paragraph">
<p>This chapter covers important topics in the automation of algorithmic
 trading strategies. The chapter is divided basically in two parts. The 
first part deals with capital management according to the Kelly 
criterion as well as risk analysis and management. The second part deals
 with the technical steps required to deploy the Python code that 
implements the automated strategy including real-time monitoring via 
sockets. A visual overview of all steps involved concludes the chapter.</p>
</div>
</div>
<div class="sect2">
<h3 id="_further_resources_11">11.7. Further Resources</h3>
<div class="paragraph">
<p>Research papers cited in this chapter:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Hung, Jane (2010): “Betting with the Kelly Criterion.” <a href="https://www.math.washington.edu/%7Emorrow/336_10/papers/jane.pdf" target="_blank" class="bare">https://www.math.washington.edu/~morrow/336_10/papers/jane.pdf</a>.</p>
</li>
<li>
<p>Rotando, Louis and Edward Thorp (1992): “The Kelly Criterion and the Stock Market.” <em>The American Mathematical Monthly</em>, Vol. 99, No. 10, 922-931.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Books cited in this chapter:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Lowenstein, Roger (2001): <em>When Genius Failed</em>. Fourth Estate, London.</p>
</li>
<li>
<p>Hilpisch, Yves (2014): <em>Python for Finance</em>. O’Reilly, Beijing et al.</p>
</li>
<li>
<p>Hilpisch, Yves (2015): <em>Derivatives Analytics with Python</em>. Wiley Finance.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_python_scripts_9">11.8. Python Scripts</h3>
<div id="oanda_sma_trader" class="exampleblock">
<div class="title">Example 24. Oanda custom streaming class that automatically trades a SMA-based strategy</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Script</span>
<span class="comment"># with Momentum Trading Class</span>
<span class="comment"># for Oanda</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">q</span>
<span class="keyword">import</span> <span class="include">v20</span>
<span class="keyword">import</span> <span class="include">zmq</span>
<span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np
<span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd
<span class="keyword">import</span> <span class="include">datetime</span> <span class="keyword">as</span> dt
<span class="keyword">import</span> <span class="include">configparser</span>

<span class="comment"># loading credentials</span>
config = configparser.ConfigParser()
config.read(<span class="string"><span class="delimiter">'</span><span class="content">pyalgo.cfg</span><span class="delimiter">'</span></span>)

<span class="comment"># setting up socket server</span>
context = zmq.Context()
socket = context.socket(zmq.PUB)
socket.bind(<span class="string"><span class="delimiter">'</span><span class="content">tcp://0.0.0.0:5555</span><span class="delimiter">'</span></span>)

<span class="keyword">class</span> <span class="class">SMATrader</span>(<span class="predefined">object</span>):
    <span class="keyword">def</span> <span class="function">__init__</span>(<span class="predefined-constant">self</span>, instrument, interval, SMA1, SMA2, units,
                 *args, **kwargs):
        <span class="predefined-constant">self</span>.ticks = <span class="integer">0</span>
        <span class="predefined-constant">self</span>.position = <span class="integer">0</span>
        <span class="predefined-constant">self</span>.data = pd.DataFrame()
        <span class="predefined-constant">self</span>.instrument = instrument
        <span class="predefined-constant">self</span>.interval = interval
        <span class="predefined-constant">self</span>.SMA1 = SMA1
        <span class="predefined-constant">self</span>.SMA2 = SMA2
        <span class="predefined-constant">self</span>.units = units
        <span class="predefined-constant">self</span>.account_id = config[<span class="string"><span class="delimiter">'</span><span class="content">oanda_v20</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">account_id</span><span class="delimiter">'</span></span>]
        <span class="predefined-constant">self</span>.ctx = v20.Context(
            <span class="string"><span class="delimiter">'</span><span class="content">api-fxpractice.oanda.com</span><span class="delimiter">'</span></span>,
            <span class="integer">443</span>,
            <span class="predefined-constant">True</span>,
            application=<span class="string"><span class="delimiter">'</span><span class="content">sample_code</span><span class="delimiter">'</span></span>,
            token=config[<span class="string"><span class="delimiter">'</span><span class="content">oanda_v20</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">access_token</span><span class="delimiter">'</span></span>],
            datetime_format=<span class="string"><span class="delimiter">'</span><span class="content">RFC3339</span><span class="delimiter">'</span></span>
        )
        <span class="predefined-constant">self</span>.ctx_stream = v20.Context(
            <span class="string"><span class="delimiter">'</span><span class="content">stream-fxpractice.oanda.com</span><span class="delimiter">'</span></span>,
            <span class="integer">443</span>,
            <span class="predefined-constant">True</span>,
            application=<span class="string"><span class="delimiter">'</span><span class="content">sample_code</span><span class="delimiter">'</span></span>,
            token=config[<span class="string"><span class="delimiter">'</span><span class="content">oanda_v20</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">access_token</span><span class="delimiter">'</span></span>],
            datetime_format=<span class="string"><span class="delimiter">'</span><span class="content">RFC3339</span><span class="delimiter">'</span></span>
        )

    <span class="keyword">def</span> <span class="function">start</span>(<span class="predefined-constant">self</span>):
        response = <span class="predefined-constant">self</span>.ctx_stream.pricing.stream(
            <span class="predefined-constant">self</span>.account_id,
            snapshot=<span class="predefined-constant">True</span>,
            instruments=<span class="predefined-constant">self</span>.instrument
        )
        <span class="keyword">for</span> msg_type, msg <span class="keyword">in</span> response.parts():
            <span class="keyword">if</span> msg_type == <span class="string"><span class="delimiter">'</span><span class="content">pricing.Price</span><span class="delimiter">'</span></span>:
                <span class="predefined-constant">self</span>.on_success(msg.time, msg.bids[<span class="integer">0</span>].price, msg.asks[<span class="integer">0</span>].price)
            <span class="keyword">if</span> <span class="predefined-constant">self</span>.ticks == <span class="integer">500</span>:
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:
                    <span class="predefined-constant">self</span>.create_order(-<span class="predefined-constant">self</span>.units)
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == -<span class="integer">1</span>:
                    <span class="predefined-constant">self</span>.create_order(<span class="predefined-constant">self</span>.units)
                <span class="keyword">return</span> <span class="string"><span class="delimiter">'</span><span class="content">Finished</span><span class="delimiter">'</span></span>

    <span class="keyword">def</span> <span class="function">create_order</span>(<span class="predefined-constant">self</span>, units):
        request = <span class="predefined-constant">self</span>.ctx.order.market(
            <span class="predefined-constant">self</span>.account_id,
            instrument=<span class="predefined-constant">self</span>.instrument,
            units=units,
        )
        order = request.get(<span class="string"><span class="delimiter">'</span><span class="content">orderFillTransaction</span><span class="delimiter">'</span></span>)
        <span class="comment"># order data</span>
        socket.send_string(<span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="char">\n</span><span class="delimiter">'</span></span> + <span class="predefined">str</span>(order))
        print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="delimiter">'</span></span>, <span class="predefined">str</span>(order))
        q(<span class="predefined">str</span>(order))
        <span class="comment"># market data</span>
        msg = <span class="string"><span class="delimiter">'</span><span class="content">SMA | Market data:</span><span class="char">\n</span><span class="content">%s</span><span class="delimiter">'</span></span> % <span class="predefined-constant">self</span>.resam.iloc[-<span class="integer">1</span>]
        socket.send_string(msg)
        print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="delimiter">'</span></span>, msg)
        q(msg)

    <span class="keyword">def</span> <span class="function">on_success</span>(<span class="predefined-constant">self</span>, time, bid, ask):
        <span class="predefined-constant">self</span>.ticks += <span class="integer">1</span>
        msg = <span class="string"><span class="delimiter">'</span><span class="content">SMA | %s | retrieved new data | %5d</span><span class="delimiter">'</span></span> % (<span class="predefined">str</span>(dt.datetime.now()),
                                                       <span class="predefined-constant">self</span>.ticks)
        socket.send_string(msg)
        print(msg)
        <span class="predefined-constant">self</span>.data = <span class="predefined-constant">self</span>.data.append(
            pd.DataFrame({<span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>: [time], <span class="string"><span class="delimiter">'</span><span class="content">bid</span><span class="delimiter">'</span></span>: [bid], <span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>: [ask]}))
        <span class="predefined-constant">self</span>.data.index = pd.DatetimeIndex(<span class="predefined-constant">self</span>.data[<span class="string"><span class="delimiter">'</span><span class="content">time</span><span class="delimiter">'</span></span>])
        <span class="predefined-constant">self</span>.resam = <span class="predefined-constant">self</span>.data.resample(<span class="predefined-constant">self</span>.interval).last().ffill()
        <span class="keyword">if</span> <span class="predefined">len</span>(<span class="predefined-constant">self</span>.resam) &gt; <span class="predefined-constant">self</span>.SMA2:
            <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">mid</span><span class="delimiter">'</span></span>] = (<span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">bid</span><span class="delimiter">'</span></span>] +
                                 <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">ask</span><span class="delimiter">'</span></span>]) / <span class="integer">2</span>
            <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">mid</span><span class="delimiter">'</span></span>].rolling(<span class="predefined-constant">self</span>.SMA1).mean()
            <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>] = <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">mid</span><span class="delimiter">'</span></span>].rolling(<span class="predefined-constant">self</span>.SMA2).mean()
            <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>] = np.where(<span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">SMA1</span><span class="delimiter">'</span></span>] &gt;
                                              <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">SMA2</span><span class="delimiter">'</span></span>], <span class="integer">1</span>, -<span class="integer">1</span>)
            <span class="comment"># print(self.resam[['bid', 'ask', 'SMA1', 'SMA2',</span>
            <span class="comment">#                   'position']].tail())</span>
            <span class="keyword">if</span> <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>] == <span class="integer">1</span>:
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">0</span>:
                    <span class="predefined-constant">self</span>.create_order(<span class="predefined-constant">self</span>.units)
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == -<span class="integer">1</span>:
                    <span class="predefined-constant">self</span>.create_order(<span class="predefined-constant">self</span>.units * <span class="integer">2</span>)
                <span class="predefined-constant">self</span>.position = <span class="integer">1</span>
            <span class="keyword">elif</span> <span class="predefined-constant">self</span>.resam[<span class="string"><span class="delimiter">'</span><span class="content">position</span><span class="delimiter">'</span></span>].ix[-<span class="integer">1</span>] == -<span class="integer">1</span>:
                <span class="keyword">if</span> <span class="predefined-constant">self</span>.position == <span class="integer">0</span>:
                    <span class="predefined-constant">self</span>.create_order(-<span class="predefined-constant">self</span>.units)
                <span class="keyword">elif</span> <span class="predefined-constant">self</span>.position == <span class="integer">1</span>:
                    <span class="predefined-constant">self</span>.create_order(-<span class="predefined-constant">self</span>.units * <span class="integer">2</span>)
                <span class="predefined-constant">self</span>.position = -<span class="integer">1</span>

    <span class="keyword">def</span> <span class="function">on_error</span>(<span class="predefined-constant">self</span>):
        <span class="docstring"><span class="delimiter">'''</span><span class="content"> Call this method in case of any error/exception. </span><span class="delimiter">'''</span></span>
        socket.send_string(<span class="string"><span class="delimiter">'</span><span class="content">A serious error occured.</span><span class="delimiter">'</span></span>)
        print(<span class="string"><span class="delimiter">'</span><span class="char">\n</span><span class="content">A serious error occured.</span><span class="delimiter">'</span></span>)
        q(<span class="string"><span class="delimiter">'</span><span class="content">A serious error occured.</span><span class="delimiter">'</span></span>)
        <span class="comment"># initiate any required/desired risk mitigation task</span>

<span class="keyword">if</span> __name__ == <span class="string"><span class="delimiter">'</span><span class="content">__main__</span><span class="delimiter">'</span></span>:
    sma = SMATrader(instrument=<span class="string"><span class="delimiter">'</span><span class="content">DE30_EUR</span><span class="delimiter">'</span></span>, interval=<span class="string"><span class="delimiter">'</span><span class="content">10s</span><span class="delimiter">'</span></span>,
                    SMA1=<span class="integer">5</span>, SMA2=<span class="integer">10</span>, units=<span class="integer">10</span>)
    sma.start()</code></pre>
</div>
</div>
</div>
</div>
<div id="oanda_sma_monitor" class="exampleblock">
<div class="title">Example 25. Socket client script to monitor activity of the automated trading class</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python"><span class="comment">#</span>
<span class="comment"># Python Script</span>
<span class="comment"># for Real-Time Monitoring</span>
<span class="comment"># via Socket</span>
<span class="comment">#</span>
<span class="comment"># Python for Algorithmic Trading</span>
<span class="comment"># (c) Dr. Yves J. Hilpisch</span>
<span class="comment"># The Python Quants GmbH</span>
<span class="comment">#</span>
<span class="keyword">import</span> <span class="include">zmq</span>

context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.connect(<span class="string"><span class="delimiter">'</span><span class="content">tcp://46.101.3.206:5555</span><span class="delimiter">'</span></span>)  <span class="comment"># adjust to remote IP</span>
socket.setsockopt_string(zmq.SUBSCRIBE, <span class="string"><span class="delimiter">'</span><span class="content">SMA</span><span class="delimiter">'</span></span>)  <span class="comment"># channel is SMA</span>

<span class="keyword">while</span> <span class="predefined-constant">True</span>:
    msg = socket.recv_string()
    print(msg)</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="python_numpy_pandas">Appendix A: Python, NumPy, matplotlib, pandas</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph align_me_right">
<p>Talk is cheap. Show me the code.</p>
</div>
</blockquote>
<div class="attribution">
— Linus Tovalds
</div>
</div>
<div class="sect2">
<h3 id="_introduction_12">Introduction</h3>
<div class="paragraph">
<p>Python has become a powerful programming language and has developed a
 huge ecosystem of helpful libraries over the last couple of years.<sup class="footnote">[<a id="_footnoteref_38" class="footnote" href="#_footnote_38" title="View footnote.">38</a>]</sup> This appendix provides a concise overview of Python and two of the major pillars of the so-called <em>scientific or pydata stack</em>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>NumPy (cf. <a href="http://numpy.scipy.org/" target="_blank" class="bare">http://numpy.scipy.org</a>)</p>
</li>
<li>
<p>pandas (cf. <a href="http://pandas.pydata.org/" target="_blank" class="bare">http://pandas.pydata.org</a>)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>NumPy provides performant array operations on numerical data while 
pandas is specifically designed to handle more complex data analytics 
operations, e.g. on (financial) times series data.</p>
</div>
<div class="paragraph">
<p>Such an introductory appendix — only addressing selected topics 
relevant to the rest of the contents of this course — can of course not 
replace a thorough introduction to Python and the libraries covered. 
However, if you are rather new to Python or programming in general you 
might get a first overview and a feeling of what Python is all about. If
 you are already experienced in another language typically used in 
quantitative finance (e.g. Matlab, R, C++, VBA), you see how typical 
data structures, programming paradigms and idioms in Python look like.</p>
</div>
<div class="paragraph">
<p>For a comprehensive overview of Python applied to finance see 
Hilpisch (2014). Other, more general introductions, to the language with
 a scientific and data analysis focus are <a href="http://www.scipy-lectures.org/" target="_blank">Varoqueaux et al. (2015)</a>, VanderPlas (2017) and McKinney (2017).</p>
</div>
</div>
<div class="sect2">
<h3 id="_python_basics">Python Basics</h3>
<div class="paragraph">
<p>This section introduces basic Python data types and structures, control structures and some Python idioms.</p>
</div>
<div class="sect3">
<h4 id="_data_types">Data Types</h4>
<div class="paragraph">
<p>It is noteworthy that Python is a <em>dynamically typed system</em> which means that types of objects are inferred from their contexts. Let us start with numbers.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: a = <span class="integer">3</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: <span class="predefined">type</span>(a)  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">2</span>]: <span class="predefined">int</span>

In [<span class="integer">3</span>]: a.bit_length()  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">3</span>]: <span class="integer">2</span>

In [<span class="integer">4</span>]: b = <span class="float">5.</span>  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">5</span>]: <span class="predefined">type</span>(b)
Out[<span class="integer">5</span>]: <span class="predefined">float</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Assigns the variable name <code>a</code> an integer value of 3.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Looks up the type of <code>a</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Looks up the number of bits used to store the integer value.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Assigns the variable name <code>b</code> a floating point value of 5.0</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Python can handle arbitrarily large integers which is quite beneficial for number theoretical applications, for instance.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">6</span>]: c = <span class="integer">10</span> ** <span class="integer">100</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">7</span>]: c
Out[<span class="integer">7</span>]: <span class="integer">10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span>

In [<span class="integer">8</span>]: c.bit_length()
Out[<span class="integer">8</span>]: <span class="integer">333</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Assigns a "huge" integer value.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Arithmetic operations on these objects work as expected.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">9</span>]: <span class="integer">3</span> / <span class="integer">5</span>  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">9</span>]: <span class="float">0.6</span>

In [<span class="integer">10</span>]: a * b  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">10</span>]: <span class="float">15.0</span>

In [<span class="integer">11</span>]: b + a  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">11</span>]: <span class="float">8.0</span>

In [<span class="integer">12</span>]: a - b  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">12</span>]: -<span class="float">2.0</span>

In [<span class="integer">13</span>]: a ** b  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">13</span>]: <span class="integer">243</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Division.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Multiplication.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Addition.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Difference.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Power.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Many commonly used mathematical functions are found in the <code>math</code> module which is part of Python’s standard library.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">14</span>]: <span class="keyword">import</span> <span class="include">math</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">15</span>]: math.log(a)  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">15</span>]: <span class="float">1.0986122886681098</span>

In [<span class="integer">16</span>]: math.exp(a)  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">16</span>]: <span class="float">20.085536923187668</span>

In [<span class="integer">17</span>]: math.sin(b)  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">17</span>]: -<span class="float">0.9589242746631385</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the <code>math</code> module from the standard library.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates the natural logarithm.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Calculates the exponential value.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Calculates the sine value.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Another important basic data type are string objects (<code>str</code>).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">18</span>]: s = <span class="string"><span class="delimiter">'</span><span class="content">Python for Algorithmic Trading.</span><span class="delimiter">'</span></span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">19</span>]: <span class="predefined">type</span>(s)
Out[<span class="integer">19</span>]: <span class="predefined">str</span>

In [<span class="integer">20</span>]: s.lower()  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">20</span>]: <span class="string"><span class="delimiter">'</span><span class="content">python for algorithmic trading.</span><span class="delimiter">'</span></span>

In [<span class="integer">21</span>]: s.upper()  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">21</span>]: <span class="string"><span class="delimiter">'</span><span class="content">PYTHON FOR ALGORITHMIC TRADING.</span><span class="delimiter">'</span></span>

In [<span class="integer">22</span>]: s[<span class="integer">0</span>:<span class="integer">6</span>]  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">22</span>]: <span class="string"><span class="delimiter">'</span><span class="content">Python</span><span class="delimiter">'</span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Assigns a <code>str</code> object to the variable name <code>s</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Transforms all characters to lower case.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Transforms all characters to upper case.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Selects the first six characters.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Such objects can also be combined using the <code>+</code> operator. The index value -1 represents the last character of a string (or last element of a sequence in general).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">23</span>]: st = s[<span class="integer">0</span>:<span class="integer">6</span>] + s[-<span class="integer">9</span>:-<span class="integer">1</span>]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">24</span>]: print(st)  <i class="conum" data-value="2"></i><b>(2)</b>
Python Trading</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Combines sub-sets of the <code>str</code> object to a new one.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Prints out the result.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>String replacements are often used to parametrize text output.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">25</span>]: repl = <span class="string"><span class="delimiter">'</span><span class="content">My name is %s, I am %d years old and %4.2f m tall.</span><span class="delimiter">'</span></span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">26</span>]: print(repl % (<span class="string"><span class="delimiter">'</span><span class="content">Peter</span><span class="delimiter">'</span></span>, <span class="integer">35</span>, <span class="float">1.88</span>))  <i class="conum" data-value="2"></i><b>(2)</b>
My name <span class="keyword">is</span> Peter, I am <span class="integer">35</span> years old <span class="keyword">and</span> <span class="float">1.88</span> m tall.

In [<span class="integer">27</span>]: repl = <span class="string"><span class="delimiter">"</span><span class="content">My name is {:s}, I am {:d} years old and {:4.2f} m tall.</span><span class="delimiter">"</span></span>  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">28</span>]: print(repl.format(<span class="string"><span class="delimiter">'</span><span class="content">Peter</span><span class="delimiter">'</span></span>, <span class="integer">35</span>, <span class="float">1.88</span>))  <i class="conum" data-value="4"></i><b>(4)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Defines a string template the "old" way.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Prints the template with the values replaced the "old" way.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Defines a string template the "new" way.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Prints the template with the values replaced the "new" way.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_data_structures">Data Structures</h4>
<div class="paragraph">
<p><code>tuple</code> objects are a light weight data structure. These 
are immutable collections of other objects and are constructed by 
objects separated by commas — with or without parentheses.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: t1 = (a, b, st)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: t1  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">2</span>]: (<span class="integer">3</span>, <span class="float">5.0</span>, <span class="string"><span class="delimiter">'</span><span class="content">Python Trading</span><span class="delimiter">'</span></span>)

In [<span class="integer">3</span>]: <span class="predefined">type</span>(t1)
Out[<span class="integer">3</span>]: <span class="predefined">tuple</span>

In [<span class="integer">4</span>]: t2 = st, b, a  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">4</span>]:

In [<span class="integer">5</span>]: t2
Out[<span class="integer">5</span>]: (<span class="string"><span class="delimiter">'</span><span class="content">Python Trading</span><span class="delimiter">'</span></span>, <span class="float">5.0</span>, <span class="integer">3</span>)

In [<span class="integer">6</span>]: <span class="predefined">type</span>(t2)
Out[<span class="integer">6</span>]: <span class="predefined">tuple</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Constructs a <code>tuple</code> object with parentheses.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Prints out the <code>str</code> representation.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Constructs a <code>tuple</code> object without parentheses.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Nested structures are also possible.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: t = (t1, t2)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: t
Out[<span class="integer">2</span>]: ((<span class="integer">3</span>, <span class="float">5.0</span>, <span class="string"><span class="delimiter">'</span><span class="content">Python Trading</span><span class="delimiter">'</span></span>), (<span class="string"><span class="delimiter">'</span><span class="content">Python Trading</span><span class="delimiter">'</span></span>, <span class="float">5.0</span>, <span class="integer">3</span>))

In [<span class="integer">3</span>]: t[<span class="integer">0</span>][<span class="integer">2</span>]  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">3</span>]: <span class="string"><span class="delimiter">'</span><span class="content">Python Trading</span><span class="delimiter">'</span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Constructs a <code>tuple</code> object out of two others.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Accesses the third element of the first object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><code>list</code> objects are mutable collections of other objects 
and are generally constructed by providing a comma separated collection 
of objects in brackets.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">4</span>]: l = [a, b, st]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">5</span>]: l
Out[<span class="integer">5</span>]: [<span class="integer">3</span>, <span class="float">5.0</span>, <span class="string"><span class="delimiter">'</span><span class="content">Python Trading</span><span class="delimiter">'</span></span>]

In [<span class="integer">6</span>]: <span class="predefined">type</span>(l)
Out[<span class="integer">6</span>]: <span class="predefined">list</span>

In [<span class="integer">7</span>]: l.append(s.split()[<span class="integer">3</span>])  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">8</span>]: l
Out[<span class="integer">8</span>]: [<span class="integer">3</span>, <span class="float">5.0</span>, <span class="string"><span class="delimiter">'</span><span class="content">Python Trading</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Trading.</span><span class="delimiter">'</span></span>]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Generates a <code>list</code> objects using brackets.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Appends a new element (final word of <code>s</code>) to the <code>list</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Sorting is a typical operation on <code>list</code> objects which can also be constructed using the <code>list</code> constructor (here applied to a tuple object).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">9</span>]: l = <span class="predefined">list</span>((<span class="string"><span class="delimiter">'</span><span class="content">Z</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Q</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">D</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">J</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">E</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">H</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">5.</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">a</span><span class="delimiter">'</span></span>))  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">10</span>]: l
Out[<span class="integer">10</span>]: [<span class="string"><span class="delimiter">'</span><span class="content">Z</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Q</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">D</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">J</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">E</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">H</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">5.</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">a</span><span class="delimiter">'</span></span>]

In [<span class="integer">11</span>]: l.sort()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">12</span>]: l
Out[<span class="integer">12</span>]: [<span class="string"><span class="delimiter">'</span><span class="content">5.</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">D</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">E</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">H</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">J</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Q</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Z</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">a</span><span class="delimiter">'</span></span>]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Creates a <code>list</code> object from a <code>tuple</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Sorts all elements in-place (i.e. changes the object itself).</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Dictionary (<code>dict</code>) objects are so-called key-value stores and are generally constructed with curly brackets.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: d = {<span class="string"><span class="delimiter">'</span><span class="content">int_obj</span><span class="delimiter">'</span></span>: a, <span class="string"><span class="delimiter">'</span><span class="content">float_obj</span><span class="delimiter">'</span></span>: b, <span class="string"><span class="delimiter">'</span><span class="content">string_obj</span><span class="delimiter">'</span></span>: st}  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: <span class="predefined">type</span>(d)
Out[<span class="integer">2</span>]: <span class="predefined">dict</span>

In [<span class="integer">3</span>]: d
Out[<span class="integer">3</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">float_obj</span><span class="delimiter">'</span></span>: <span class="float">5.0</span>, <span class="string"><span class="delimiter">'</span><span class="content">int_obj</span><span class="delimiter">'</span></span>: <span class="integer">3</span>, <span class="string"><span class="delimiter">'</span><span class="content">string_obj</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">Python Trading</span><span class="delimiter">'</span></span>}

In [<span class="integer">4</span>]: d[<span class="string"><span class="delimiter">'</span><span class="content">float_obj</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">4</span>]: <span class="float">5.0</span>

In [<span class="integer">5</span>]: d[<span class="string"><span class="delimiter">'</span><span class="content">long_obj</span><span class="delimiter">'</span></span>] = <span class="integer">10</span> ** <span class="integer">20</span>  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">6</span>]: d
Out[<span class="integer">6</span>]: {<span class="string"><span class="delimiter">'</span><span class="content">float_obj</span><span class="delimiter">'</span></span>: <span class="float">5.0</span>,
         <span class="string"><span class="delimiter">'</span><span class="content">int_obj</span><span class="delimiter">'</span></span>: <span class="integer">3</span>,
         <span class="string"><span class="delimiter">'</span><span class="content">long_obj</span><span class="delimiter">'</span></span>: <span class="integer">100000000000000000000</span>,
         <span class="string"><span class="delimiter">'</span><span class="content">string_obj</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">Python Trading</span><span class="delimiter">'</span></span>}

In [<span class="integer">7</span>]: d.keys()  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">7</span>]: dict_keys([<span class="string"><span class="delimiter">'</span><span class="content">int_obj</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">long_obj</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">float_obj</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">string_obj</span><span class="delimiter">'</span></span>])

In [<span class="integer">8</span>]: d.values()  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">8</span>]: dict_values([<span class="integer">3</span>, <span class="integer">100000000000000000000</span>, <span class="float">5.0</span>, <span class="string"><span class="delimiter">'</span><span class="content">Python Trading</span><span class="delimiter">'</span></span>])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Creates a <code>dict</code> object using curly brackets and key-value pairs.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Accesses the value given a key.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Adds a new key-value pair.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Selects and shows all keys.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Selects and shows all values.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_control_structures">Control Structures</h4>
<div class="paragraph">
<p>Iterations are very important operations in programming in general 
and financial analytics in particular. Many Python objects are iterable 
which proves rather convenient in many circumstances. Consider the 
special iterator object <code>range</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="predefined">range</span>(<span class="integer">5</span>)  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">1</span>]: <span class="predefined">range</span>(<span class="integer">0</span>, <span class="integer">5</span>)

In [<span class="integer">2</span>]: <span class="predefined">range</span>(<span class="integer">3</span>, <span class="integer">15</span>, <span class="integer">2</span>)  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">2</span>]: <span class="predefined">range</span>(<span class="integer">3</span>, <span class="integer">15</span>, <span class="integer">2</span>)

In [<span class="integer">3</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">5</span>):  <i class="conum" data-value="3"></i><b>(3)</b>
            print(i ** <span class="integer">2</span>, end=<span class="string"><span class="delimiter">'</span><span class="content"> </span><span class="delimiter">'</span></span>)  <i class="conum" data-value="4"></i><b>(4)</b>
<span class="integer">0</span> <span class="integer">1</span> <span class="integer">4</span> <span class="integer">9</span> <span class="integer">16</span>

In [<span class="integer">4</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">3</span>, <span class="integer">15</span>, <span class="integer">2</span>):
            print(i, end=<span class="string"><span class="delimiter">'</span><span class="content"> </span><span class="delimiter">'</span></span>)
<span class="integer">3</span> <span class="integer">5</span> <span class="integer">7</span> <span class="integer">9</span> <span class="integer">11</span> <span class="integer">13</span>

In [<span class="integer">5</span>]: l = [<span class="string"><span class="delimiter">'</span><span class="content">a</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">b</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">d</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">e</span><span class="delimiter">'</span></span>]

In [<span class="integer">6</span>]: <span class="keyword">for</span> _ <span class="keyword">in</span> l:  <i class="conum" data-value="5"></i><b>(5)</b>
            print(_)
a
b
c
d
e

In [<span class="integer">7</span>]: s = <span class="string"><span class="delimiter">'</span><span class="content">Python Trading</span><span class="delimiter">'</span></span>

In [<span class="integer">8</span>]: <span class="keyword">for</span> c <span class="keyword">in</span> s:  <i class="conum" data-value="6"></i><b>(6)</b>
            print(c + <span class="string"><span class="delimiter">'</span><span class="content">|</span><span class="delimiter">'</span></span>, end=<span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>)
P|y|t|h|o|n| |T|r|a|d|i|n|g|</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Creates a <code>range</code> object given a single parameter (end value + 1).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Creates a <code>range</code> object with <code>start</code>, <code>end</code> and <code>step</code> parameter values.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Iterates over a <code>range</code> object and prints the squared values.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Iterates over a <code>list</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Iterates over a <code>str</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><code>while</code> loops are similar to their counterparts in other languages.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: i = <span class="integer">0</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: <span class="keyword">while</span> i &lt; <span class="integer">5</span>:   <i class="conum" data-value="2"></i><b>(2)</b>
            print(i ** <span class="float">0.5</span>, end=<span class="string"><span class="delimiter">'</span><span class="content"> </span><span class="delimiter">'</span></span>)  <i class="conum" data-value="3"></i><b>(3)</b>
            i += <span class="integer">1</span>  <i class="conum" data-value="4"></i><b>(4)</b>
<span class="float">0.0</span> <span class="float">1.0</span> <span class="float">1.4142135623730951</span> <span class="float">1.7320508075688772</span> <span class="float">2.0</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Sets the counter value to 0.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>As long as the value of <code>i</code> is smaller than 5 …​</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>…​ print the square root of <code>i</code> and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>…​ increase the value of <code>i</code> by 1.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_special_python_idioms">Special Python Idioms</h4>
<div class="paragraph">
<p>Python in many places relies on a number of special idioms. Let us start with a rather popular one, the list comprehension.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: lc = [i ** <span class="integer">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">10</span>)]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: lc
Out[<span class="integer">2</span>]: [<span class="integer">0</span>, <span class="integer">1</span>, <span class="integer">4</span>, <span class="integer">9</span>, <span class="integer">16</span>, <span class="integer">25</span>, <span class="integer">36</span>, <span class="integer">49</span>, <span class="integer">64</span>, <span class="integer">81</span>]

In [<span class="integer">3</span>]: <span class="predefined">type</span>(lc)
Out[<span class="integer">3</span>]: <span class="predefined">list</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Creates a new <code>list</code> object based on the list comprehension syntax (<code>for</code> loop in brackets).</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>So-called lambda or anonymous functions are useful helpers in many places.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">math</span>

In [<span class="integer">2</span>]: f = <span class="keyword">lambda</span> x: math.cos(x)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">3</span>]: f(<span class="integer">5</span>)  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">3</span>]: <span class="float">0.2836621854632263</span>

In [<span class="integer">4</span>]: <span class="predefined">list</span>(<span class="predefined">map</span>(<span class="keyword">lambda</span> x: math.cos(x), <span class="predefined">range</span>(<span class="integer">10</span>)))  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">4</span>]: [<span class="float">1.0</span>,
         <span class="float">0.5403023058681398</span>,
         -<span class="float">0.4161468365471424</span>,
         -<span class="float">0.9899924966004454</span>,
         -<span class="float">0.6536436208636119</span>,
         <span class="float">0.2836621854632263</span>,
         <span class="float">0.9601702866503661</span>,
         <span class="float">0.7539022543433046</span>,
         -<span class="float">0.14550003380861354</span>,
         -<span class="float">0.9111302618846769</span>]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Defines a new function <code>f</code> via the <code>lambda</code> syntax.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Evaluates the function <code>f</code> for a value of 5.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Maps the function <code>f</code> to all elements of the <code>range</code> object and creates a <code>list</code> object with the results — which is printed.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>In general, one works with regular Python functions (as opposed to lambda functions) which are constructed as follows.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">5</span>]: <span class="keyword">def</span> <span class="function">f</span>(x):  <i class="conum" data-value="1"></i><b>(1)</b>
            <span class="keyword">return</span> math.exp(x)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">6</span>]: f(<span class="integer">5</span>)
Out[<span class="integer">6</span>]: <span class="float">148.4131591025766</span>

In [<span class="integer">7</span>]: <span class="keyword">def</span> <span class="function">f</span>(*args):  <i class="conum" data-value="3"></i><b>(3)</b>
            <span class="keyword">for</span> arg <span class="keyword">in</span> args:  <i class="conum" data-value="4"></i><b>(4)</b>
                print(arg)  <i class="conum" data-value="5"></i><b>(5)</b>
            <span class="keyword">return</span> <span class="predefined-constant">None</span>  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">8</span>]: f(l)  <i class="conum" data-value="7"></i><b>(7)</b>
Out[<span class="integer">8</span>]: [<span class="string"><span class="delimiter">'</span><span class="content">a</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">b</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">c</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">d</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">e</span><span class="delimiter">'</span></span>]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Regular functions use the <code>def</code> statement for the definition.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>With the <code>return</code> statement one defines what gets return when the execution/evaluation is successful; multiple <code>return</code> statements are possible (e.g. for different cases).</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td><code>*args</code> allows for multiple arguments to be pass as an iterable object (e.g. <code>list</code> object).</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Iterates over the arguments.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Does something with every argument; here: printing.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Returns something, here: <code>None</code>; not necessary for a valid Python function.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Passes the <code>list</code> object <code>l</code> to the function <code>f</code> which interprets it as a list of arguments.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Consider the following function definition which returns different values/strings based on an <code>if-elif-else</code> control structure.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">random</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: a = random.randint(<span class="integer">0</span>, <span class="integer">1000</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: print(<span class="string"><span class="delimiter">"</span><span class="content">Random number is %d</span><span class="delimiter">"</span></span> % a)  <i class="conum" data-value="3"></i><b>(3)</b>
Random number <span class="keyword">is</span> <span class="integer">815</span>

In [<span class="integer">4</span>]: <span class="keyword">def</span> <span class="function">number_decide</span>(number):
           <span class="keyword">if</span> a &lt; <span class="integer">10</span>:  <i class="conum" data-value="4"></i><b>(4)</b>
               <span class="keyword">return</span> <span class="string"><span class="delimiter">"</span><span class="content">Number is single digit.</span><span class="delimiter">"</span></span>
           <span class="keyword">elif</span> <span class="integer">10</span> &lt;= a &lt; <span class="integer">100</span>:  <i class="conum" data-value="5"></i><b>(5)</b>
               <span class="keyword">return</span> <span class="string"><span class="delimiter">"</span><span class="content">Number is double digit.</span><span class="delimiter">"</span></span>
           <span class="keyword">else</span>:  <i class="conum" data-value="6"></i><b>(6)</b>
               <span class="keyword">return</span> <span class="string"><span class="delimiter">"</span><span class="content">Number is triple digit.</span><span class="delimiter">"</span></span>

In [<span class="integer">5</span>]: number_decide(a)  <i class="conum" data-value="7"></i><b>(7)</b>
Out[<span class="integer">5</span>]: <span class="string"><span class="delimiter">'</span><span class="content">Number is triple digit.</span><span class="delimiter">'</span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the <code>random</code> module to draw random numbers.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Draws a random integer between 0 and 1,000.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Print the value of the drawn number.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Checks for a single digit number and if <code>False</code> …​</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>…​ checks for a double digit number and if also <code>False</code> …​</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>…​ the only case that remains is the triple digit case.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Calls the function with the random number value <code>a</code>.</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_numpy">NumPy</h3>
<div class="paragraph">
<p>Many operations in computational finance take place over (large) arrays of numerical data. <code>NumPy</code>
 is a Python package that allows the efficient handling of and operation
 on such data structures. Although quite a mighty library with a wealth 
of functionality, it suffices for the purposes of this course to cover 
the basics of <code>NumPy</code>. A neat online book that is available for free about <code>NumPy</code> is <a href="http://www.labri.fr/perso/nrougier/from-python-to-numpy/" target="_blank">From Python to NumPy</a>. It covers many important aspects in detail that are omitted in the following.</p>
</div>
<div class="sect3">
<h4 id="_regular_ndarray_object">Regular ndarray Object</h4>
<div class="paragraph">
<p>The workhorse is the <code>NumPy</code> <code>ndarray</code> class which provides the data structure for n-dimensional, immutable array objects. You can generate an <code>ndarray</code> object e.g. out of a <code>list</code> object.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: a = np.array(<span class="predefined">range</span>(<span class="integer">24</span>))  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: a  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">3</span>]: array([ <span class="integer">0</span>,  <span class="integer">1</span>,  <span class="integer">2</span>,  <span class="integer">3</span>,  <span class="integer">4</span>,  <span class="integer">5</span>,  <span class="integer">6</span>,  <span class="integer">7</span>,  <span class="integer">8</span>,  <span class="integer">9</span>, <span class="integer">10</span>, <span class="integer">11</span>, <span class="integer">12</span>, <span class="integer">13</span>, <span class="integer">14</span>, <span class="integer">15</span>, <span class="integer">16</span>,
       <span class="integer">17</span>, <span class="integer">18</span>, <span class="integer">19</span>, <span class="integer">20</span>, <span class="integer">21</span>, <span class="integer">22</span>, <span class="integer">23</span>])

In [<span class="integer">4</span>]: b = a.reshape((<span class="integer">4</span>, <span class="integer">6</span>))  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">5</span>]: b  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">5</span>]: array([[ <span class="integer">0</span>,  <span class="integer">1</span>,  <span class="integer">2</span>,  <span class="integer">3</span>,  <span class="integer">4</span>,  <span class="integer">5</span>],
               [ <span class="integer">6</span>,  <span class="integer">7</span>,  <span class="integer">8</span>,  <span class="integer">9</span>, <span class="integer">10</span>, <span class="integer">11</span>],
               [<span class="integer">12</span>, <span class="integer">13</span>, <span class="integer">14</span>, <span class="integer">15</span>, <span class="integer">16</span>, <span class="integer">17</span>],
               [<span class="integer">18</span>, <span class="integer">19</span>, <span class="integer">20</span>, <span class="integer">21</span>, <span class="integer">22</span>, <span class="integer">23</span>]])

In [<span class="integer">6</span>]: c = a.reshape((<span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">4</span>))  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">7</span>]: c  <i class="conum" data-value="7"></i><b>(7)</b>
Out[<span class="integer">7</span>]: array([[[ <span class="integer">0</span>,  <span class="integer">1</span>,  <span class="integer">2</span>,  <span class="integer">3</span>],
                [ <span class="integer">4</span>,  <span class="integer">5</span>,  <span class="integer">6</span>,  <span class="integer">7</span>],
                [ <span class="integer">8</span>,  <span class="integer">9</span>, <span class="integer">10</span>, <span class="integer">11</span>]],

               [[<span class="integer">12</span>, <span class="integer">13</span>, <span class="integer">14</span>, <span class="integer">15</span>],
                [<span class="integer">16</span>, <span class="integer">17</span>, <span class="integer">18</span>, <span class="integer">19</span>],
                [<span class="integer">20</span>, <span class="integer">21</span>, <span class="integer">22</span>, <span class="integer">23</span>]]])

In [<span class="integer">8</span>]: b = np.array(b, dtype=np.float)  <i class="conum" data-value="8"></i><b>(8)</b>

In [<span class="integer">9</span>]: b  <i class="conum" data-value="9"></i><b>(9)</b>
Out[<span class="integer">9</span>]: array([[  <span class="float">0.</span>,   <span class="float">1.</span>,   <span class="float">2.</span>,   <span class="float">3.</span>,   <span class="float">4.</span>,   <span class="float">5.</span>],
               [  <span class="float">6.</span>,   <span class="float">7.</span>,   <span class="float">8.</span>,   <span class="float">9.</span>,  <span class="float">10.</span>,  <span class="float">11.</span>],
               [ <span class="float">12.</span>,  <span class="float">13.</span>,  <span class="float">14.</span>,  <span class="float">15.</span>,  <span class="float">16.</span>,  <span class="float">17.</span>],
               [ <span class="float">18.</span>,  <span class="float">19.</span>,  <span class="float">20.</span>,  <span class="float">21.</span>,  <span class="float">22.</span>,  <span class="float">23.</span>]])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports <code>NumPy</code> as <code>np</code> by convention.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Instantiates a <code>ndarray</code> object from the <code>range</code> object; <code>np.arange</code> could also be used, for instance.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Prints out the values.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Reshapes the object to a two-dimensional one …​</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>…​ and prints out the result.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Reshapes the object to a three-dimensional one …​</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>…​ and prints out the result.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>This changes the <code>dtype</code> of the object to <code>np.float</code> and …​</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>…​ shows the new set of (now floating point) numbers.</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Many Python data structures are designed to be quite general. An example are <code>list</code>
 objects that can be easily manipulated in many ways (adding and 
removing elements, storing other complex data structures, etc.). The 
strategy of <code>NumPy</code> with the regular <code>ndarray</code> 
object is to provide a specialized class that is much better at solving 
problems in a rather specified setting — operating on larger or even 
large numerical data sets. This specialization comes along with 
convenience on the one hand and also often increased speed on the other 
hand.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_vectorized_operations">Vectorized Operations</h4>
<div class="paragraph">
<p>A major strength of <code>NumPy</code> are <em>vectorized operations</em>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">10</span>]: <span class="integer">2</span> * b  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">10</span>]: array([[  <span class="float">0.</span>,   <span class="float">2.</span>,   <span class="float">4.</span>,   <span class="float">6.</span>,   <span class="float">8.</span>,  <span class="float">10.</span>],
                [ <span class="float">12.</span>,  <span class="float">14.</span>,  <span class="float">16.</span>,  <span class="float">18.</span>,  <span class="float">20.</span>,  <span class="float">22.</span>],
                [ <span class="float">24.</span>,  <span class="float">26.</span>,  <span class="float">28.</span>,  <span class="float">30.</span>,  <span class="float">32.</span>,  <span class="float">34.</span>],
                [ <span class="float">36.</span>,  <span class="float">38.</span>,  <span class="float">40.</span>,  <span class="float">42.</span>,  <span class="float">44.</span>,  <span class="float">46.</span>]])

In [<span class="integer">11</span>]: b ** <span class="integer">2</span>  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">11</span>]: array([[   <span class="float">0.</span>,    <span class="float">1.</span>,    <span class="float">4.</span>,    <span class="float">9.</span>,   <span class="float">16.</span>,   <span class="float">25.</span>],
                [  <span class="float">36.</span>,   <span class="float">49.</span>,   <span class="float">64.</span>,   <span class="float">81.</span>,  <span class="float">100.</span>,  <span class="float">121.</span>],
                [ <span class="float">144.</span>,  <span class="float">169.</span>,  <span class="float">196.</span>,  <span class="float">225.</span>,  <span class="float">256.</span>,  <span class="float">289.</span>],
                [ <span class="float">324.</span>,  <span class="float">361.</span>,  <span class="float">400.</span>,  <span class="float">441.</span>,  <span class="float">484.</span>,  <span class="float">529.</span>]])

In [<span class="integer">12</span>]: f = <span class="keyword">lambda</span> x: x ** <span class="integer">2</span> - <span class="integer">2</span> * x + <span class="float">0.5</span>  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">13</span>]: f(a)  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">13</span>]: array([   <span class="float">0.5</span>,   -<span class="float">0.5</span>,    <span class="float">0.5</span>,    <span class="float">3.5</span>,    <span class="float">8.5</span>,   <span class="float">15.5</span>,   <span class="float">24.5</span>,   <span class="float">35.5</span>,
                  <span class="float">48.5</span>,   <span class="float">63.5</span>,   <span class="float">80.5</span>,   <span class="float">99.5</span>,  <span class="float">120.5</span>,  <span class="float">143.5</span>,  <span class="float">168.5</span>,  <span class="float">195.5</span>,
                 <span class="float">224.5</span>,  <span class="float">255.5</span>,  <span class="float">288.5</span>,  <span class="float">323.5</span>,  <span class="float">360.5</span>,  <span class="float">399.5</span>,  <span class="float">440.5</span>,  <span class="float">483.5</span>])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Implements a scalar multiplication on the one-dimensional <code>ndarray</code> object (vector).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates the square of each number of <code>b</code> in vectorized fashion.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Defines a function <code>f</code> via a <code>lambda</code> constructor.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Applies <code>f</code> to the <code>ndarray</code> object <code>a</code> using vectorization.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>In many scenarios, only a (small) part of the data stored in a <code>ndarray</code> object is of interest. NumPy supports basic and advanced slicing and other selection features.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">13</span>]: a[<span class="integer">2</span>:<span class="integer">6</span>]  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">13</span>]: array([<span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">4</span>, <span class="integer">5</span>])

In [<span class="integer">14</span>]: b[<span class="integer">2</span>, <span class="integer">4</span>]  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">14</span>]: <span class="float">16.0</span>

In [<span class="integer">15</span>]: b[<span class="integer">1</span>:<span class="integer">3</span>, <span class="integer">2</span>:<span class="integer">4</span>]  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">15</span>]: array([[  <span class="float">8.</span>,   <span class="float">9.</span>],
                [ <span class="float">14.</span>,  <span class="float">15.</span>]])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Selects 3rd to 6th element.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Selects 3rd row and 5th (final) row</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Picks out the middle square from the <code>b</code> object.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_boolean_operations">Boolean Operations</h4>
<div class="paragraph">
<p>Boolean operations are also supported in many places.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">16</span>]: b &gt; <span class="integer">10</span>  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">16</span>]: array([[<span class="predefined-constant">False</span>, <span class="predefined-constant">False</span>, <span class="predefined-constant">False</span>, <span class="predefined-constant">False</span>, <span class="predefined-constant">False</span>, <span class="predefined-constant">False</span>],
                [<span class="predefined-constant">False</span>, <span class="predefined-constant">False</span>, <span class="predefined-constant">False</span>, <span class="predefined-constant">False</span>, <span class="predefined-constant">False</span>,  <span class="predefined-constant">True</span>],
                [ <span class="predefined-constant">True</span>,  <span class="predefined-constant">True</span>,  <span class="predefined-constant">True</span>,  <span class="predefined-constant">True</span>,  <span class="predefined-constant">True</span>,  <span class="predefined-constant">True</span>],
                [ <span class="predefined-constant">True</span>,  <span class="predefined-constant">True</span>,  <span class="predefined-constant">True</span>,  <span class="predefined-constant">True</span>,  <span class="predefined-constant">True</span>,  <span class="predefined-constant">True</span>]], dtype=<span class="predefined">bool</span>)

In [<span class="integer">17</span>]: b[b &gt; <span class="integer">10</span>]  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">17</span>]: array([ <span class="float">11.</span>,  <span class="float">12.</span>,  <span class="float">13.</span>,  <span class="float">14.</span>,  <span class="float">15.</span>,  <span class="float">16.</span>,  <span class="float">17.</span>,  <span class="float">18.</span>,  <span class="float">19.</span>,  <span class="float">20.</span>,  <span class="float">21.</span>,
                 <span class="float">22.</span>,  <span class="float">23.</span>])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Which numbers are greater than 10?</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Return all those numbers greater than 10.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_ndarray_methods_and_universal_functions">ndarray Methods and Universal Functions</h4>
<div class="paragraph">
<p>Furthermore, <code>ndarray</code> objects have multiple (convenience) methods already built in.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">18</span>]: a.sum()  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">18</span>]: <span class="integer">276</span>

In [<span class="integer">19</span>]: b.mean()  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">19</span>]: <span class="float">11.5</span>

In [<span class="integer">20</span>]: b.mean(axis=<span class="integer">0</span>)  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">20</span>]: array([  <span class="float">9.</span>,  <span class="float">10.</span>,  <span class="float">11.</span>,  <span class="float">12.</span>,  <span class="float">13.</span>,  <span class="float">14.</span>])

In [<span class="integer">21</span>]: b.mean(axis=<span class="integer">1</span>)   <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">21</span>]: array([  <span class="float">2.5</span>,   <span class="float">8.5</span>,  <span class="float">14.5</span>,  <span class="float">20.5</span>])

In [<span class="integer">22</span>]: c.std()  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">22</span>]: <span class="float">6.9221865524317288</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The sum of all elements.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The mean of all elements.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The mean along the first axis.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The mean along the second axis.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The standard deviation over all elements.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Similarly, there is a wealth of so-called <em>universal functions</em> that the <code>NumPy</code> package provides. They are <em>universal</em> in the sense that they can be applied in general to <code>NumPy</code> <code>ndarray</code> objects and to standard numerical Python data types.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">23</span>]: np.sum(a)  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">23</span>]: <span class="integer">276</span>

In [<span class="integer">24</span>]: np.mean(b, axis=<span class="integer">0</span>)  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">24</span>]: array([  <span class="float">9.</span>,  <span class="float">10.</span>,  <span class="float">11.</span>,  <span class="float">12.</span>,  <span class="float">13.</span>,  <span class="float">14.</span>])

In [<span class="integer">25</span>]: np.sin(b).round(<span class="integer">2</span>)  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">25</span>]: array([[ <span class="float">0.</span>  ,  <span class="float">0.84</span>,  <span class="float">0.91</span>,  <span class="float">0.14</span>, -<span class="float">0.76</span>, -<span class="float">0.96</span>],
                [-<span class="float">0.28</span>,  <span class="float">0.66</span>,  <span class="float">0.99</span>,  <span class="float">0.41</span>, -<span class="float">0.54</span>, -<span class="float">1.</span>  ],
                [-<span class="float">0.54</span>,  <span class="float">0.42</span>,  <span class="float">0.99</span>,  <span class="float">0.65</span>, -<span class="float">0.29</span>, -<span class="float">0.96</span>],
                [-<span class="float">0.75</span>,  <span class="float">0.15</span>,  <span class="float">0.91</span>,  <span class="float">0.84</span>, -<span class="float">0.01</span>, -<span class="float">0.85</span>]])

In [<span class="integer">26</span>]: np.sin(<span class="float">4.5</span>)   <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">26</span>]: -<span class="float">0.97753011766509701</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The sum of all elements.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The mean along the first axis.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The sine value for all elements rounded to two digits.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The sine value of a Python <code>float</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>However, you should be aware that applying <code>NumPy</code> universal functions to standard Python data types generally comes with a significant performance burden.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">27</span>]: %time l = [np.sin(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">1000000</span>)]  <i class="conum" data-value="1"></i><b>(1)</b>
CPU times: user <span class="integer">986</span> ms, sys: <span class="float">13.6</span> ms, total: <span class="integer">999</span> ms
Wall time: <span class="integer">999</span> ms

In [<span class="integer">28</span>]: <span class="keyword">import</span> <span class="include">math</span>

In [<span class="integer">29</span>]: %time l = [math.sin(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">1000000</span>)]  <i class="conum" data-value="2"></i><b>(2)</b>
CPU times: user <span class="integer">212</span> ms, sys: <span class="float">15.3</span> ms, total: <span class="integer">227</span> ms
Wall time: <span class="integer">226</span> ms</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>List comprehension using <code>NumPy</code> universal function on Python <code>float</code> objects.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>List comprehension using <code>math</code> function on Python <code>float</code> objects.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>On the other hand, using the vectorized operations from <code>NumPy</code> on <code>ndarray</code> objects is faster than both of the above alternatives which result in <code>list</code> objects. However, the speed advantage often comes at the cost of a larger or even huge memory footprint.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">30</span>]: %time a = np.sin(np.arange(<span class="integer">1000000</span>))  <i class="conum" data-value="1"></i><b>(1)</b>
CPU times: user <span class="float">19.8</span> ms, sys: <span class="float">3.79</span> ms, total: <span class="float">23.6</span> ms
Wall time: <span class="float">22.3</span> ms

In [<span class="integer">31</span>]: <span class="keyword">import</span> <span class="include">sys</span>  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">32</span>]: sys.getsizeof(a)  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">32</span>]: <span class="integer">8000096</span>

In [<span class="integer">33</span>]: a.nbytes  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">34</span>]: <span class="integer">8000000</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Vectorized calculation of the sine values with <code>NumPy</code> — much faster in general.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Imports the <code>sys</code> module with many system-related functions.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Shows the size of the <code>a</code> object in memory.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Shows the number of bytes used to store the data in the <code>a</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Vectorization sometimes is a very useful approach to write concise 
code that is often also much faster than Python code. However, be aware 
of the memory footprint the vectorization can have in many scenarios 
relevant to finance.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_ndarray_creation">ndarray Creation</h4>
<div class="paragraph">
<p>Here, we use the ndarray object constructor <code>arange</code> which yields an <code>ndarray</code> object of integers — below a simple example.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: ai = np.arange(<span class="integer">10</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: ai  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">3</span>]: array([<span class="integer">0</span>, <span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">4</span>, <span class="integer">5</span>, <span class="integer">6</span>, <span class="integer">7</span>, <span class="integer">8</span>, <span class="integer">9</span>])

In [<span class="integer">4</span>]: ai.dtype  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">4</span>]: dtype(<span class="string"><span class="delimiter">'</span><span class="content">int64</span><span class="delimiter">'</span></span>)

In [<span class="integer">5</span>]: af = np.arange(<span class="float">0.5</span>, <span class="float">9.5</span>, <span class="float">0.5</span>)  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">6</span>]: af  <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">6</span>]: array([ <span class="float">0.5</span>,  <span class="float">1.</span> ,  <span class="float">1.5</span>,  <span class="float">2.</span> ,  <span class="float">2.5</span>,  <span class="float">3.</span> ,  <span class="float">3.5</span>,  <span class="float">4.</span> ,  <span class="float">4.5</span>,  <span class="float">5.</span> ,  <span class="float">5.5</span>,
                <span class="float">6.</span> ,  <span class="float">6.5</span>,  <span class="float">7.</span> ,  <span class="float">7.5</span>,  <span class="float">8.</span> ,  <span class="float">8.5</span>,  <span class="float">9.</span> ])

In [<span class="integer">7</span>]: af.dtype  <i class="conum" data-value="7"></i><b>(7)</b>
Out[<span class="integer">7</span>]: dtype(<span class="string"><span class="delimiter">'</span><span class="content">float64</span><span class="delimiter">'</span></span>)

In [<span class="integer">8</span>]: np.linspace(<span class="integer">0</span>, <span class="integer">10</span>, <span class="integer">12</span>)  <i class="conum" data-value="8"></i><b>(8)</b>
Out[<span class="integer">8</span>]: array([  <span class="float">0.</span>        ,   <span class="float">0.90909091</span>,   <span class="float">1.81818182</span>,   <span class="float">2.72727273</span>,
                 <span class="float">3.63636364</span>,   <span class="float">4.54545455</span>,   <span class="float">5.45454545</span>,   <span class="float">6.36363636</span>,
                 <span class="float">7.27272727</span>,   <span class="float">8.18181818</span>,   <span class="float">9.09090909</span>,  <span class="float">10.</span>        ])</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports <code>NumPy</code> as <code>np</code> by convention.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Instantiates a <code>ndarray</code> object via the <code>arange</code> constructor.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Prints out the values.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The resulting <code>dtype</code> is <code>no.int64</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Uses again <code>arange</code>, this time with <code>start</code>, <code>end</code> and <code>step</code> parameters.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Prints out the values.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>The resulting <code>dtype</code> is <code>no.float64</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Uses the <code>linspace</code> constructor which evenly spaces the interval between 0 and 10 in 11 intervals — giving back a <code>ndarray</code> object with 12 values.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_random_numbers">Random Numbers</h4>
<div class="paragraph">
<p>In financial analytics one often needs (pseudo-) random numbers. <code>NumPy</code>
 provides many functions to sample from different distributions. Those 
regularly needed in quantitative finance are the standard normal 
distribution and the Poisson distribution. The respective functions are 
found in the sub-library <code>numpy.random</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">9</span>]: np.random.standard_normal(<span class="integer">10</span>)   <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">9</span>]: array([-<span class="float">0.42007375</span>, -<span class="float">0.7571919</span> ,  <span class="float">0.65052101</span>,  <span class="float">0.87297503</span>, -<span class="float">0.67843515</span>,
                <span class="float">0.07662423</span>,  <span class="float">0.42925573</span>,  <span class="float">0.50328018</span>,  <span class="float">0.64307293</span>, -<span class="float">0.65531064</span>])

In [<span class="integer">10</span>]: np.random.poisson(<span class="float">0.5</span>, <span class="integer">10</span>)  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">10</span>]: array([<span class="integer">0</span>, <span class="integer">2</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">0</span>, <span class="integer">2</span>, <span class="integer">3</span>])

In [<span class="integer">11</span>]: np.random.seed(<span class="integer">1000</span>)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">12</span>]: data = np.random.standard_normal((<span class="integer">5</span>, <span class="integer">100</span>))  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">13</span>]: data[:, :<span class="integer">3</span>]  <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">13</span>]: array([[-<span class="float">0.14741349</span>,  <span class="float">1.39598928</span>,  <span class="float">0.43759958</span>],
                [ <span class="float">1.17955921</span>, -<span class="float">0.30521315</span>, -<span class="float">0.97553291</span>],
                [-<span class="float">1.41095341</span>,  <span class="float">0.48701154</span>,  <span class="float">0.10219963</span>],
                [ <span class="float">0.1289304</span> , -<span class="float">0.01496142</span>, -<span class="float">0.67507069</span>],
                [-<span class="float">0.94308602</span>, -<span class="float">0.60007806</span>,  <span class="float">0.81948577</span>]])

In [<span class="integer">14</span>]: data.mean()  <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">14</span>]: -<span class="float">0.02714981205311327</span>

In [<span class="integer">15</span>]: data.std()  <i class="conum" data-value="7"></i><b>(7)</b>
Out[<span class="integer">15</span>]: <span class="float">1.0016799134894265</span>

In [<span class="integer">16</span>]: data = data - data.mean()  <i class="conum" data-value="8"></i><b>(8)</b>

In [<span class="integer">17</span>]: data.mean()  <i class="conum" data-value="9"></i><b>(9)</b>
Out[<span class="integer">17</span>]: <span class="float">3.552713678800501e-18</span>

In [<span class="integer">18</span>]: data = data / data.std()  <i class="conum" data-value="10"></i><b>(10)</b>

In [<span class="integer">19</span>]: data.std()  <i class="conum" data-value="11"></i><b>(11)</b>
Out[<span class="integer">19</span>]: <span class="float">1.0</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Draws ten standard normally distributed (pseudo-) random numbers.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Draws ten Poisson distributed random numbers.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Fixes the seed value of the random number generator for repeatability.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Generates a two-dimensional <code>ndarray</code> object with random numbers.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Prints a small selection of the numbers.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The mean of all values is close to 0 but not exactly 0.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>The standard deviation is close to 1 but not exactly 1.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>The first moment is corrected in vectorized fashion.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>The mean now is "almost equal" to 0.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>The second moment is corrected in vectorized fashion.</td>
</tr>
<tr>
<td><i class="conum" data-value="11"></i><b>11</b></td>
<td>The standard deviation is now exactly 1.</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_matplotlib">matplotlib</h3>
<div class="paragraph">
<p>At this point, it makes sense to introduce plotting with <a href="http://matplotlib.org/" target="_blank"><code>matplotlib</code></a>, the plotting work horse in the Python ecosystem. We use <code>matplotlib</code> with the settings of another library throughout, namely <a href="http://stanford.edu/%7Emwaskom/software/seaborn/" target="_blank"><code>seaborn</code></a> --- this results in a more modern plotting style. The following code generates <a href="#plot_01">Line plot with <code>matplotlib</code></a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">matplotlib.pyplot</span> <span class="keyword">as</span> plt  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: <span class="keyword">import</span> <span class="include">seaborn</span> <span class="keyword">as</span> sns; sns.set()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: <span class="keyword">import</span> <span class="include">matplotlib</span>  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">4</span>]: matplotlib.rcParams[<span class="string"><span class="delimiter">'</span><span class="content">font.family</span><span class="delimiter">'</span></span>] = <span class="string"><span class="delimiter">'</span><span class="content">serif</span><span class="delimiter">'</span></span>  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">5</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">6</span>]: data = np.random.standard_normal((<span class="integer">5</span>, <span class="integer">100</span>))  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">7</span>]: plt.figure(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="7"></i><b>(7)</b>
        plt.plot(data.cumsum())  <i class="conum" data-value="8"></i><b>(8)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Imports the main plotting library.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Imports <code>seaborn</code> and sets new plot style defaults.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Imports the top level module.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Sets the font to <code>serif</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Imports the <code>NumPy</code> module …​</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>…​ for the generation of an <code>ndarray</code> object with random numbers.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Instantiates a new <code>figure</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>First calculates the cumulative sum over all elements of the <code>ndarray</code> object and then plots the result.</td>
</tr>
</tbody></table>
</div>
<div id="plot_01" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/plot_01.png" alt="plot 01">
</div>
<div class="title">Figure 93. Line plot with <code>matplotlib</code></div>
</div>
<div class="paragraph">
<p>Multiple lines plots in a single <code>figure</code> object are also easy to generate (see <a href="#plot_02">Plot with multiple lines</a>).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">8</span>]: plt.figure(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="1"></i><b>(1)</b>
        plt.plot(data.T.cumsum(axis=<span class="integer">0</span>), label=<span class="string"><span class="delimiter">'</span><span class="content">line</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>
        plt.legend(loc=<span class="integer">0</span>)  <i class="conum" data-value="3"></i><b>(3)</b>
        plt.xlabel(<span class="string"><span class="delimiter">'</span><span class="content">data point</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="4"></i><b>(4)</b>
        plt.ylabel(<span class="string"><span class="delimiter">'</span><span class="content">value</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="5"></i><b>(5)</b>
        plt.title(<span class="string"><span class="delimiter">'</span><span class="content">random series</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="6"></i><b>(6)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Instantiates a new <code>figure</code> objects and defines the size.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Plots five lines by calculating the cumulative sum along the 1st axis; defines a label.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Puts a legend in the optimal position (<code>loc=0</code>).</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Adds a label to the <code>x</code> axis.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Adds a label to the <code>y</code> axis.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Adds a title to the figure.</td>
</tr>
</tbody></table>
</div>
<div id="plot_02" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/plot_02.png" alt="plot 02">
</div>
<div class="title">Figure 94. Plot with multiple lines</div>
</div>
<div class="paragraph">
<p>Other important plotting types are histograms and bar charts. A histogram for all 500 values of the <code>data</code> object is shown as <a href="#plot_03">Histogram of random data</a>. In the code, the <code>flatten</code> method is used to generate a one-dimensional array from the two-dimensional one.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">9</span>]: plt.figure(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))
        plt.hist(data.flatten(), bins=<span class="integer">30</span>)  <i class="conum" data-value="1"></i><b>(1)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Plots the histogram with 30 bins (data groups).</td>
</tr>
</tbody></table>
</div>
<div id="plot_03" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/plot_03.png" alt="plot 03">
</div>
<div class="title">Figure 95. Histogram of random data</div>
</div>
<div class="paragraph">
<p>Finally, consider the bar chart presented in <a href="#plot_04">Histogram of random data</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">10</span>]: plt.figure(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))
         plt.bar(np.arange(<span class="integer">1</span>, <span class="integer">12</span>) - <span class="float">0.25</span>, data[<span class="integer">0</span>, :<span class="integer">11</span>], width=<span class="float">0.5</span>)  <i class="conum" data-value="1"></i><b>(1)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Plots a bar chart based on a small sub-set of the original data set.</td>
</tr>
</tbody></table>
</div>
<div id="plot_04" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/plot_04.png" alt="plot 04">
</div>
<div class="title">Figure 96. Histogram of random data</div>
</div>
<div class="paragraph">
<p>To conclude the introduction to <code>matplotlib</code> consider the ordinary least squares (OLS) regression of the sample data displayed in <a href="#plot_01">Line plot with <code>matplotlib</code></a>. NumPy provides with the two functions <code>polyfit</code> and <code>polyval</code> convenience functions to implement OLS based on simple monomials, i.e. <span class="MathJax_Preview" style="color: inherit;"><span class="MJXp-math" id="MJXp-Span-1180"><span class="MJXp-mrow" id="MJXp-Span-1181"><span class="MJXp-mo" id="MJXp-Span-1182" style="margin-left: 0em; margin-right: 0em;">$</span></span><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1183">x</span><span class="MJXp-mo" id="MJXp-Span-1184" style="margin-left: 0em; margin-right: 0.222em;">,</span><span class="MJXp-msubsup" id="MJXp-Span-1185"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1186" style="margin-right: 0.05em;">x</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-1187" style="vertical-align: 0.5em;">2</span></span><span class="MJXp-mo" id="MJXp-Span-1188" style="margin-left: 0em; margin-right: 0.222em;">,</span><span class="MJXp-msubsup" id="MJXp-Span-1189"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1190" style="margin-right: 0.05em;">x</span><span class="MJXp-mn MJXp-script" id="MJXp-Span-1191" style="vertical-align: 0.5em;">3</span></span><span class="MJXp-mo" id="MJXp-Span-1192" style="margin-left: 0em; margin-right: 0.222em;">,</span><span class="MJXp-mo" id="MJXp-Span-1193" style="margin-left: 0em; margin-right: 0.222em;">.</span><span class="MJXp-mo" id="MJXp-Span-1194" style="margin-left: 0em; margin-right: 0.222em;">.</span><span class="MJXp-mo" id="MJXp-Span-1195" style="margin-left: 0em; margin-right: 0.222em;">.</span><span class="MJXp-mo" id="MJXp-Span-1196" style="margin-left: 0em; margin-right: 0.222em;">,</span><span class="MJXp-msubsup" id="MJXp-Span-1197"><span class="MJXp-mi MJXp-italic" id="MJXp-Span-1198" style="margin-right: 0.05em;">x</span><span class="MJXp-mi MJXp-italic MJXp-script" id="MJXp-Span-1199" style="vertical-align: 0.5em;">n</span></span><span class="MJXp-mrow" id="MJXp-Span-1200"><span class="MJXp-mo" id="MJXp-Span-1201" style="margin-left: 0em; margin-right: 0em;">$</span></span></span></span><span class="MathJax MathJax_Processing" id="MathJax-Element-79-Frame" tabindex="0"></span><script type="math/tex" id="MathJax-Element-79">$x, x^2, x^3, ..., x^n$</script>. For illustration purposes consider linear, quadratic and cubic OLS (see <a href="#plot_05">Linear, quadratic and cubic regression</a>).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">11</span>]: x = np.arange(<span class="predefined">len</span>(data.cumsum()))  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">12</span>]: y = data.cumsum()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">13</span>]: rg1 = np.polyfit(x, y, <span class="integer">1</span>)  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">14</span>]: rg2 = np.polyfit(x, y, <span class="integer">2</span>) <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">15</span>]: rg3 = np.polyfit(x, y, <span class="integer">3</span>)  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">17</span>]: plt.figure(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="6"></i><b>(6)</b>
         plt.plot(x, y, <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>, label=<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="7"></i><b>(7)</b>
         plt.plot(x, np.polyval(rg1, x), <span class="string"><span class="delimiter">'</span><span class="content">b--</span><span class="delimiter">'</span></span>, label=<span class="string"><span class="delimiter">'</span><span class="content">linear</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="8"></i><b>(8)</b>
         plt.plot(x, np.polyval(rg2, x), <span class="string"><span class="delimiter">'</span><span class="content">b-.</span><span class="delimiter">'</span></span>, label=<span class="string"><span class="delimiter">'</span><span class="content">quadratic</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="8"></i><b>(8)</b>
         plt.plot(x, np.polyval(rg3, x), <span class="string"><span class="delimiter">'</span><span class="content">b:</span><span class="delimiter">'</span></span>, label=<span class="string"><span class="delimiter">'</span><span class="content">cubic</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="8"></i><b>(8)</b>
         plt.legend(loc=<span class="integer">0</span>)  <i class="conum" data-value="9"></i><b>(9)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Creates a <code>ndarray</code> object for the <code>x</code> values.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Defines the <code>y</code> values as the cumulative sum of the <code>data</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Linear regression.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Quadratic regression.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Cubic regression.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The new <code>figure</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>The base data.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>The regression results visualized.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>Places a legend.</td>
</tr>
</tbody></table>
</div>
<div id="plot_05" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/plot_05.png" alt="plot 05">
</div>
<div class="title">Figure 97. Linear, quadratic and cubic regression</div>
</div>
</div>
<div class="sect2">
<h3 id="_pandas">pandas</h3>
<div class="paragraph">
<p><code>pandas</code> is a package with which you can manage and 
operate on time series data and other tabular data structures. It allows
 to implement even sophisticated data analytics tasks on larger data 
sets. While the focus lies on in-memory operations, there are also 
multiple options for out-of-memory (on-disk) operations. Although <code>pandas</code> provides a number of different data structures, embodied by powerful classes, the most commonly used structure is the <code>DataFrame</code>
 class which resembles a typical table of a relational (SQL) database 
and is used to manage, for instance, financial time series data. This is
 what we focus on in this section.</p>
</div>
<div class="sect3">
<h4 id="_dataframe_class">DataFrame Class</h4>
<div class="paragraph">
<p>In its most basic form, a <code>DataFrame</code> object is 
characterized by an index, column names and tabular data. To make this 
more specific, consider the following sample (sub-) data set(s).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">numpy</span> <span class="keyword">as</span> np

In [<span class="integer">2</span>]: np.random.seed(<span class="integer">1000</span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">3</span>]: a = np.random.standard_normal((<span class="integer">10</span>, <span class="integer">3</span>)).cumsum(axis=<span class="integer">0</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">4</span>]: index = [<span class="string"><span class="delimiter">'</span><span class="content">2017-1-31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-2-28</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-3-31</span><span class="delimiter">'</span></span>,
                  <span class="string"><span class="delimiter">'</span><span class="content">2017-4-30</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-5-31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-6-30</span><span class="delimiter">'</span></span>,
                  <span class="string"><span class="delimiter">'</span><span class="content">2017-7-31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-8-31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-9-30</span><span class="delimiter">'</span></span>,
                  <span class="string"><span class="delimiter">'</span><span class="content">2017-10-31</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">5</span>]: columns = [<span class="string"><span class="delimiter">'</span><span class="content">no1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">no2</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">no3</span><span class="delimiter">'</span></span>] <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">6</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">7</span>]: df = pd.DataFrame(raw, index=index, columns=columns)  <i class="conum" data-value="6"></i><b>(6)</b>

In [<span class="integer">8</span>]: df  <i class="conum" data-value="7"></i><b>(7)</b>
Out[<span class="integer">8</span>]:
            no1         no2         no3

<span class="integer">2017</span>-<span class="integer">1</span>-<span class="integer">31</span>   -<span class="float">0.804458</span>   <span class="float">0.320932</span>    -<span class="float">0.025483</span>
<span class="integer">2017</span>-<span class="integer">2</span>-<span class="integer">28</span>   -<span class="float">0.160134</span>   <span class="float">0.020135</span>    <span class="float">0.363992</span>
<span class="integer">2017</span>-<span class="integer">3</span>-<span class="integer">31</span>   -<span class="float">0.267572</span>   -<span class="float">0.459848</span>   <span class="float">0.959027</span>
<span class="integer">2017</span>-<span class="integer">4</span>-<span class="integer">30</span>   -<span class="float">0.732239</span>   <span class="float">0.207433</span>    <span class="float">0.152912</span>
<span class="integer">2017</span>-<span class="integer">5</span>-<span class="integer">31</span>   -<span class="float">1.928309</span>   -<span class="float">0.198527</span>   -<span class="float">0.029466</span>
<span class="integer">2017</span>-<span class="integer">6</span>-<span class="integer">30</span>   -<span class="float">1.825116</span>   -<span class="float">0.336949</span>   <span class="float">0.676227</span>
<span class="integer">2017</span>-<span class="integer">7</span>-<span class="integer">31</span>   -<span class="float">0.553321</span>   -<span class="float">1.323696</span>   <span class="float">0.341391</span>
<span class="integer">2017</span>-<span class="integer">8</span>-<span class="integer">31</span>   -<span class="float">0.652803</span>   -<span class="float">0.916504</span>   <span class="float">1.260779</span>
<span class="integer">2017</span>-<span class="integer">9</span>-<span class="integer">30</span>   -<span class="float">0.340685</span>   <span class="float">0.616657</span>    <span class="float">0.710605</span>
<span class="integer">2017</span>-<span class="integer">10</span>-<span class="integer">31</span>  -<span class="float">0.723832</span>   -<span class="float">0.206284</span>   <span class="float">2.310688</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Fixes the seed value of the random number generator.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Creates a <code>ndarray</code> object with random numbers.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Defines a <code>list</code> object with some dates as <code>str</code> objects.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Defines a <code>list</code> object containing the column names (labels).</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Imports <code>pandas</code> …​</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>…​ to instantiate a <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Shows the <code>str</code> (HTML) representation of the new object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><code>DataFrame</code> objects have built in a multitude of basic, advanced and convenience methods, a few of which are illustrated below.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">9</span>]: df.head() <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">9</span>]:
            no1         no2         no3
<span class="integer">2017</span>-<span class="integer">1</span>-<span class="integer">31</span>   -<span class="float">0.804458</span>   <span class="float">0.320932</span>    -<span class="float">0.025483</span>
<span class="integer">2017</span>-<span class="integer">2</span>-<span class="integer">28</span>   -<span class="float">0.160134</span>   <span class="float">0.020135</span>    <span class="float">0.363992</span>
<span class="integer">2017</span>-<span class="integer">3</span>-<span class="integer">31</span>   -<span class="float">0.267572</span>   -<span class="float">0.459848</span>   <span class="float">0.959027</span>
<span class="integer">2017</span>-<span class="integer">4</span>-<span class="integer">30</span>   -<span class="float">0.732239</span>   <span class="float">0.207433</span>    <span class="float">0.152912</span>
<span class="integer">2017</span>-<span class="integer">5</span>-<span class="integer">31</span>   -<span class="float">1.928309</span>   -<span class="float">0.198527</span>   -<span class="float">0.029466</span>

In [<span class="integer">10</span>]: df.tail() <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">10</span>]:
            no1         no2         no3
<span class="integer">2017</span>-<span class="integer">6</span>-<span class="integer">30</span>   -<span class="float">1.825116</span>   -<span class="float">0.336949</span>   <span class="float">0.676227</span>
<span class="integer">2017</span>-<span class="integer">7</span>-<span class="integer">31</span>   -<span class="float">0.553321</span>   -<span class="float">1.323696</span>   <span class="float">0.341391</span>
<span class="integer">2017</span>-<span class="integer">8</span>-<span class="integer">31</span>   -<span class="float">0.652803</span>   -<span class="float">0.916504</span>   <span class="float">1.260779</span>
<span class="integer">2017</span>-<span class="integer">9</span>-<span class="integer">30</span>   -<span class="float">0.340685</span>   <span class="float">0.616657</span>    <span class="float">0.710605</span>
<span class="integer">2017</span>-<span class="integer">10</span>-<span class="integer">31</span>  -<span class="float">0.723832</span>   -<span class="float">0.206284</span>   <span class="float">2.310688</span>

In [<span class="integer">11</span>]: df.index  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">11</span>]: Index([<span class="string"><span class="delimiter">'</span><span class="content">2017-1-31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-2-28</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-3-31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-4-30</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-5-31</span><span class="delimiter">'</span></span>,
                <span class="string"><span class="delimiter">'</span><span class="content">2017-6-30</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-7-31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-8-31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-9-30</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-10-31</span><span class="delimiter">'</span></span>],
                dtype=<span class="string"><span class="delimiter">'</span><span class="content">object</span><span class="delimiter">'</span></span>)


In [<span class="integer">12</span>]: df.columns  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">12</span>]: Index([<span class="string"><span class="delimiter">'</span><span class="content">no1</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">no2</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">no3</span><span class="delimiter">'</span></span>], dtype=<span class="string"><span class="delimiter">'</span><span class="content">object</span><span class="delimiter">'</span></span>)

In [<span class="integer">13</span>]: df.info() <i class="conum" data-value="5"></i><b>(5)</b>
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
Index: <span class="integer">10</span> entries, <span class="integer">2017</span>-<span class="integer">1</span>-<span class="integer">31</span> to <span class="integer">2017</span>-<span class="integer">10</span>-<span class="integer">31</span>
Data columns (total <span class="integer">3</span> columns):
no1    <span class="integer">10</span> non-null float64
no2    <span class="integer">10</span> non-null float64
no3    <span class="integer">10</span> non-null float64
dtypes: float64(<span class="integer">3</span>)
memory usage: <span class="float">320.0</span>+ <span class="predefined">bytes</span>

In [<span class="integer">14</span>]: df.describe()  <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">14</span>]:
        no1         no2         no3
count   <span class="float">10.000000</span>   <span class="float">10.000000</span>   <span class="float">10.000000</span>
mean    -<span class="float">0.798847</span>   -<span class="float">0.227665</span>   <span class="float">0.672067</span>
std     <span class="float">0.607430</span>    <span class="float">0.578071</span>    <span class="float">0.712430</span>
<span class="predefined">min</span>     -<span class="float">1.928309</span>   -<span class="float">1.323696</span>   -<span class="float">0.029466</span>
<span class="integer">25</span>%     -<span class="float">0.786404</span>   -<span class="float">0.429123</span>   <span class="float">0.200031</span>
<span class="integer">50</span>%     -<span class="float">0.688317</span>   -<span class="float">0.202406</span>   <span class="float">0.520109</span>
<span class="integer">75</span>%     -<span class="float">0.393844</span>   <span class="float">0.160609</span>    <span class="float">0.896922</span>
<span class="predefined">max</span>     -<span class="float">0.160134</span>   <span class="float">0.616657</span>    <span class="float">2.310688</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Shows the first five data rows.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Shows the last five data rows.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Prints the <code>index</code> attribute of the object.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Prints the <code>column</code> attribute of the object.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Shows some meta data about the object.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Provides selected summary statistics about the data.</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>While <code>NumPy</code> provides a specialized data structure for multi-dimensional arrays (with numerical data in general), <code>pandas</code> takes specialization one step further to tabular data with the <code>DataFrame</code> class. In particular, <code>pandas</code> is strong in handling (financial) time series data as subsequent sub-sections illustrate.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_numerical_operations">Numerical Operations</h4>
<div class="paragraph">
<p>Numerical operations are in general as easy with <code>DataFrame</code> objects as with NumPy <code>ndarray</code> objects. They are also quite close in terms of syntax.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">15</span>]: df * <span class="integer">2</span> <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">15</span>]:
            no1         no2         no3
<span class="integer">2017</span>-<span class="integer">1</span>-<span class="integer">31</span>   -<span class="float">1.608917</span>   <span class="float">0.641863</span>    -<span class="float">0.050966</span>
<span class="integer">2017</span>-<span class="integer">2</span>-<span class="integer">28</span>   -<span class="float">0.320269</span>   <span class="float">0.040270</span>    <span class="float">0.727983</span>
<span class="integer">2017</span>-<span class="integer">3</span>-<span class="integer">31</span>   -<span class="float">0.535144</span>   -<span class="float">0.919696</span>   <span class="float">1.918054</span>
<span class="integer">2017</span>-<span class="integer">4</span>-<span class="integer">30</span>   -<span class="float">1.464479</span>   <span class="float">0.414866</span>    <span class="float">0.305823</span>
<span class="integer">2017</span>-<span class="integer">5</span>-<span class="integer">31</span>   -<span class="float">3.856618</span>   -<span class="float">0.397054</span>   -<span class="float">0.058932</span>
<span class="integer">2017</span>-<span class="integer">6</span>-<span class="integer">30</span>   -<span class="float">3.650232</span>   -<span class="float">0.673898</span>   <span class="float">1.352453</span>
<span class="integer">2017</span>-<span class="integer">7</span>-<span class="integer">31</span>   -<span class="float">1.106642</span>   -<span class="float">2.647393</span>   <span class="float">0.682782</span>
<span class="integer">2017</span>-<span class="integer">8</span>-<span class="integer">31</span>   -<span class="float">1.305605</span>   -<span class="float">1.833009</span>   <span class="float">2.521557</span>
<span class="integer">2017</span>-<span class="integer">9</span>-<span class="integer">30</span>   -<span class="float">0.681369</span>   <span class="float">1.233314</span>    <span class="float">1.421210</span>
<span class="integer">2017</span>-<span class="integer">10</span>-<span class="integer">31</span>  -<span class="float">1.447664</span>   -<span class="float">0.412568</span>   <span class="float">4.621376</span>

In [<span class="integer">16</span>]: df.std() <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">16</span>]: no1    <span class="float">0.607430</span>
         no2    <span class="float">0.578071</span>
         no3    <span class="float">0.712430</span>
         dtype: float64

In [<span class="integer">17</span>]: df.mean()  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">17</span>]: no1   -<span class="float">0.798847</span>
         no2   -<span class="float">0.227665</span>
         no3    <span class="float">0.672067</span>
         dtype: float64


In [<span class="integer">18</span>]: df.mean(axis=<span class="integer">1</span>)  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">18</span>]: <span class="integer">2017</span>-<span class="integer">1</span>-<span class="integer">31</span>    -<span class="float">0.169670</span>
         <span class="integer">2017</span>-<span class="integer">2</span>-<span class="integer">28</span>     <span class="float">0.074664</span>
         <span class="integer">2017</span>-<span class="integer">3</span>-<span class="integer">31</span>     <span class="float">0.077202</span>
         <span class="integer">2017</span>-<span class="integer">4</span>-<span class="integer">30</span>    -<span class="float">0.123965</span>
         <span class="integer">2017</span>-<span class="integer">5</span>-<span class="integer">31</span>    -<span class="float">0.718767</span>
         <span class="integer">2017</span>-<span class="integer">6</span>-<span class="integer">30</span>    -<span class="float">0.495280</span>
         <span class="integer">2017</span>-<span class="integer">7</span>-<span class="integer">31</span>    -<span class="float">0.511875</span>
         <span class="integer">2017</span>-<span class="integer">8</span>-<span class="integer">31</span>    -<span class="float">0.102843</span>
         <span class="integer">2017</span>-<span class="integer">9</span>-<span class="integer">30</span>     <span class="float">0.328859</span>
         <span class="integer">2017</span>-<span class="integer">10</span>-<span class="integer">31</span>    <span class="float">0.460191</span>
         dtype: float64

In [<span class="integer">19</span>]: np.mean(df) <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">19</span>]: no1   -<span class="float">0.798847</span>
         no2   -<span class="float">0.227665</span>
         no3    <span class="float">0.672067</span>
         dtype: float64</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Scalar (vectorized) multiplication of all elements.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates the column-wise standard deviation …​</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>…​ and mean value; with <code>DataFrame</code> object, column-wise operation are the default.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Calculates the mean value per index value, i.e. row-wise.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Applies a universal function of <code>NumPy</code> to the <code>DataFrame</code> object.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_data_selection">Data Selection</h4>
<div class="paragraph">
<p>Pieces of data can be looked up via different mechanisms.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">20</span>]: df[<span class="string"><span class="delimiter">'</span><span class="content">no2</span><span class="delimiter">'</span></span>] <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">20</span>]: <span class="integer">2017</span>-<span class="integer">1</span>-<span class="integer">31</span>     <span class="float">0.320932</span>
         <span class="integer">2017</span>-<span class="integer">2</span>-<span class="integer">28</span>     <span class="float">0.020135</span>
         <span class="integer">2017</span>-<span class="integer">3</span>-<span class="integer">31</span>    -<span class="float">0.459848</span>
         <span class="integer">2017</span>-<span class="integer">4</span>-<span class="integer">30</span>     <span class="float">0.207433</span>
         <span class="integer">2017</span>-<span class="integer">5</span>-<span class="integer">31</span>    -<span class="float">0.198527</span>
         <span class="integer">2017</span>-<span class="integer">6</span>-<span class="integer">30</span>    -<span class="float">0.336949</span>
         <span class="integer">2017</span>-<span class="integer">7</span>-<span class="integer">31</span>    -<span class="float">1.323696</span>
         <span class="integer">2017</span>-<span class="integer">8</span>-<span class="integer">31</span>    -<span class="float">0.916504</span>
         <span class="integer">2017</span>-<span class="integer">9</span>-<span class="integer">30</span>     <span class="float">0.616657</span>
         <span class="integer">2017</span>-<span class="integer">10</span>-<span class="integer">31</span>   -<span class="float">0.206284</span>
         Name: no2, dtype: float64

In [<span class="integer">21</span>]: df.iloc[<span class="integer">0</span>] <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">21</span>]: no1   -<span class="float">0.804458</span>
         no2    <span class="float">0.320932</span>
         no3   -<span class="float">0.025483</span>
         Name: <span class="integer">2017</span>-<span class="integer">1</span>-<span class="integer">31</span>, dtype: float64

In [<span class="integer">22</span>]: df.iloc[<span class="integer">2</span>:<span class="integer">4</span>]  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">22</span>]:
            no1         no2         no3
<span class="integer">2017</span>-<span class="integer">3</span>-<span class="integer">31</span>   -<span class="float">0.267572</span>   -<span class="float">0.459848</span>   <span class="float">0.959027</span>
<span class="integer">2017</span>-<span class="integer">4</span>-<span class="integer">30</span>   -<span class="float">0.732239</span>   <span class="float">0.207433</span>    <span class="float">0.152912</span>


In [<span class="integer">23</span>]: df.iloc[<span class="integer">2</span>:<span class="integer">4</span>, <span class="integer">1</span>]  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">23</span>]: <span class="integer">2017</span>-<span class="integer">3</span>-<span class="integer">31</span>   -<span class="float">0.459848</span>
         <span class="integer">2017</span>-<span class="integer">4</span>-<span class="integer">30</span>    <span class="float">0.207433</span>
         Name: no2, dtype: float64

In [<span class="integer">24</span>]: df.no3.iloc[<span class="integer">3</span>:<span class="integer">7</span>] <i class="conum" data-value="5"></i><b>(5)</b>
Out[<span class="integer">24</span>]: <span class="integer">2017</span>-<span class="integer">4</span>-<span class="integer">30</span>    <span class="float">0.152912</span>
         <span class="integer">2017</span>-<span class="integer">5</span>-<span class="integer">31</span>   -<span class="float">0.029466</span>
         <span class="integer">2017</span>-<span class="integer">6</span>-<span class="integer">30</span>    <span class="float">0.676227</span>
         <span class="integer">2017</span>-<span class="integer">7</span>-<span class="integer">31</span>    <span class="float">0.341391</span>
         Name: no3, dtype: float64

In [<span class="integer">25</span>]: df.loc[<span class="string"><span class="delimiter">'</span><span class="content">2017-3-31</span><span class="delimiter">'</span></span>] <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">25</span>]: no1   -<span class="float">0.267572</span>
         no2   -<span class="float">0.459848</span>
         no3    <span class="float">0.959027</span>
         Name: <span class="integer">2017</span>-<span class="integer">3</span>-<span class="integer">31</span>, dtype: float64

In [<span class="integer">26</span>]: df.loc[<span class="string"><span class="delimiter">'</span><span class="content">2017-5-31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">no3</span><span class="delimiter">'</span></span>] <i class="conum" data-value="7"></i><b>(7)</b>
Out[<span class="integer">26</span>]: -<span class="float">0.029465774923291221</span>

In [<span class="integer">27</span>]: df[<span class="string"><span class="delimiter">'</span><span class="content">no1</span><span class="delimiter">'</span></span>] + <span class="integer">3</span> * df[<span class="string"><span class="delimiter">'</span><span class="content">no3</span><span class="delimiter">'</span></span>] <i class="conum" data-value="8"></i><b>(8)</b>
Out[<span class="integer">27</span>]: <span class="integer">2017</span>-<span class="integer">1</span>-<span class="integer">31</span>    -<span class="float">0.880907</span>
         <span class="integer">2017</span>-<span class="integer">2</span>-<span class="integer">28</span>     <span class="float">0.931841</span>
         <span class="integer">2017</span>-<span class="integer">3</span>-<span class="integer">31</span>     <span class="float">2.609510</span>
         <span class="integer">2017</span>-<span class="integer">4</span>-<span class="integer">30</span>    -<span class="float">0.273505</span>
         <span class="integer">2017</span>-<span class="integer">5</span>-<span class="integer">31</span>    -<span class="float">2.016706</span>
         <span class="integer">2017</span>-<span class="integer">6</span>-<span class="integer">30</span>     <span class="float">0.203564</span>
         <span class="integer">2017</span>-<span class="integer">7</span>-<span class="integer">31</span>     <span class="float">0.470852</span>
         <span class="integer">2017</span>-<span class="integer">8</span>-<span class="integer">31</span>     <span class="float">3.129533</span>
         <span class="integer">2017</span>-<span class="integer">9</span>-<span class="integer">30</span>     <span class="float">1.791130</span>
         <span class="integer">2017</span>-<span class="integer">10</span>-<span class="integer">31</span>    <span class="float">6.208233</span>
         dtype: float64</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Selects a column by name.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Selects a row by index position.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Selects two rows by index position.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Selects two row values from one column by index positions.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Uses the dot lookup syntax to select a column.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Selects a row by index value.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Selects a single data point by index value and column name.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Implements a vectorized arithmetic operation.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_boolean_operations_2">Boolean Operations</h4>
<div class="paragraph">
<p>Data selection based on Boolean operations is also a strength of pandas.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">28</span>]: df[<span class="string"><span class="delimiter">'</span><span class="content">no3</span><span class="delimiter">'</span></span>] &gt; <span class="float">0.5</span>  <i class="conum" data-value="1"></i><b>(1)</b>
Out[<span class="integer">28</span>]: <span class="integer">2017</span>-<span class="integer">1</span>-<span class="integer">31</span>     <span class="predefined-constant">False</span>
         <span class="integer">2017</span>-<span class="integer">2</span>-<span class="integer">28</span>     <span class="predefined-constant">False</span>
         <span class="integer">2017</span>-<span class="integer">3</span>-<span class="integer">31</span>      <span class="predefined-constant">True</span>
         <span class="integer">2017</span>-<span class="integer">4</span>-<span class="integer">30</span>     <span class="predefined-constant">False</span>
         <span class="integer">2017</span>-<span class="integer">5</span>-<span class="integer">31</span>     <span class="predefined-constant">False</span>
         <span class="integer">2017</span>-<span class="integer">6</span>-<span class="integer">30</span>      <span class="predefined-constant">True</span>
         <span class="integer">2017</span>-<span class="integer">7</span>-<span class="integer">31</span>     <span class="predefined-constant">False</span>
         <span class="integer">2017</span>-<span class="integer">8</span>-<span class="integer">31</span>      <span class="predefined-constant">True</span>
         <span class="integer">2017</span>-<span class="integer">9</span>-<span class="integer">30</span>      <span class="predefined-constant">True</span>
         <span class="integer">2017</span>-<span class="integer">10</span>-<span class="integer">31</span>     <span class="predefined-constant">True</span>
         Name: no3, dtype: <span class="predefined">bool</span>

In [<span class="integer">29</span>]: df[df[<span class="string"><span class="delimiter">'</span><span class="content">no3</span><span class="delimiter">'</span></span>] &gt; <span class="float">0.5</span>]  <i class="conum" data-value="2"></i><b>(2)</b>
Out[<span class="integer">29</span>]:
            no1         no2         no3
<span class="integer">2017</span>-<span class="integer">3</span>-<span class="integer">31</span>   -<span class="float">0.267572</span>   -<span class="float">0.459848</span>   <span class="float">0.959027</span>
<span class="integer">2017</span>-<span class="integer">6</span>-<span class="integer">30</span>   -<span class="float">1.825116</span>   -<span class="float">0.336949</span>   <span class="float">0.676227</span>
<span class="integer">2017</span>-<span class="integer">8</span>-<span class="integer">31</span>   -<span class="float">0.652803</span>   -<span class="float">0.916504</span>   <span class="float">1.260779</span>
<span class="integer">2017</span>-<span class="integer">9</span>-<span class="integer">30</span>   -<span class="float">0.340685</span>   <span class="float">0.616657</span>    <span class="float">0.710605</span>
<span class="integer">2017</span>-<span class="integer">10</span>-<span class="integer">31</span>  -<span class="float">0.723832</span>   -<span class="float">0.206284</span>   <span class="float">2.310688</span>

In [<span class="integer">30</span>]: df[(df.no3 &gt; <span class="float">0.5</span>) &amp; (df.no2 &gt; -<span class="float">0.25</span>)]  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">30</span>]:
            no1         no2         no3
<span class="integer">2017</span>-<span class="integer">9</span>-<span class="integer">30</span>   -<span class="float">0.340685</span>   <span class="float">0.616657</span>    <span class="float">0.710605</span>
<span class="integer">2017</span>-<span class="integer">10</span>-<span class="integer">31</span>  -<span class="float">0.723832</span>   -<span class="float">0.206284</span>   <span class="float">2.310688</span>


In [<span class="integer">31</span>]: df[df.index &gt; <span class="string"><span class="delimiter">'</span><span class="content">2017-4-30</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">31</span>]:
            no1         no2         no3
<span class="integer">2017</span>-<span class="integer">5</span>-<span class="integer">31</span>   -<span class="float">1.928309</span>   -<span class="float">0.198527</span>   -<span class="float">0.029466</span>
<span class="integer">2017</span>-<span class="integer">6</span>-<span class="integer">30</span>   -<span class="float">1.825116</span>   -<span class="float">0.336949</span>   <span class="float">0.676227</span>
<span class="integer">2017</span>-<span class="integer">7</span>-<span class="integer">31</span>   -<span class="float">0.553321</span>   -<span class="float">1.323696</span>   <span class="float">0.341391</span>
<span class="integer">2017</span>-<span class="integer">8</span>-<span class="integer">31</span>   -<span class="float">0.652803</span>   -<span class="float">0.916504</span>   <span class="float">1.260779</span>
<span class="integer">2017</span>-<span class="integer">9</span>-<span class="integer">30</span>   -<span class="float">0.340685</span>   <span class="float">0.616657</span>    <span class="float">0.710605</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Which values in column <code>no3</code> are greater than 0.5?</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Select all such rows for which the condition is <code>True</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Combines two conditions with the <code>&amp;</code> (<code>and</code>) operator; <code>|</code> is the <code>or</code> operator.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Selects all rows with index values greater (later) than '2017-4-30' (here: based on <code>str</code> object sorting).</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect3">
<h4 id="_plotting_with_pandas">Plotting with pandas</h4>
<div class="paragraph">
<p><code>pandas</code> is well integrated with the <code>matplotlib</code> plotting package which makes it really convenient to plot data stored in <code>DataFrame</code> objects. In general, a single method call does the trick already (see <a href="#plot_06">Line plot with <code>pandas</code></a>).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">32</span>]: df.plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="1"></i><b>(1)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Plots the data as a line plot (column-wise) and fixes the figure size.</td>
</tr>
</tbody></table>
</div>
<div id="plot_06" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/plot_06.png" alt="plot 06">
</div>
<div class="title">Figure 98. Line plot with <code>pandas</code></div>
</div>
<div class="paragraph">
<p>The formatting of the index values (dates) is not yet satisfactory. This is due to the fact that they are just <code>str</code> objects and not yet <code>pandas</code> <code>Timestamp</code> objects. After a simple transformation, the formatting looks much nicer as seen in <a href="#plot_07">Line plot with proper date formatting</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">33</span>]: df.index = pd.DatetimeIndex(df.index)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">34</span>]: df.index
Out[<span class="integer">34</span>]: DatetimeIndex([<span class="string"><span class="delimiter">'</span><span class="content">2017-01-31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-02-28</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-03-31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-04-30</span><span class="delimiter">'</span></span>,
                        <span class="string"><span class="delimiter">'</span><span class="content">2017-05-31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-06-30</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-07-31</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-08-31</span><span class="delimiter">'</span></span>,
                        <span class="string"><span class="delimiter">'</span><span class="content">2017-09-30</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">2017-10-31</span><span class="delimiter">'</span></span>],
                       dtype=<span class="string"><span class="delimiter">'</span><span class="content">datetime64[ns]</span><span class="delimiter">'</span></span>, freq=<span class="predefined-constant">None</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">35</span>]: df.plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="3"></i><b>(3)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Generates a <code>DatetimeIndex</code> object out of the original general <code>Index</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The new index now has <code>datetime64</code> as <code>dtype</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Plots the data again, this time resulting in a better formatting of the <code>x</code> axis labels.</td>
</tr>
</tbody></table>
</div>
<div id="plot_07" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/plot_07.png" alt="plot 07">
</div>
<div class="title">Figure 99. Line plot with proper date formatting</div>
</div>
<div class="paragraph">
<p>Histograms are also generated this way. In both cases, pandas takes 
care of the handling of the single columns and automatically generates 
single lines (with respective legend entries, see <a href="#plot_07">Line plot with proper date formatting</a>) and generates respective sub-plots with three different histograms (as in <a href="#plot_08">Histograms with <code>pandas</code></a>).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">36</span>]: df.hist(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="1"></i><b>(1)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Generates a histogram for each column.</td>
</tr>
</tbody></table>
</div>
<div id="plot_08" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/plot_08.png" alt="plot 08">
</div>
<div class="title">Figure 100. Histograms with <code>pandas</code></div>
</div>
</div>
<div class="sect3">
<h4 id="_input_output_operations">Input-Output Operations</h4>
<div class="paragraph">
<p>Yet another strength of <code>pandas</code> is the exporting and importing of data to and from diverse data storage formats (see also <a href="#financial_data">Working with Financial Data</a>). Consider the case of comma separated value (CSV) files.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">37</span>]: df.to_csv(<span class="string"><span class="delimiter">'</span><span class="content">data.csv</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">38</span>]: <span class="keyword">with</span> <span class="predefined">open</span>(<span class="string"><span class="delimiter">'</span><span class="content">data.csv</span><span class="delimiter">'</span></span>) <span class="keyword">as</span> f:
            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():
                print(line)  <i class="conum" data-value="2"></i><b>(2)</b>
,no1,no2,no3
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">31</span>,-<span class="float">0.8044583035248052</span>,<span class="float">0.3209315470898572</span>,-<span class="float">0.025482880472072204</span>
<span class="integer">2017</span>-<span class="octal">02</span>-<span class="integer">28</span>,-<span class="float">0.16013447509799061</span>,<span class="float">0.020134874302836725</span>,<span class="float">0.363991673815235</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">31</span>,-<span class="float">0.26757177678888727</span>,-<span class="float">0.4598482010579319</span>,<span class="float">0.9590271758917922</span>
<span class="integer">2017</span>-<span class="octal">04</span>-<span class="integer">30</span>,-<span class="float">0.7322393029842282</span>,<span class="float">0.2074331059300848</span>,<span class="float">0.15291156544935114</span>
<span class="integer">2017</span>-<span class="octal">05</span>-<span class="integer">31</span>,-<span class="float">1.9283091368170622</span>,-<span class="float">0.19852705542997268</span>,-<span class="float">0.02946577492329122</span>
<span class="integer">2017</span>-<span class="octal">06</span>-<span class="integer">30</span>,-<span class="float">1.8251162427820806</span>,-<span class="float">0.33694904401573555</span>,<span class="float">0.6762266000356951</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="integer">31</span>,-<span class="float">0.5533209663746153</span>,-<span class="float">1.3236963728130973</span>,<span class="float">0.34139114682415433</span>
<span class="integer">2017</span>-<span class="integer">08</span>-<span class="integer">31</span>,-<span class="float">0.6528026643843922</span>,-<span class="float">0.9165042724715742</span>,<span class="float">1.2607786860286034</span>
<span class="integer">2017</span>-<span class="integer">09</span>-<span class="integer">30</span>,-<span class="float">0.34068465431802875</span>,<span class="float">0.6166567928863607</span>,<span class="float">0.7106048210003031</span>
<span class="integer">2017</span>-<span class="integer">10</span>-<span class="integer">31</span>,-<span class="float">0.7238320652023266</span>,-<span class="float">0.20628417055270565</span>,<span class="float">2.310688189060956</span>

In [<span class="integer">39</span>]: from_csv = pd.read_csv(<span class="string"><span class="delimiter">'</span><span class="content">data.csv</span><span class="delimiter">'</span></span>,  <i class="conum" data-value="3"></i><b>(3)</b>
                                index_col=<span class="integer">0</span>,  <i class="conum" data-value="4"></i><b>(4)</b>
                                parse_dates=<span class="predefined-constant">True</span>)  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">40</span>]: from_csv.head()  <i class="conum" data-value="6"></i><b>(6)</b>
Out[<span class="integer">40</span>]:
            no1         no2         no3
<span class="integer">2017</span>-<span class="octal">01</span>-<span class="integer">31</span>  -<span class="float">0.804458</span>   <span class="float">0.320932</span>    -<span class="float">0.025483</span>
<span class="integer">2017</span>-<span class="octal">02</span>-<span class="integer">28</span>  -<span class="float">0.160134</span>   <span class="float">0.020135</span>    <span class="float">0.363992</span>
<span class="integer">2017</span>-<span class="octal">03</span>-<span class="integer">31</span>  -<span class="float">0.267572</span>   -<span class="float">0.459848</span>   <span class="float">0.959027</span>
<span class="integer">2017</span>-<span class="octal">04</span>-<span class="integer">30</span>  -<span class="float">0.732239</span>   <span class="float">0.207433</span>    <span class="float">0.152912</span>
<span class="integer">2017</span>-<span class="octal">05</span>-<span class="integer">31</span>  -<span class="float">1.928309</span>   -<span class="float">0.198527</span>   -<span class="float">0.029466</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Writes the data to disk as a CSV file.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Opens that file and prints the contents line by line.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Reads the data stored in the CSV file into a new <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Defines the first column to be the <code>index</code> column.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Date(time) information in the index column shall be transformed to <code>Timestamp</code> objects.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Prints the first five rows of the new <code>DataFrame</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>However, in general you would store <code>DataFrame</code> objects on disk in more efficient binary formats like <a href="http://hdfgroup.org/" target="_blank">HDF5</a>. <code>pandas</code> in this case wraps the functionality of the <a href="http://pytables.org/" target="_blank"><code>PyTables</code> package</a>. The constructor function to be used is <code>HDFStore</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">41</span>]: h5 = pd.HDFStore(<span class="string"><span class="delimiter">'</span><span class="content">data.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">w</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">42</span>]: h5[<span class="string"><span class="delimiter">'</span><span class="content">df</span><span class="delimiter">'</span></span>] = df  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">43</span>]: h5  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">43</span>]: &lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.io.pytables.HDFStore</span><span class="delimiter">'</span></span>&gt;
         File path: data.h5
         /df            frame        (shape-&gt;[<span class="integer">10</span>,<span class="integer">3</span>])

In [<span class="integer">44</span>]: from_h5 = h5[<span class="string"><span class="delimiter">'</span><span class="content">df</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">45</span>]: h5.close()  <i class="conum" data-value="5"></i><b>(5)</b>

In [<span class="integer">46</span>]: from_h5.tail()  <i class="conum" data-value="6"></i><b>(6)</b>
            no1         no2         no3
<span class="integer">2017</span>-<span class="octal">06</span>-<span class="integer">30</span>  -<span class="float">1.825116</span>   -<span class="float">0.336949</span>   <span class="float">0.676227</span>
<span class="integer">2017</span>-<span class="octal">07</span>-<span class="integer">31</span>  -<span class="float">0.553321</span>   -<span class="float">1.323696</span>   <span class="float">0.341391</span>
<span class="integer">2017</span>-<span class="integer">08</span>-<span class="integer">31</span>  -<span class="float">0.652803</span>   -<span class="float">0.916504</span>   <span class="float">1.260779</span>
<span class="integer">2017</span>-<span class="integer">09</span>-<span class="integer">30</span>  -<span class="float">0.340685</span>   <span class="float">0.616657</span>    <span class="float">0.710605</span>
<span class="integer">2017</span>-<span class="integer">10</span>-<span class="integer">31</span>  -<span class="float">0.723832</span>   -<span class="float">0.206284</span>   <span class="float">2.310688</span>

In [<span class="integer">47</span>]: <span class="error">!</span>rm data.csv data.h5  <i class="conum" data-value="7"></i><b>(7)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Opens a <code>HDFStore</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Writes the <code>DataFrame</code> object (the data) to the <code>HDFStore</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Shows the structure/contents of the database file.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Reads the data into a new <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Closes the <code>HDFStore</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Shows the final five rows of the new <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Removes the CSV and HDF5 files.</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_case_study">Case Study</h3>
<div class="paragraph">
<p>When it comes to financial data, there are useful data retrieval 
functions available that wrap, for example, the Google Finance financial
 data API (see also <a href="#financial_data">Working with Financial Data</a>).
 However, the following code reads historical daily data for the S&amp;P
 500 index and the VIX volatility index from a database file.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">1</span>]: <span class="keyword">import</span> <span class="include">pandas</span> <span class="keyword">as</span> pd  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">2</span>]: h5 = pd.HDFStore(<span class="string"><span class="delimiter">'</span><span class="content">../data/equities.h5</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">r</span><span class="delimiter">'</span></span>)
        spx = pd.DataFrame(h5[<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>])
        spx = spx[(spx.index &gt; <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>) &amp; (spx.index &lt; <span class="string"><span class="delimiter">'</span><span class="content">2017-1-1</span><span class="delimiter">'</span></span>)]  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">3</span>]: spx.info()  <i class="conum" data-value="3"></i><b>(3)</b>
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">1762</span> entries, <span class="integer">2010</span>-<span class="octal">01</span>-<span class="octal">04</span> to <span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">30</span>
Data columns (total <span class="integer">1</span> columns):
^GSPC    <span class="integer">1762</span> non-null float64
dtypes: float64(<span class="integer">1</span>)
memory usage: <span class="float">27.5</span> KB

In [<span class="integer">4</span>]: vix = pd.DataFrame(h5[<span class="string"><span class="delimiter">'</span><span class="content">data</span><span class="delimiter">'</span></span>][<span class="string"><span class="delimiter">'</span><span class="content">^VIX</span><span class="delimiter">'</span></span>])
        vix = vix[(vix.index &gt; <span class="string"><span class="delimiter">'</span><span class="content">2010-1-1</span><span class="delimiter">'</span></span>) &amp; (vix.index &lt; <span class="string"><span class="delimiter">'</span><span class="content">2017-1-1</span><span class="delimiter">'</span></span>)]
        h5.close()  <i class="conum" data-value="4"></i><b>(4)</b>

In [<span class="integer">5</span>]: vix.info() <i class="conum" data-value="5"></i><b>(5)</b>
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">1762</span> entries, <span class="integer">2010</span>-<span class="octal">01</span>-<span class="octal">04</span> to <span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">30</span>
Data columns (total <span class="integer">1</span> columns):
^VIX    <span class="integer">1762</span> non-null float64
dtypes: float64(<span class="integer">1</span>)
memory usage: <span class="float">27.5</span> KB</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Import the <code>pandas</code> package.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Reads historical data for the S&amp;P 500 stock index from a database file.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Shows the meta information for the resulting <code>DataFrame</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Reads historical data for the VIX volatility index and closes the database file.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Shows the meta information for the resulting <code>DataFrame</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Let us combine the respective <code>Close</code> columns into a single <code>DataFrame</code> object. Multiple ways are possible to accomplish this goal.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">6</span>]: spxvix = pd.DataFrame(spx[<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>]).join(vix[<span class="string"><span class="delimiter">'</span><span class="content">^VIX</span><span class="delimiter">'</span></span>])  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">7</span>]: spxvix.info()
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">1762</span> entries, <span class="integer">2010</span>-<span class="octal">01</span>-<span class="octal">04</span> to <span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">30</span>
Data columns (total <span class="integer">2</span> columns):
CloseSPX    <span class="integer">1762</span> non-null float64
CloseVIX    <span class="integer">1762</span> non-null float64
dtypes: float64(<span class="integer">2</span>)
memory usage: <span class="float">41.3</span> KB

In [<span class="integer">8</span>]: spxvix = pd.merge(pd.DataFrame(spx[<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>]),
                  pd.DataFrame(vix[<span class="string"><span class="delimiter">'</span><span class="content">^VIX</span><span class="delimiter">'</span></span>]),
                  left_index=<span class="predefined-constant">True</span>,  <span class="comment"># merge on left index</span>
                  right_index=<span class="predefined-constant">True</span>,  <span class="comment"># merge on right index</span>
                 )  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">9</span>]: spxvix.info()
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">1762</span> entries, <span class="integer">2010</span>-<span class="octal">01</span>-<span class="octal">04</span> to <span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">30</span>
Data columns (total <span class="integer">2</span> columns):
CloseSPX    <span class="integer">1762</span> non-null float64
CloseVIX    <span class="integer">1762</span> non-null float64
dtypes: float64(<span class="integer">2</span>)
memory usage: <span class="float">41.3</span> KB

In [<span class="integer">10</span>]: spxvix = pd.DataFrame({<span class="string"><span class="delimiter">'</span><span class="content">SPX</span><span class="delimiter">'</span></span>: spx[<span class="string"><span class="delimiter">'</span><span class="content">^GSPC</span><span class="delimiter">'</span></span>],
                       <span class="string"><span class="delimiter">'</span><span class="content">VIX</span><span class="delimiter">'</span></span>: vix[<span class="string"><span class="delimiter">'</span><span class="content">^VIX</span><span class="delimiter">'</span></span>]},
                       index=spx.index) <i class="conum" data-value="3"></i><b>(3)</b>

In [<span class="integer">11</span>]: spxvix.info()
&lt;<span class="keyword">class</span> <span class="string"><span class="delimiter">'</span><span class="content">pandas.core.frame.DataFrame</span><span class="delimiter">'</span></span>&gt;
DatetimeIndex: <span class="integer">1762</span> entries, <span class="integer">2010</span>-<span class="octal">01</span>-<span class="octal">04</span> to <span class="integer">2016</span>-<span class="integer">12</span>-<span class="integer">30</span>
Data columns (total <span class="integer">2</span> columns):
SPX    <span class="integer">1762</span> non-null float64
VIX    <span class="integer">1762</span> non-null float64
dtypes: float64(<span class="integer">2</span>)
memory usage: <span class="float">41.3</span> KB</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Uses the <code>join</code> method to combine the relevant data sub-sets.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Uses the <code>merge</code> function for the combination.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Uses the <code>DataFrame</code> constructor in combination with a <code>dict</code> as input.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Having available the combined data in a single object makes visual analysis straightforward (see <a href="#example_01">Historical end-of-day closing values for the S&amp;P 500 and VIX</a>).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">12</span>]: spxvix.plot(figsize=(<span class="integer">10</span>, <span class="integer">6</span>), subplots=<span class="predefined-constant">True</span>)  <i class="conum" data-value="1"></i><b>(1)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Plots the two data sub-sets into separate sub-plots.</td>
</tr>
</tbody></table>
</div>
<div id="example_01" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/example_01.png" alt="example 01">
</div>
<div class="title">Figure 101. Historical end-of-day closing values for the S&amp;P 500 and VIX</div>
</div>
<div class="paragraph">
<p>pandas also allows vectorized operations on whole <code>DataFrame</code> objects. The following code calculates the log returns over the two columns of the <code>spxvix</code> object simultaneously in vectorized fashion. The <code>shift</code> method shifts the data set by the number of index values as provided (in this particular by one trading day).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">13</span>]: rets = np.log(spxvix / spxvix.shift(<span class="integer">1</span>))  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">14</span>]: rets = rets.dropna()  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">15</span>]: rets.head  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">15</span>]:
            SPX         VIX
Date
<span class="integer">2010</span>-<span class="octal">01</span>-<span class="octal">05</span>  <span class="float">0.003111</span>    -<span class="float">0.035038</span>
<span class="integer">2010</span>-<span class="octal">01</span>-<span class="octal">06</span>  <span class="float">0.000545</span>    -<span class="float">0.009868</span>
<span class="integer">2010</span>-<span class="octal">01</span>-<span class="octal">07</span>  <span class="float">0.003993</span>    -<span class="float">0.005233</span>
<span class="integer">2010</span>-<span class="octal">01</span>-<span class="integer">08</span>  <span class="float">0.002878</span>    -<span class="float">0.050024</span>
<span class="integer">2010</span>-<span class="octal">01</span>-<span class="integer">11</span>  <span class="float">0.001745</span>    -<span class="float">0.032514</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the log returns for the two time series in fully vectorized fashion.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Drops all rows containing <code>NaN</code> values ("not a number").</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Shows the first five rows of the new <code>DataFrame</code> object.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Consider the plot in <a href="#example_02">Scatter plot of S&amp;P 500 and VIX returns with linear regression line</a>
 showing the VIX log returns against the SPX log returns in a scatter 
plot with a linear regression. It illustrates a strong negative 
correlation between the two indexes.</p>
</div>
<div class="paragraph">
<p>source,python]</p>
</div>
<div class="listingblock">
<div class="content">
<pre>In [16]: rg = np.polyfit(rets['SPX'], rets['VIX'], 1)  <i class="conum" data-value="1"></i><b>(1)</b>

In [17]: rets.plot(kind='scatter', x='SPX', y='VIX',
                   style='.', figsize=(10, 6))  <i class="conum" data-value="2"></i><b>(2)</b>
         plt.plot(rets['SPX'], np.polyval(rg, rets['SPX']), 'r.-')  <i class="conum" data-value="3"></i><b>(3)</b></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Implements a linear regression on the two log return data sets.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Creates a scatter plot of the log returns.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Plots the linear regression line in the existing scatter plot.</td>
</tr>
</tbody></table>
</div>
<div id="example_02" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/example_02.png" alt="example 02">
</div>
<div class="title">Figure 102. Scatter plot of S&amp;P 500 and VIX returns with linear regression line</div>
</div>
<div class="paragraph">
<p>Having financial time series data stored in a pandas <code>DataFrame</code> object makes the calculation of typical statistics straightforward.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">18</span>]: ret = rets.mean() * <span class="integer">252</span>  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">19</span>]: ret
Out[<span class="integer">19</span>]: SPX    <span class="float">0.097465</span>
         VIX   -<span class="float">0.050918</span>
         dtype: float64


In [<span class="integer">20</span>]: vol = rets.std() * math.sqrt(<span class="integer">252</span>)  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">21</span>]: vol
Out[<span class="integer">21</span>]: SPX    <span class="float">0.155578</span>
         VIX    <span class="float">1.190614</span>
         dtype: float64

In [<span class="integer">22</span>]: (ret - <span class="float">0.01</span>) / vol  <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">22</span>]: SPX    <span class="float">0.562193</span>
         VIX   -<span class="float">0.051165</span>
         dtype: float64</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Calculates the annualized mean return for the two indexes.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates the annualized standard deviation.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Calculates the Sharpe ratio for a risk-free short rate of 1%.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The maximum drawdown, which we only calculate for the S&amp;P 500 
index, is a bit more involved. For its calculation, we use the <code>cummax</code>
 method which records the running, historical maximum of the time series
 up to a certain date. Consider the code below that generates the plot 
in <a href="#example_03">Historical closing prices of S&amp;P 500 index and running maximum</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">12</span>]: plt.figure(figsize=(<span class="integer">10</span>, <span class="integer">6</span>))  <i class="conum" data-value="1"></i><b>(1)</b>
         spxvix[<span class="string"><span class="delimiter">'</span><span class="content">SPX</span><span class="delimiter">'</span></span>].plot(label=<span class="string"><span class="delimiter">'</span><span class="content">S&amp;P 500</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="2"></i><b>(2)</b>
         spxvix[<span class="string"><span class="delimiter">'</span><span class="content">SPX</span><span class="delimiter">'</span></span>].cummax().plot(label=<span class="string"><span class="delimiter">'</span><span class="content">running maximum</span><span class="delimiter">'</span></span>)  <i class="conum" data-value="3"></i><b>(3)</b>
         plt.legend(loc=<span class="integer">0</span>)  <i class="conum" data-value="4"></i><b>(4)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Instantiates a new <code>figure</code> object.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Plots the historical closing values for the S&amp;P 500 index.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Calculates and plots the running maximum over time.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Places a legend on the canvas.</td>
</tr>
</tbody></table>
</div>
<div id="example_03" class="imageblock" style="float: true">
<div class="content">
<img src="Python%20for%20Algorithmic%20Trading_files/example_03.png" alt="example 03">
</div>
<div class="title">Figure 103. Historical closing prices of S&amp;P 500 index and running maximum</div>
</div>
<div class="paragraph">
<p>The <em>absolute maximum drawdown</em> is the largest difference 
between the running maximum and the current index level — in our 
particular case it is about 300 index points. The <em>relative maximum drawdown</em> might sometimes be a bit more meaningful. It is here a value of about 20%.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">13</span>]: adrawdown = spxvix[<span class="string"><span class="delimiter">'</span><span class="content">SPX</span><span class="delimiter">'</span></span>].cummax() - spxvix[<span class="string"><span class="delimiter">'</span><span class="content">SPX</span><span class="delimiter">'</span></span>]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">14</span>]: adrawdown
Out[<span class="integer">14</span>]: <span class="float">301.74011200000018</span>


In [<span class="integer">15</span>]: rdrawdown = ((spxvix[<span class="string"><span class="delimiter">'</span><span class="content">SPX</span><span class="delimiter">'</span></span>].cummax() - spxvix[<span class="string"><span class="delimiter">'</span><span class="content">SPX</span><span class="delimiter">'</span></span>]) /
                       spxvix[<span class="string"><span class="delimiter">'</span><span class="content">SPX</span><span class="delimiter">'</span></span>].cummax())   <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">16</span>]: rdrawdown.max()
Out[<span class="integer">16</span>]: <span class="float">0.19388242085950988</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Derives the <em>absolute</em> maximum drawdown.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Derives the <em>relative</em> maximum drawdown.</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The longest drawdown period is calculated as follows. The code below 
selects all those data points where the drawdown is zero (i.e. where a 
new maximum reached). It then calculates the difference between two 
consecutive index values (i.e. trading dates) for which the drawdown is 
zero and takes the maximum value. Given the data set we are analyzing, 
the longest drawdown period is 407 days.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="python">In [<span class="integer">17</span>]: temp = adrawdown[adrawdown == <span class="integer">0</span>]  <i class="conum" data-value="1"></i><b>(1)</b>

In [<span class="integer">18</span>]: periods_spx = (temp.index[<span class="integer">1</span>:].to_pydatetime() -
                        temp.index[:-<span class="integer">1</span>].to_pydatetime())  <i class="conum" data-value="2"></i><b>(2)</b>

In [<span class="integer">19</span>]: periods_spx[<span class="integer">50</span>:<span class="integer">60</span>]   <i class="conum" data-value="3"></i><b>(3)</b>
Out[<span class="integer">19</span>]: array([datetime.timedelta(<span class="integer">67</span>), datetime.timedelta(<span class="integer">1</span>),
                datetime.timedelta(<span class="integer">1</span>), datetime.timedelta(<span class="integer">1</span>),
                datetime.timedelta(<span class="integer">301</span>), datetime.timedelta(<span class="integer">3</span>),
                datetime.timedelta(<span class="integer">1</span>), datetime.timedelta(<span class="integer">2</span>),
                datetime.timedelta(<span class="integer">12</span>), datetime.timedelta(<span class="integer">2</span>)], dtype=<span class="predefined">object</span>)

In [<span class="integer">20</span>]: <span class="predefined">max</span>(periods_spx)  <i class="conum" data-value="4"></i><b>(4)</b>
Out[<span class="integer">20</span>]: datetime.timedelta(<span class="integer">417</span>)</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody><tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Picks out all index positions where the drawdown is 0.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Calculates the <code>timedelta</code> values between all such index positions.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Shows a select few of these values.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Picks out the maximum value for the result.</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_conclusions_12">Conclusions</h3>
<div class="paragraph">
<p>This appendix provides a concise, introductory overview of selected topics relevant to apply Python, <code>NumPy</code>, <code>matplotlib</code> and <code>pandas</code>
 in the context of algorithmic trading. It cannot, of course, replace a 
thorough training and practical experience. But it helps those who want 
to get started quickly and who are willing to dive deeper into the 
details where necessary.</p>
</div>
</div>
<div class="sect2">
<h3 id="_further_resources_12">Further Resources</h3>
<div class="paragraph">
<p>A valuable, free source for the topics covered in this appendix are the <a href="http://www.scipy-lectures.org/" target="_blank">Scipy Lecture Notes</a> that are available in multiple electronic formats. Also freely available is the neat online book <a href="http://www.labri.fr/perso/nrougier/from-python-to-numpy/" target="_blank">From Python to NumPy</a> on <code>NumPy</code> by Nicolas Rougier.</p>
</div>
<div class="paragraph">
<p>Books cited in this appendix:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Hilpisch, Yves (2014): <em>Python for Finance</em>. O’Reilly, Bejing et al.</p>
</li>
<li>
<p>Hilpisch, Yves (2017): <em>Listed Volatility and Variance Derivatives</em>. Wiley Finance.</p>
</li>
<li>
<p>McKinney, Wes (2017): <em>Python for Data Analysis</em>. 2nd ed., O’Reilly, Bejing et al.</p>
</li>
<li>
<p>VanderPlas, Jake (2017): <em>Python Data Science Handbook</em>. O’Reilly, Bejing et al.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="author">Author Biography</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dr. Yves J. Hilpisch is founder and managing partner of <a href="http://tpq.io/" target="_blank">The Python Quants</a>,
 a group focusing on the use of open source technologies for financial 
data science, algorithmic trading and computational finance. He is the 
author of the books</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://pff.tpq.io/" target="_blank">Python for Finance</a> (O’Reilly, 2014),</p>
</li>
<li>
<p><a href="http://dawp.tpq.io/" target="_blank">Derivatives Analytics with Python</a> (Wiley, 2015) and</p>
</li>
<li>
<p><a href="http://lvvd.tpq.io/" target="_blank">Listed Volatility and Variance Derivatives</a> (Wiley, 2017).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Yves lectures on computational finance at the <a href="http://cqf.com/" target="_blank">CQF Program</a>, on data science at <a href="http://htwsaar.de/" target="_blank">htw saar University of Applied Sciences</a>
 and is the director for the online training program leading to the 
first Python for Finance University Certificate (awarded by htw saar).</p>
</div>
<div class="paragraph">
<p>Yves has written the financial analytics library <a href="http://dx-analytics.com/" target="_blank">DX Analytics</a>
 and organizes meetups and conferences about Python for quantitative 
finance in Frankfurt, London and New York. He has also given keynote 
speeches at technology conferences in the United States, Europe and 
Asia.</p>
</div>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. "Too Squid to Fail.`" The Economist, 29. October 2016.
</div>
<div class="footnote" id="_footnote_2">
<a href="#_footnoteref_2">2</a>. For example, <code>list</code> objects 
are not only mutable, i.e. they can be changed in size, they can also 
contain almost any other kind of Python object, like <code>int</code>, <code>float</code>, <code>tuple</code> objects or <code>list</code> objects themselves.
</div>
<div class="footnote" id="_footnote_3">
<a href="#_footnoteref_3">3</a>. See <a href="http://erikdemaine.org/papers/Rubik_ESA2011/paper.pdf" target="_blank">The Mathematics of the Rubik’s Cube</a> or <a href="http://erikdemaine.org/papers/Rubik_ESA2011/paper.pdf" target="_blank">Algorithms for Solving Rubik’s Cube.</a>
</div>
<div class="footnote" id="_footnote_4">
<a href="#_footnoteref_4">4</a>. See Hilpisch (2015) for a detailed analysis of delta hedging strategies for European and American options using Python.
</div>
<div class="footnote" id="_footnote_5">
<a href="#_footnoteref_5">5</a>. See the book by Lewis (2015) for a non-technical introduction to HFT.
</div>
<div class="footnote" id="_footnote_6">
<a href="#_footnoteref_6">6</a>. Source: “66% of Fund Managers Can’t Match S&amp;P Results.” USA Today, March 14, 2016.
</div>
<div class="footnote" id="_footnote_7">
<a href="#_footnoteref_7">7</a>. Annualized performance (above the short
 term interest rate) and risk measures for hedge fund categories 
comprising a total of 9,000 hedge funds over the period from June 1996 
to December 2014.
</div>
<div class="footnote" id="_footnote_8">
<a href="#_footnoteref_8">8</a>. See the book by Kissel (2013) for an 
overview of topics related to algorithmic trading, the book by Chan 
(2013) for an in-depth discussion of momentum and mean-reversion 
strategies, or the book by Narang (2013) for a coverage of quantitative 
and HFT trading in general.
</div>
<div class="footnote" id="_footnote_9">
<a href="#_footnoteref_9">9</a>. At the time of this writing, Python 3.6 had just been released.
</div>
<div class="footnote" id="_footnote_10">
<a href="#_footnoteref_10">10</a>. On Windows, the command to activate the new environment would only be <code>activate py27</code> — dropping the <code>source</code>.
</div>
<div class="footnote" id="_footnote_11">
<a href="#_footnoteref_11">11</a>. In the official documentation you 
find the following explanation: “Python 'Virtual Environments' allow 
Python packages to be installed in an isolated location for a particular
 application, rather than being installed globally.” See the <a href="https://packaging.python.org/installing/#creating-virtual-environments" target="_blank">Creating Virtual Environments page</a>.
</div>
<div class="footnote" id="_footnote_12">
<a href="#_footnoteref_12">12</a>. See the book Matthias and Kane (2015) for a comprehensive introduction to the Docker technology.
</div>
<div class="footnote" id="_footnote_13">
<a href="#_footnoteref_13">13</a>. For a concise introduction to and quick overview of <code>bash</code> scripting consult the book Robbins (2016).
</div>
<div class="footnote" id="_footnote_14">
<a href="#_footnoteref_14">14</a>. With such a self-generated certificate you might need to add a security exception when prompted by the browser.
</div>
<div class="footnote" id="_footnote_15">
<a href="#_footnoteref_15">15</a>. If you need assistance, visit the <a href="https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-digitalocean-droplets" target="_blank">How to Use SSH Keys page</a>.
</div>
<div class="footnote" id="_footnote_16">
<a href="#_footnoteref_16">16</a>. Source: “Bad Election Day Forecasts 
Deal Blow to Data Science — Prediction models suffered from narrow data,
 faulty algorithms and human foibles.” Wall Street Journal, 09. November
 2016.
</div>
<div class="footnote" id="_footnote_17">
<a href="#_footnoteref_17">17</a>. The service has been stopped without 
further explanations by Yahoo! Finance on 17. May 2017. Yahoo! commented
 that there would be no plans to resume the service in the future.
</div>
<div class="footnote" id="_footnote_18">
<a href="#_footnoteref_18">18</a>. Of course, multiple <code>DataFrame</code> objects could also be stored in a single <code>HDFStore</code> object.
</div>
<div class="footnote" id="_footnote_19">
<a href="#_footnoteref_19">19</a>. All values reported here are from the
 author’s MacBook Pro with Intel i7 quad core processor, 16 GB of random
 access memory (RAM) and a 512 GB solid state drive (SSD).
</div>
<div class="footnote" id="_footnote_20">
<a href="#_footnoteref_20">20</a>. <code>pandas</code> also supports database connections via <code>SQLAlchemy</code>, a Python abstraction layer package for diverse relational databases (refer to the <a href="http://www.sqlalchemy.org/" target="_blank"><code>SQLAlchemy</code> home page</a>). This in turn allows for the use of, for example, <a href="https://www.mysql.com/" target="_blank"><code>MySQL</code></a> as the relational database backend.
</div>
<div class="footnote" id="_footnote_21">
<a href="#_footnoteref_21">21</a>. Source: "Does the Past Predict the Future." The Economist, 23. September 2009.
</div>
<div class="footnote" id="_footnote_22">
<a href="#_footnoteref_22">22</a>. For more on <code>datetime</code> and <code>timedelta</code> objects refer to Appendix C of Hilpisch (2014).
</div>
<div class="footnote" id="_footnote_23">
<a href="#_footnoteref_23">23</a>. The data used and shown in the figure is from 11. November 2016. This data is not accessible any more in 2017 via the API.
</div>
<div class="footnote" id="_footnote_24">
<a href="#_footnoteref_24">24</a>. The books by Guido and Müller (2016) and VanderPlas (2016) provide practical introductions to machine learning with Python.
</div>
<div class="footnote" id="_footnote_25">
<a href="#_footnoteref_25">25</a>. See, for example, the discussion in Invesco (2016): “The Tale of 10 Days”.
</div>
<div class="footnote" id="_footnote_26">
<a href="#_footnoteref_26">26</a>. When speaking of <em>simultaneously</em> or <em>at the same time</em>,
 this is meant in a theoretical, idealized sense. In practical 
applications, different distances between the sending and receiving 
sockets, network speeds and other factors affect the exact retrieval 
time per subscriber socket.
</div>
<div class="footnote" id="_footnote_27">
<a href="#_footnoteref_27">27</a>. Not all markets are open 24 hours, 7 
days per week, and for sure not all financial instruments are traded 
around the clock. However, cryptocurrency markets, e.g. for Bitcoin, 
indeed operate around the clock, constantly creating new data that needs
 to be digested in real-time by players active in these markets.
</div>
<div class="footnote" id="_footnote_28">
<a href="#_footnoteref_28">28</a>. CFDs are derivative products that 
derive their payoff based on the development of prices for other 
instruments. In addition, trading activity (liquidity) influences the 
price of CFDs. Although a CFD might be based on the S&amp;P 500 index, 
it is a completely different product issued, quoted and supported by 
Oanda (or a similar provider). This brings along certain risks that 
traders should be aware of. A recent event that illustrates this issue 
is the Swiss Franc event that led to a number of insolvencies in the 
online broker space. See, for instance, the article <a href="http://www.forbes.com/sites/timworstall/2015/01/16/currency-brokers-fall-over-like-dominoes-after-snb-decison-on-swiss-franc/" target="_blank">Currency Brokers Fall Over Like Dominoes After SNB Decison On Swiss Franc</a>.
</div>
<div class="footnote" id="_footnote_29">
<a href="#_footnoteref_29">29</a>. At the time of this writing, Oanda 
has introduced a new version of the API which comes with all new 
contracts. However, the capabilities are not yet fully available and the
 documentation (of the respective Python package) is only rudimentary. 
Therefore, the exposition in this chapter is based on the original API 
which is quite powerful and easy to access with the respective Python 
wrapper package. It might be necessary for new accounts to get this API 
“manually” enabled by Oanda.
</div>
<div class="footnote" id="_footnote_30">
<a href="#_footnoteref_30">30</a>. The naming of certain objects is not completely consistent in the context of the Oanda APIs. For example, <em>API key</em> and <em>access token</em> are used interchangeably. Also <em>account ID</em> and <em>account number</em> refer to the same number.
</div>
<div class="footnote" id="_footnote_31">
<a href="#_footnoteref_31">31</a>. This implicitely neglects transaction
 costs in the form of bid-ask spreads when selling and buying units of 
the instrument, respectively.
</div>
<div class="footnote" id="_footnote_32">
<a href="#_footnoteref_32">32</a>. Note that for some instruments <em>one unit</em> means 1 USD, like for currency-related CFDs. For others, like for index-related CFDs (e.g. DE30_EUR), <em>one unit</em> means a currency exposure at the (bid/ask) price of the CFD (e.g. 11,456 EUR).
</div>
<div class="footnote" id="_footnote_33">
<a href="#_footnoteref_33">33</a>. See, for example, the article <a href="https://www.bloomberg.com/news/articles/2016-12-16/bitcoin-s-rally-crushed-every-other-currency-in-2016-here-s-why" target="_blank"> Bitcoin’s Rally Crushed Every Other Currency in 2016. Here’s Why</a>.
</div>
<div class="footnote" id="_footnote_34">
<a href="#_footnoteref_34">34</a>. See this <a href="http://www.coindesk.com/network-effects-volatility-liquidity-bitcoin-versus-payment-coins/" target="_blank">CoinDesk article</a> for an analysis of the volatility and liquidity of different cryptocurrencies.
</div>
<div class="footnote" id="_footnote_35">
<a href="#_footnoteref_35">35</a>. The exposition follows Hung (2010).
</div>
<div class="footnote" id="_footnote_36">
<a href="#_footnoteref_36">36</a>. See <a href="#python_numpy_pandas">Appendix A: Python, NumPy, matplotlib, pandas</a> for drawdown calculations.
</div>
<div class="footnote" id="_footnote_37">
<a href="#_footnoteref_37">37</a>. See Hilpisch (2014), ch. 10, for the calculation of Value-at-Risk measures.
</div>
<div class="footnote" id="_footnote_38">
<a href="#_footnoteref_38">38</a>. This appendix is mainly based on chapter 2 of Hilpisch (2017).
</div>
</div>
<div id="footer">
<div id="footer-text">
Last updated 2017-05-30 15:40:57 CEST
</div>
</div>
<script type="text/x-mathjax-config;executed=true">
MathJax.Hub.Config({
  messageStyle: "none",
  tex2jax: {
    inlineMath: [["\\(", "\\)"]],
    displayMath: [["\\[", "\\]"]],
    ignoreClass: "nostem|nolatexmath"
  },
  asciimath2jax: {
    delimiters: [["\\$", "\\$"]],
    ignoreClass: "nostem|noasciimath"
  },
  TeX: { equationNumbers: { autoNumber: "none" } }
});
</script>
<script src="Python%20for%20Algorithmic%20Trading_files/MathJax.js" target="_blank"></script>

<div style="position: absolute; width: 0px; height: 0px; overflow: hidden; padding: 0px; border: 0px none; margin: 0px;"><div id="MathJax_Font_Test" style="position: absolute; visibility: hidden; top: 0px; left: 0px; width: auto; padding: 0px; border: 0px none; margin: 0px; white-space: nowrap; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; font-size: 40px; font-weight: normal; font-style: normal; font-size-adjust: none; font-family: MathJax_Main,sans-serif;"></div></div></body></html>